"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/proxy-from-env";
exports.ids = ["vendor-chunks/proxy-from-env"];
exports.modules = {

/***/ "(ssr)/./node_modules/proxy-from-env/index.js":
/*!**********************************************!*\
  !*** ./node_modules/proxy-from-env/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n\r\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\r\n\r\nvar DEFAULT_PORTS = {\r\n  ftp: 21,\r\n  gopher: 70,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443,\r\n};\r\n\r\nvar stringEndsWith = String.prototype.endsWith || function(s) {\r\n  return s.length <= this.length &&\r\n    this.indexOf(s, this.length - s.length) !== -1;\r\n};\r\n\r\n/**\r\n * @param {string|object} url - The URL, or the result from url.parse.\r\n * @return {string} The URL of the proxy that should handle the request to the\r\n *  given URL. If no proxy is set, this will be an empty string.\r\n */\r\nfunction getProxyForUrl(url) {\r\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\r\n  var proto = parsedUrl.protocol;\r\n  var hostname = parsedUrl.host;\r\n  var port = parsedUrl.port;\r\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\r\n    return '';  // Don't proxy URLs without a valid scheme or host.\r\n  }\r\n\r\n  proto = proto.split(':', 1)[0];\r\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\r\n  // sure that the brackets around IPv6 addresses are kept.\r\n  hostname = hostname.replace(/:\\d*$/, '');\r\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\r\n  if (!shouldProxy(hostname, port)) {\r\n    return '';  // Don't proxy URLs that match NO_PROXY.\r\n  }\r\n\r\n  var proxy =\r\n    getEnv('npm_config_' + proto + '_proxy') ||\r\n    getEnv(proto + '_proxy') ||\r\n    getEnv('npm_config_proxy') ||\r\n    getEnv('all_proxy');\r\n  if (proxy && proxy.indexOf('://') === -1) {\r\n    // Missing scheme in proxy, default to the requested URL's scheme.\r\n    proxy = proto + '://' + proxy;\r\n  }\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Determines whether a given URL should be proxied.\r\n *\r\n * @param {string} hostname - The host name of the URL.\r\n * @param {number} port - The effective port of the URL.\r\n * @returns {boolean} Whether the given URL should be proxied.\r\n * @private\r\n */\r\nfunction shouldProxy(hostname, port) {\r\n  var NO_PROXY =\r\n    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\r\n  if (!NO_PROXY) {\r\n    return true;  // Always proxy if NO_PROXY is not set.\r\n  }\r\n  if (NO_PROXY === '*') {\r\n    return false;  // Never proxy if wildcard is set.\r\n  }\r\n\r\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\r\n    if (!proxy) {\r\n      return true;  // Skip zero-length hosts.\r\n    }\r\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\r\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\r\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\r\n    if (parsedProxyPort && parsedProxyPort !== port) {\r\n      return true;  // Skip if ports don't match.\r\n    }\r\n\r\n    if (!/^[.*]/.test(parsedProxyHostname)) {\r\n      // No wildcards, so stop proxying if there is an exact match.\r\n      return hostname !== parsedProxyHostname;\r\n    }\r\n\r\n    if (parsedProxyHostname.charAt(0) === '*') {\r\n      // Remove leading wildcard.\r\n      parsedProxyHostname = parsedProxyHostname.slice(1);\r\n    }\r\n    // Stop proxying if the hostname ends with the no_proxy host.\r\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\r\n  });\r\n}\r\n\r\n/**\r\n * Get the value for an environment variable.\r\n *\r\n * @param {string} key - The name of the environment variable.\r\n * @return {string} The value of the environment variable.\r\n * @private\r\n */\r\nfunction getEnv(key) {\r\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\r\n}\r\n\r\nexports.getProxyForUrl = getProxyForUrl;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJveHktZnJvbS1lbnYvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLGVBQWUsNkNBQW9CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL3Byb3h5LWZyb20tZW52L2luZGV4LmpzPzM4MmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIHBhcnNlVXJsID0gcmVxdWlyZSgndXJsJykucGFyc2U7XHJcblxyXG52YXIgREVGQVVMVF9QT1JUUyA9IHtcclxuICBmdHA6IDIxLFxyXG4gIGdvcGhlcjogNzAsXHJcbiAgaHR0cDogODAsXHJcbiAgaHR0cHM6IDQ0MyxcclxuICB3czogODAsXHJcbiAgd3NzOiA0NDMsXHJcbn07XHJcblxyXG52YXIgc3RyaW5nRW5kc1dpdGggPSBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoIHx8IGZ1bmN0aW9uKHMpIHtcclxuICByZXR1cm4gcy5sZW5ndGggPD0gdGhpcy5sZW5ndGggJiZcclxuICAgIHRoaXMuaW5kZXhPZihzLCB0aGlzLmxlbmd0aCAtIHMubGVuZ3RoKSAhPT0gLTE7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSB1cmwgLSBUaGUgVVJMLCBvciB0aGUgcmVzdWx0IGZyb20gdXJsLnBhcnNlLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIHByb3h5IHRoYXQgc2hvdWxkIGhhbmRsZSB0aGUgcmVxdWVzdCB0byB0aGVcclxuICogIGdpdmVuIFVSTC4gSWYgbm8gcHJveHkgaXMgc2V0LCB0aGlzIHdpbGwgYmUgYW4gZW1wdHkgc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UHJveHlGb3JVcmwodXJsKSB7XHJcbiAgdmFyIHBhcnNlZFVybCA9IHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnID8gcGFyc2VVcmwodXJsKSA6IHVybCB8fCB7fTtcclxuICB2YXIgcHJvdG8gPSBwYXJzZWRVcmwucHJvdG9jb2w7XHJcbiAgdmFyIGhvc3RuYW1lID0gcGFyc2VkVXJsLmhvc3Q7XHJcbiAgdmFyIHBvcnQgPSBwYXJzZWRVcmwucG9ydDtcclxuICBpZiAodHlwZW9mIGhvc3RuYW1lICE9PSAnc3RyaW5nJyB8fCAhaG9zdG5hbWUgfHwgdHlwZW9mIHByb3RvICE9PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuICcnOyAgLy8gRG9uJ3QgcHJveHkgVVJMcyB3aXRob3V0IGEgdmFsaWQgc2NoZW1lIG9yIGhvc3QuXHJcbiAgfVxyXG5cclxuICBwcm90byA9IHByb3RvLnNwbGl0KCc6JywgMSlbMF07XHJcbiAgLy8gU3RyaXBwaW5nIHBvcnRzIGluIHRoaXMgd2F5IGluc3RlYWQgb2YgdXNpbmcgcGFyc2VkVXJsLmhvc3RuYW1lIHRvIG1ha2VcclxuICAvLyBzdXJlIHRoYXQgdGhlIGJyYWNrZXRzIGFyb3VuZCBJUHY2IGFkZHJlc3NlcyBhcmUga2VwdC5cclxuICBob3N0bmFtZSA9IGhvc3RuYW1lLnJlcGxhY2UoLzpcXGQqJC8sICcnKTtcclxuICBwb3J0ID0gcGFyc2VJbnQocG9ydCkgfHwgREVGQVVMVF9QT1JUU1twcm90b10gfHwgMDtcclxuICBpZiAoIXNob3VsZFByb3h5KGhvc3RuYW1lLCBwb3J0KSkge1xyXG4gICAgcmV0dXJuICcnOyAgLy8gRG9uJ3QgcHJveHkgVVJMcyB0aGF0IG1hdGNoIE5PX1BST1hZLlxyXG4gIH1cclxuXHJcbiAgdmFyIHByb3h5ID1cclxuICAgIGdldEVudignbnBtX2NvbmZpZ18nICsgcHJvdG8gKyAnX3Byb3h5JykgfHxcclxuICAgIGdldEVudihwcm90byArICdfcHJveHknKSB8fFxyXG4gICAgZ2V0RW52KCducG1fY29uZmlnX3Byb3h5JykgfHxcclxuICAgIGdldEVudignYWxsX3Byb3h5Jyk7XHJcbiAgaWYgKHByb3h5ICYmIHByb3h5LmluZGV4T2YoJzovLycpID09PSAtMSkge1xyXG4gICAgLy8gTWlzc2luZyBzY2hlbWUgaW4gcHJveHksIGRlZmF1bHQgdG8gdGhlIHJlcXVlc3RlZCBVUkwncyBzY2hlbWUuXHJcbiAgICBwcm94eSA9IHByb3RvICsgJzovLycgKyBwcm94eTtcclxuICB9XHJcbiAgcmV0dXJuIHByb3h5O1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgZ2l2ZW4gVVJMIHNob3VsZCBiZSBwcm94aWVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9zdG5hbWUgLSBUaGUgaG9zdCBuYW1lIG9mIHRoZSBVUkwuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3J0IC0gVGhlIGVmZmVjdGl2ZSBwb3J0IG9mIHRoZSBVUkwuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBVUkwgc2hvdWxkIGJlIHByb3hpZWQuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBzaG91bGRQcm94eShob3N0bmFtZSwgcG9ydCkge1xyXG4gIHZhciBOT19QUk9YWSA9XHJcbiAgICAoZ2V0RW52KCducG1fY29uZmlnX25vX3Byb3h5JykgfHwgZ2V0RW52KCdub19wcm94eScpKS50b0xvd2VyQ2FzZSgpO1xyXG4gIGlmICghTk9fUFJPWFkpIHtcclxuICAgIHJldHVybiB0cnVlOyAgLy8gQWx3YXlzIHByb3h5IGlmIE5PX1BST1hZIGlzIG5vdCBzZXQuXHJcbiAgfVxyXG4gIGlmIChOT19QUk9YWSA9PT0gJyonKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7ICAvLyBOZXZlciBwcm94eSBpZiB3aWxkY2FyZCBpcyBzZXQuXHJcbiAgfVxyXG5cclxuICByZXR1cm4gTk9fUFJPWFkuc3BsaXQoL1ssXFxzXS8pLmV2ZXJ5KGZ1bmN0aW9uKHByb3h5KSB7XHJcbiAgICBpZiAoIXByb3h5KSB7XHJcbiAgICAgIHJldHVybiB0cnVlOyAgLy8gU2tpcCB6ZXJvLWxlbmd0aCBob3N0cy5cclxuICAgIH1cclxuICAgIHZhciBwYXJzZWRQcm94eSA9IHByb3h5Lm1hdGNoKC9eKC4rKTooXFxkKykkLyk7XHJcbiAgICB2YXIgcGFyc2VkUHJveHlIb3N0bmFtZSA9IHBhcnNlZFByb3h5ID8gcGFyc2VkUHJveHlbMV0gOiBwcm94eTtcclxuICAgIHZhciBwYXJzZWRQcm94eVBvcnQgPSBwYXJzZWRQcm94eSA/IHBhcnNlSW50KHBhcnNlZFByb3h5WzJdKSA6IDA7XHJcbiAgICBpZiAocGFyc2VkUHJveHlQb3J0ICYmIHBhcnNlZFByb3h5UG9ydCAhPT0gcG9ydCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTsgIC8vIFNraXAgaWYgcG9ydHMgZG9uJ3QgbWF0Y2guXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEvXlsuKl0vLnRlc3QocGFyc2VkUHJveHlIb3N0bmFtZSkpIHtcclxuICAgICAgLy8gTm8gd2lsZGNhcmRzLCBzbyBzdG9wIHByb3h5aW5nIGlmIHRoZXJlIGlzIGFuIGV4YWN0IG1hdGNoLlxyXG4gICAgICByZXR1cm4gaG9zdG5hbWUgIT09IHBhcnNlZFByb3h5SG9zdG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhcnNlZFByb3h5SG9zdG5hbWUuY2hhckF0KDApID09PSAnKicpIHtcclxuICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgd2lsZGNhcmQuXHJcbiAgICAgIHBhcnNlZFByb3h5SG9zdG5hbWUgPSBwYXJzZWRQcm94eUhvc3RuYW1lLnNsaWNlKDEpO1xyXG4gICAgfVxyXG4gICAgLy8gU3RvcCBwcm94eWluZyBpZiB0aGUgaG9zdG5hbWUgZW5kcyB3aXRoIHRoZSBub19wcm94eSBob3N0LlxyXG4gICAgcmV0dXJuICFzdHJpbmdFbmRzV2l0aC5jYWxsKGhvc3RuYW1lLCBwYXJzZWRQcm94eUhvc3RuYW1lKTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgdmFsdWUgZm9yIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIG5hbWUgb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2YWx1ZSBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRFbnYoa2V5KSB7XHJcbiAgcmV0dXJuIHByb2Nlc3MuZW52W2tleS50b0xvd2VyQ2FzZSgpXSB8fCBwcm9jZXNzLmVudltrZXkudG9VcHBlckNhc2UoKV0gfHwgJyc7XHJcbn1cclxuXHJcbmV4cG9ydHMuZ2V0UHJveHlGb3JVcmwgPSBnZXRQcm94eUZvclVybDtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/proxy-from-env/index.js\n");

/***/ })

};
;