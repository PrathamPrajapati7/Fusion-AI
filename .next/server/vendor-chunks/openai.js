"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openai";
exports.ids = ["vendor-chunks/openai"];
exports.modules = {

/***/ "(rsc)/./node_modules/openai/_shims/MultipartBody.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/_shims/MultipartBody.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: () => (/* binding */ MultipartBody)\n/* harmony export */ });\n/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\nclass MultipartBody {\r\n    constructor(body) {\r\n        this.body = body;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return 'MultipartBody';\r\n    }\r\n}\r\n//# sourceMappingURL=MultipartBody.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9NdWx0aXBhcnRCb2R5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvTXVsdGlwYXJ0Qm9keS5tanM/OTM4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGlzY2xhaW1lcjogbW9kdWxlcyBpbiBfc2hpbXMgYXJlbid0IGludGVuZGVkIHRvIGJlIGltcG9ydGVkIGJ5IFNESyB1c2Vycy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNdWx0aXBhcnRCb2R5IHtcclxuICAgIGNvbnN0cnVjdG9yKGJvZHkpIHtcclxuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG4gICAgfVxyXG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xyXG4gICAgICAgIHJldHVybiAnTXVsdGlwYXJ0Qm9keSc7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXVsdGlwYXJ0Qm9keS5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/MultipartBody.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/openai/_shims/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob),\n/* harmony export */   File: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers),\n/* harmony export */   ReadableStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream),\n/* harmony export */   Request: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Request),\n/* harmony export */   Response: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Response),\n/* harmony export */   auto: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.auto),\n/* harmony export */   fetch: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream),\n/* harmony export */   kind: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind),\n/* harmony export */   setShims: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims)\n/* harmony export */ });\n/* harmony import */ var _registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry.mjs */ \"(rsc)/./node_modules/openai/_shims/registry.mjs\");\n/* harmony import */ var openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/_shims/auto/runtime */ \"(rsc)/./node_modules/openai/_shims/node-runtime.mjs\");\n/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\n\r\n\r\nif (!_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind) _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims(openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__.getRuntime(), { auto: true });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDd0M7QUFDVztBQUNuRCxLQUFLLCtDQUFVLEVBQUUsbURBQWMsQ0FBQyxpRUFBZSxNQUFNLFlBQVk7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanM/YmM0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGlzY2xhaW1lcjogbW9kdWxlcyBpbiBfc2hpbXMgYXJlbid0IGludGVuZGVkIHRvIGJlIGltcG9ydGVkIGJ5IFNESyB1c2Vycy5cclxuICovXHJcbmltcG9ydCAqIGFzIHNoaW1zIGZyb20gJy4vcmVnaXN0cnkubWpzJztcclxuaW1wb3J0ICogYXMgYXV0byBmcm9tICdvcGVuYWkvX3NoaW1zL2F1dG8vcnVudGltZSc7XHJcbmlmICghc2hpbXMua2luZCkgc2hpbXMuc2V0U2hpbXMoYXV0by5nZXRSdW50aW1lKCksIHsgYXV0bzogdHJ1ZSB9KTtcclxuZXhwb3J0ICogZnJvbSAnLi9yZWdpc3RyeS5tanMnO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/node-runtime.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/_shims/node-runtime.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntime: () => (/* binding */ getRuntime)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\n/* harmony import */ var formdata_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-node */ \"(rsc)/./node_modules/formdata-node/lib/esm/index.js\");\n/* harmony import */ var agentkeepalive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! agentkeepalive */ \"(rsc)/./node_modules/agentkeepalive/index.js\");\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MultipartBody.mjs */ \"(rsc)/./node_modules/openai/_shims/MultipartBody.mjs\");\n/* harmony import */ var node_stream_web__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:stream/web */ \"node:stream/web\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet fileFromPathWarned = false;\r\nasync function fileFromPath(path, ...args) {\r\n    // this import fails in environments that don't handle export maps correctly, like old versions of Jest\r\n    const { fileFromPath: _fileFromPath } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/formdata-node\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! formdata-node/file-from-path */ \"(rsc)/./node_modules/formdata-node/lib/esm/fileFromPath.js\"));\r\n    if (!fileFromPathWarned) {\r\n        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\r\n        fileFromPathWarned = true;\r\n    }\r\n    // @ts-ignore\r\n    return await _fileFromPath(path, ...args);\r\n}\r\nconst defaultHttpAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__({ keepAlive: true, timeout: 5 * 60 * 1000 });\r\nconst defaultHttpsAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });\r\nasync function getMultipartRequestOptions(form, opts) {\r\n    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_5__.FormDataEncoder(form);\r\n    const readable = node_stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from(encoder);\r\n    const body = new _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__.MultipartBody(readable);\r\n    const headers = {\r\n        ...opts.headers,\r\n        ...encoder.headers,\r\n        'Content-Length': encoder.contentLength,\r\n    };\r\n    return { ...opts, body: body, headers };\r\n}\r\nfunction getRuntime() {\r\n    // Polyfill global object if needed.\r\n    if (typeof AbortController === 'undefined') {\r\n        // @ts-expect-error (the types are subtly different, but compatible in practice)\r\n        globalThis.AbortController = abort_controller__WEBPACK_IMPORTED_MODULE_3__.AbortController;\r\n    }\r\n    return {\r\n        kind: 'node',\r\n        fetch: node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\r\n        Request: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Request,\r\n        Response: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Response,\r\n        Headers: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Headers,\r\n        FormData: formdata_node__WEBPACK_IMPORTED_MODULE_1__.FormData,\r\n        Blob: formdata_node__WEBPACK_IMPORTED_MODULE_1__.Blob,\r\n        File: formdata_node__WEBPACK_IMPORTED_MODULE_1__.File,\r\n        ReadableStream: node_stream_web__WEBPACK_IMPORTED_MODULE_7__.ReadableStream,\r\n        getMultipartRequestOptions,\r\n        getDefaultAgent: (url) => (url.startsWith('https') ? defaultHttpsAgent : defaultHttpAgent),\r\n        fileFromPath,\r\n        isFsReadStream: (value) => value instanceof node_fs__WEBPACK_IMPORTED_MODULE_4__.ReadStream,\r\n    };\r\n}\r\n//# sourceMappingURL=node-runtime.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9ub2RlLXJ1bnRpbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDRztBQUNRO0FBQ2tDO0FBQ3pCO0FBQ0Q7QUFDYjtBQUNhO0FBQ0g7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4QkFBOEIsUUFBUSxrU0FBc0M7QUFDeEY7QUFDQSxrREFBa0QsMEJBQTBCLHFCQUFxQjtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDJDQUFjLEdBQUcseUNBQXlDO0FBQ3ZGLDhCQUE4QixzREFBeUIsR0FBRyx5Q0FBeUM7QUFDbkc7QUFDQSx3QkFBd0IsOERBQWU7QUFDdkMscUJBQXFCLGlEQUFRO0FBQzdCLHFCQUFxQiw2REFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsNkRBQXVCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0RBQVU7QUFDekIsaUJBQWlCLCtDQUFVO0FBQzNCLGtCQUFrQixnREFBVztBQUM3QixpQkFBaUIsK0NBQVU7QUFDM0Isa0JBQWtCLG1EQUFXO0FBQzdCLGNBQWMsK0NBQU87QUFDckIsY0FBYywrQ0FBTztBQUNyQixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELCtDQUFZO0FBQ2hFO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL25vZGUtcnVudGltZS5tanM/NTZiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBuZiBmcm9tICdub2RlLWZldGNoJztcclxuaW1wb3J0ICogYXMgZmQgZnJvbSAnZm9ybWRhdGEtbm9kZSc7XHJcbmltcG9ydCBLZWVwQWxpdmVBZ2VudCBmcm9tICdhZ2VudGtlZXBhbGl2ZSc7XHJcbmltcG9ydCB7IEFib3J0Q29udHJvbGxlciBhcyBBYm9ydENvbnRyb2xsZXJQb2x5ZmlsbCB9IGZyb20gJ2Fib3J0LWNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBSZWFkU3RyZWFtIGFzIEZzUmVhZFN0cmVhbSB9IGZyb20gJ25vZGU6ZnMnO1xyXG5pbXBvcnQgeyBGb3JtRGF0YUVuY29kZXIgfSBmcm9tICdmb3JtLWRhdGEtZW5jb2Rlcic7XHJcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnbm9kZTpzdHJlYW0nO1xyXG5pbXBvcnQgeyBNdWx0aXBhcnRCb2R5IH0gZnJvbSBcIi4vTXVsdGlwYXJ0Qm9keS5tanNcIjtcclxuaW1wb3J0IHsgUmVhZGFibGVTdHJlYW0gfSBmcm9tICdub2RlOnN0cmVhbS93ZWInO1xyXG5sZXQgZmlsZUZyb21QYXRoV2FybmVkID0gZmFsc2U7XHJcbmFzeW5jIGZ1bmN0aW9uIGZpbGVGcm9tUGF0aChwYXRoLCAuLi5hcmdzKSB7XHJcbiAgICAvLyB0aGlzIGltcG9ydCBmYWlscyBpbiBlbnZpcm9ubWVudHMgdGhhdCBkb24ndCBoYW5kbGUgZXhwb3J0IG1hcHMgY29ycmVjdGx5LCBsaWtlIG9sZCB2ZXJzaW9ucyBvZiBKZXN0XHJcbiAgICBjb25zdCB7IGZpbGVGcm9tUGF0aDogX2ZpbGVGcm9tUGF0aCB9ID0gYXdhaXQgaW1wb3J0KCdmb3JtZGF0YS1ub2RlL2ZpbGUtZnJvbS1wYXRoJyk7XHJcbiAgICBpZiAoIWZpbGVGcm9tUGF0aFdhcm5lZCkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgZmlsZUZyb21QYXRoIGlzIGRlcHJlY2F0ZWQ7IHVzZSBmcy5jcmVhdGVSZWFkU3RyZWFtKCR7SlNPTi5zdHJpbmdpZnkocGF0aCl9KSBpbnN0ZWFkYCk7XHJcbiAgICAgICAgZmlsZUZyb21QYXRoV2FybmVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHJldHVybiBhd2FpdCBfZmlsZUZyb21QYXRoKHBhdGgsIC4uLmFyZ3MpO1xyXG59XHJcbmNvbnN0IGRlZmF1bHRIdHRwQWdlbnQgPSBuZXcgS2VlcEFsaXZlQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUsIHRpbWVvdXQ6IDUgKiA2MCAqIDEwMDAgfSk7XHJcbmNvbnN0IGRlZmF1bHRIdHRwc0FnZW50ID0gbmV3IEtlZXBBbGl2ZUFnZW50Lkh0dHBzQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUsIHRpbWVvdXQ6IDUgKiA2MCAqIDEwMDAgfSk7XHJcbmFzeW5jIGZ1bmN0aW9uIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zKGZvcm0sIG9wdHMpIHtcclxuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRm9ybURhdGFFbmNvZGVyKGZvcm0pO1xyXG4gICAgY29uc3QgcmVhZGFibGUgPSBSZWFkYWJsZS5mcm9tKGVuY29kZXIpO1xyXG4gICAgY29uc3QgYm9keSA9IG5ldyBNdWx0aXBhcnRCb2R5KHJlYWRhYmxlKTtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSB7XHJcbiAgICAgICAgLi4ub3B0cy5oZWFkZXJzLFxyXG4gICAgICAgIC4uLmVuY29kZXIuaGVhZGVycyxcclxuICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBlbmNvZGVyLmNvbnRlbnRMZW5ndGgsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHsgLi4ub3B0cywgYm9keTogYm9keSwgaGVhZGVycyB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSdW50aW1lKCkge1xyXG4gICAgLy8gUG9seWZpbGwgZ2xvYmFsIG9iamVjdCBpZiBuZWVkZWQuXHJcbiAgICBpZiAodHlwZW9mIEFib3J0Q29udHJvbGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yICh0aGUgdHlwZXMgYXJlIHN1YnRseSBkaWZmZXJlbnQsIGJ1dCBjb21wYXRpYmxlIGluIHByYWN0aWNlKVxyXG4gICAgICAgIGdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyID0gQWJvcnRDb250cm9sbGVyUG9seWZpbGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGtpbmQ6ICdub2RlJyxcclxuICAgICAgICBmZXRjaDogbmYuZGVmYXVsdCxcclxuICAgICAgICBSZXF1ZXN0OiBuZi5SZXF1ZXN0LFxyXG4gICAgICAgIFJlc3BvbnNlOiBuZi5SZXNwb25zZSxcclxuICAgICAgICBIZWFkZXJzOiBuZi5IZWFkZXJzLFxyXG4gICAgICAgIEZvcm1EYXRhOiBmZC5Gb3JtRGF0YSxcclxuICAgICAgICBCbG9iOiBmZC5CbG9iLFxyXG4gICAgICAgIEZpbGU6IGZkLkZpbGUsXHJcbiAgICAgICAgUmVhZGFibGVTdHJlYW0sXHJcbiAgICAgICAgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMsXHJcbiAgICAgICAgZ2V0RGVmYXVsdEFnZW50OiAodXJsKSA9PiAodXJsLnN0YXJ0c1dpdGgoJ2h0dHBzJykgPyBkZWZhdWx0SHR0cHNBZ2VudCA6IGRlZmF1bHRIdHRwQWdlbnQpLFxyXG4gICAgICAgIGZpbGVGcm9tUGF0aCxcclxuICAgICAgICBpc0ZzUmVhZFN0cmVhbTogKHZhbHVlKSA9PiB2YWx1ZSBpbnN0YW5jZW9mIEZzUmVhZFN0cmVhbSxcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1ydW50aW1lLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/node-runtime.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/registry.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/_shims/registry.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FormData: () => (/* binding */ FormData),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   auto: () => (/* binding */ auto),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* binding */ getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* binding */ isFsReadStream),\n/* harmony export */   kind: () => (/* binding */ kind),\n/* harmony export */   setShims: () => (/* binding */ setShims)\n/* harmony export */ });\nlet auto = false;\r\nlet kind = undefined;\r\nlet fetch = undefined;\r\nlet Request = undefined;\r\nlet Response = undefined;\r\nlet Headers = undefined;\r\nlet FormData = undefined;\r\nlet Blob = undefined;\r\nlet File = undefined;\r\nlet ReadableStream = undefined;\r\nlet getMultipartRequestOptions = undefined;\r\nlet getDefaultAgent = undefined;\r\nlet fileFromPath = undefined;\r\nlet isFsReadStream = undefined;\r\nfunction setShims(shims, options = { auto: false }) {\r\n    if (auto) {\r\n        throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\r\n    }\r\n    if (kind) {\r\n        throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\r\n    }\r\n    auto = options.auto;\r\n    kind = shims.kind;\r\n    fetch = shims.fetch;\r\n    Request = shims.Request;\r\n    Response = shims.Response;\r\n    Headers = shims.Headers;\r\n    FormData = shims.FormData;\r\n    Blob = shims.Blob;\r\n    File = shims.File;\r\n    ReadableStream = shims.ReadableStream;\r\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\r\n    getDefaultAgent = shims.getDefaultAgent;\r\n    fileFromPath = shims.fileFromPath;\r\n    isFsReadStream = shims.isFsReadStream;\r\n}\r\n//# sourceMappingURL=registry.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9yZWdpc3RyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxhQUFhO0FBQ3pEO0FBQ0EsMkRBQTJELFdBQVc7QUFDdEU7QUFDQTtBQUNBLHdEQUF3RCxXQUFXLG1DQUFtQyxLQUFLO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9yZWdpc3RyeS5tanM/NDc2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbGV0IGF1dG8gPSBmYWxzZTtcclxuZXhwb3J0IGxldCBraW5kID0gdW5kZWZpbmVkO1xyXG5leHBvcnQgbGV0IGZldGNoID0gdW5kZWZpbmVkO1xyXG5leHBvcnQgbGV0IFJlcXVlc3QgPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCBsZXQgUmVzcG9uc2UgPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCBsZXQgSGVhZGVycyA9IHVuZGVmaW5lZDtcclxuZXhwb3J0IGxldCBGb3JtRGF0YSA9IHVuZGVmaW5lZDtcclxuZXhwb3J0IGxldCBCbG9iID0gdW5kZWZpbmVkO1xyXG5leHBvcnQgbGV0IEZpbGUgPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCBsZXQgUmVhZGFibGVTdHJlYW0gPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCBsZXQgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMgPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCBsZXQgZ2V0RGVmYXVsdEFnZW50ID0gdW5kZWZpbmVkO1xyXG5leHBvcnQgbGV0IGZpbGVGcm9tUGF0aCA9IHVuZGVmaW5lZDtcclxuZXhwb3J0IGxldCBpc0ZzUmVhZFN0cmVhbSA9IHVuZGVmaW5lZDtcclxuZXhwb3J0IGZ1bmN0aW9uIHNldFNoaW1zKHNoaW1zLCBvcHRpb25zID0geyBhdXRvOiBmYWxzZSB9KSB7XHJcbiAgICBpZiAoYXV0bykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgeW91IG11c3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYmVmb3JlIGltcG9ydGluZyBhbnl0aGluZyBlbHNlIGZyb20gb3BlbmFpYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoa2luZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYWZ0ZXIgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtraW5kfSdcXGBgKTtcclxuICAgIH1cclxuICAgIGF1dG8gPSBvcHRpb25zLmF1dG87XHJcbiAgICBraW5kID0gc2hpbXMua2luZDtcclxuICAgIGZldGNoID0gc2hpbXMuZmV0Y2g7XHJcbiAgICBSZXF1ZXN0ID0gc2hpbXMuUmVxdWVzdDtcclxuICAgIFJlc3BvbnNlID0gc2hpbXMuUmVzcG9uc2U7XHJcbiAgICBIZWFkZXJzID0gc2hpbXMuSGVhZGVycztcclxuICAgIEZvcm1EYXRhID0gc2hpbXMuRm9ybURhdGE7XHJcbiAgICBCbG9iID0gc2hpbXMuQmxvYjtcclxuICAgIEZpbGUgPSBzaGltcy5GaWxlO1xyXG4gICAgUmVhZGFibGVTdHJlYW0gPSBzaGltcy5SZWFkYWJsZVN0cmVhbTtcclxuICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zID0gc2hpbXMuZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM7XHJcbiAgICBnZXREZWZhdWx0QWdlbnQgPSBzaGltcy5nZXREZWZhdWx0QWdlbnQ7XHJcbiAgICBmaWxlRnJvbVBhdGggPSBzaGltcy5maWxlRnJvbVBhdGg7XHJcbiAgICBpc0ZzUmVhZFN0cmVhbSA9IHNoaW1zLmlzRnNSZWFkU3RyZWFtO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZ2lzdHJ5Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/registry.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/_vendor/partial-json-parser/parser.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partialParse: () => (/* binding */ partialParse)\n/* harmony export */ });\nconst tokenize = (input) => {\r\n    let current = 0;\r\n    let tokens = [];\r\n    while (current < input.length) {\r\n        let char = input[current];\r\n        if (char === '\\\\') {\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === '{') {\r\n            tokens.push({\r\n                type: 'brace',\r\n                value: '{',\r\n            });\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === '}') {\r\n            tokens.push({\r\n                type: 'brace',\r\n                value: '}',\r\n            });\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === '[') {\r\n            tokens.push({\r\n                type: 'paren',\r\n                value: '[',\r\n            });\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === ']') {\r\n            tokens.push({\r\n                type: 'paren',\r\n                value: ']',\r\n            });\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === ':') {\r\n            tokens.push({\r\n                type: 'separator',\r\n                value: ':',\r\n            });\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === ',') {\r\n            tokens.push({\r\n                type: 'delimiter',\r\n                value: ',',\r\n            });\r\n            current++;\r\n            continue;\r\n        }\r\n        if (char === '\"') {\r\n            let value = '';\r\n            let danglingQuote = false;\r\n            char = input[++current];\r\n            while (char !== '\"') {\r\n                if (current === input.length) {\r\n                    danglingQuote = true;\r\n                    break;\r\n                }\r\n                if (char === '\\\\') {\r\n                    current++;\r\n                    if (current === input.length) {\r\n                        danglingQuote = true;\r\n                        break;\r\n                    }\r\n                    value += char + input[current];\r\n                    char = input[++current];\r\n                }\r\n                else {\r\n                    value += char;\r\n                    char = input[++current];\r\n                }\r\n            }\r\n            char = input[++current];\r\n            if (!danglingQuote) {\r\n                tokens.push({\r\n                    type: 'string',\r\n                    value,\r\n                });\r\n            }\r\n            continue;\r\n        }\r\n        let WHITESPACE = /\\s/;\r\n        if (char && WHITESPACE.test(char)) {\r\n            current++;\r\n            continue;\r\n        }\r\n        let NUMBERS = /[0-9]/;\r\n        if ((char && NUMBERS.test(char)) || char === '-' || char === '.') {\r\n            let value = '';\r\n            if (char === '-') {\r\n                value += char;\r\n                char = input[++current];\r\n            }\r\n            while ((char && NUMBERS.test(char)) || char === '.') {\r\n                value += char;\r\n                char = input[++current];\r\n            }\r\n            tokens.push({\r\n                type: 'number',\r\n                value,\r\n            });\r\n            continue;\r\n        }\r\n        let LETTERS = /[a-z]/i;\r\n        if (char && LETTERS.test(char)) {\r\n            let value = '';\r\n            while (char && LETTERS.test(char)) {\r\n                if (current === input.length) {\r\n                    break;\r\n                }\r\n                value += char;\r\n                char = input[++current];\r\n            }\r\n            if (value == 'true' || value == 'false' || value === 'null') {\r\n                tokens.push({\r\n                    type: 'name',\r\n                    value,\r\n                });\r\n            }\r\n            else {\r\n                // unknown token, e.g. `nul` which isn't quite `null`\r\n                current++;\r\n                continue;\r\n            }\r\n            continue;\r\n        }\r\n        current++;\r\n    }\r\n    return tokens;\r\n}, strip = (tokens) => {\r\n    if (tokens.length === 0) {\r\n        return tokens;\r\n    }\r\n    let lastToken = tokens[tokens.length - 1];\r\n    switch (lastToken.type) {\r\n        case 'separator':\r\n            tokens = tokens.slice(0, tokens.length - 1);\r\n            return strip(tokens);\r\n            break;\r\n        case 'number':\r\n            let lastCharacterOfLastToken = lastToken.value[lastToken.value.length - 1];\r\n            if (lastCharacterOfLastToken === '.' || lastCharacterOfLastToken === '-') {\r\n                tokens = tokens.slice(0, tokens.length - 1);\r\n                return strip(tokens);\r\n            }\r\n        case 'string':\r\n            let tokenBeforeTheLastToken = tokens[tokens.length - 2];\r\n            if (tokenBeforeTheLastToken?.type === 'delimiter') {\r\n                tokens = tokens.slice(0, tokens.length - 1);\r\n                return strip(tokens);\r\n            }\r\n            else if (tokenBeforeTheLastToken?.type === 'brace' && tokenBeforeTheLastToken.value === '{') {\r\n                tokens = tokens.slice(0, tokens.length - 1);\r\n                return strip(tokens);\r\n            }\r\n            break;\r\n        case 'delimiter':\r\n            tokens = tokens.slice(0, tokens.length - 1);\r\n            return strip(tokens);\r\n            break;\r\n    }\r\n    return tokens;\r\n}, unstrip = (tokens) => {\r\n    let tail = [];\r\n    tokens.map((token) => {\r\n        if (token.type === 'brace') {\r\n            if (token.value === '{') {\r\n                tail.push('}');\r\n            }\r\n            else {\r\n                tail.splice(tail.lastIndexOf('}'), 1);\r\n            }\r\n        }\r\n        if (token.type === 'paren') {\r\n            if (token.value === '[') {\r\n                tail.push(']');\r\n            }\r\n            else {\r\n                tail.splice(tail.lastIndexOf(']'), 1);\r\n            }\r\n        }\r\n    });\r\n    if (tail.length > 0) {\r\n        tail.reverse().map((item) => {\r\n            if (item === '}') {\r\n                tokens.push({\r\n                    type: 'brace',\r\n                    value: '}',\r\n                });\r\n            }\r\n            else if (item === ']') {\r\n                tokens.push({\r\n                    type: 'paren',\r\n                    value: ']',\r\n                });\r\n            }\r\n        });\r\n    }\r\n    return tokens;\r\n}, generate = (tokens) => {\r\n    let output = '';\r\n    tokens.map((token) => {\r\n        switch (token.type) {\r\n            case 'string':\r\n                output += '\"' + token.value + '\"';\r\n                break;\r\n            default:\r\n                output += token.value;\r\n                break;\r\n        }\r\n    });\r\n    return output;\r\n}, partialParse = (input) => JSON.parse(generate(unstrip(strip(tokenize(input)))));\r\n\r\n//# sourceMappingURL=parser.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core.mjs":
/*!**************************************!*\
  !*** ./node_modules/openai/core.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise),\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise),\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   createForm: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.createForm),\n/* harmony export */   createResponseHeaders: () => (/* binding */ createResponseHeaders),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   getRequiredHeader: () => (/* binding */ getRequiredHeader),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isHeadersProtocol: () => (/* binding */ isHeadersProtocol),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   isRequestOptions: () => (/* binding */ isRequestOptions),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions),\n/* harmony export */   readEnv: () => (/* binding */ readEnv),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toBase64: () => (/* binding */ toBase64)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/./node_modules/openai/version.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./streaming.mjs */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _AbstractPage_client;\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function defaultParseResponse(props) {\r\n    const { response } = props;\r\n    if (props.options.stream) {\r\n        debug('response', response.status, response.url, response.headers, response.body);\r\n        // Note: there is an invariant here that isn't represented in the type system\r\n        // that if you set `stream: true` the response type must also be `Stream<T>`\r\n        if (props.options.__streamClass) {\r\n            return props.options.__streamClass.fromSSEResponse(response, props.controller);\r\n        }\r\n        return _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromSSEResponse(response, props.controller);\r\n    }\r\n    // fetch refuses to read the body when the status code is 204.\r\n    if (response.status === 204) {\r\n        return null;\r\n    }\r\n    if (props.options.__binaryResponse) {\r\n        return response;\r\n    }\r\n    const contentType = response.headers.get('content-type');\r\n    const isJSON = contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\r\n    if (isJSON) {\r\n        const json = await response.json();\r\n        debug('response', response.status, response.url, response.headers, json);\r\n        return json;\r\n    }\r\n    const text = await response.text();\r\n    debug('response', response.status, response.url, response.headers, text);\r\n    // TODO handle blob, arraybuffer, other content types, etc.\r\n    return text;\r\n}\r\n/**\r\n * A subclass of `Promise` providing additional helper methods\r\n * for interacting with the SDK.\r\n */\r\nclass APIPromise extends Promise {\r\n    constructor(responsePromise, parseResponse = defaultParseResponse) {\r\n        super((resolve) => {\r\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\r\n            // parse the response body; instead .then, .catch, .finally are overridden\r\n            // to parse the response\r\n            resolve(null);\r\n        });\r\n        this.responsePromise = responsePromise;\r\n        this.parseResponse = parseResponse;\r\n    }\r\n    _thenUnwrap(transform) {\r\n        return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\r\n    }\r\n    /**\r\n     * Gets the raw `Response` instance instead of parsing the response\r\n     * data.\r\n     *\r\n     * If you want to parse the response body but still get the `Response`\r\n     * instance, you can use {@link withResponse()}.\r\n     *\r\n     * 👋 Getting the wrong TypeScript type for `Response`?\r\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\r\n     * or add one of these imports before your first `import … from 'openai'`:\r\n     * - `import 'openai/shims/node'` (if you're running on Node)\r\n     * - `import 'openai/shims/web'` (otherwise)\r\n     */\r\n    asResponse() {\r\n        return this.responsePromise.then((p) => p.response);\r\n    }\r\n    /**\r\n     * Gets the parsed response data and the raw `Response` instance.\r\n     *\r\n     * If you just want to get the raw `Response` instance without parsing it,\r\n     * you can use {@link asResponse()}.\r\n     *\r\n     *\r\n     * 👋 Getting the wrong TypeScript type for `Response`?\r\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\r\n     * or add one of these imports before your first `import … from 'openai'`:\r\n     * - `import 'openai/shims/node'` (if you're running on Node)\r\n     * - `import 'openai/shims/web'` (otherwise)\r\n     */\r\n    async withResponse() {\r\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\r\n        return { data, response };\r\n    }\r\n    parse() {\r\n        if (!this.parsedPromise) {\r\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\r\n        }\r\n        return this.parsedPromise;\r\n    }\r\n    then(onfulfilled, onrejected) {\r\n        return this.parse().then(onfulfilled, onrejected);\r\n    }\r\n    catch(onrejected) {\r\n        return this.parse().catch(onrejected);\r\n    }\r\n    finally(onfinally) {\r\n        return this.parse().finally(onfinally);\r\n    }\r\n}\r\nclass APIClient {\r\n    constructor({ baseURL, maxRetries = 2, timeout = 600000, // 10 minutes\r\n    httpAgent, fetch: overridenFetch, }) {\r\n        this.baseURL = baseURL;\r\n        this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\r\n        this.timeout = validatePositiveInteger('timeout', timeout);\r\n        this.httpAgent = httpAgent;\r\n        this.fetch = overridenFetch ?? _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\r\n    }\r\n    authHeaders(opts) {\r\n        return {};\r\n    }\r\n    /**\r\n     * Override this to add your own default headers, for example:\r\n     *\r\n     *  {\r\n     *    ...super.defaultHeaders(),\r\n     *    Authorization: 'Bearer 123',\r\n     *  }\r\n     */\r\n    defaultHeaders(opts) {\r\n        return {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'User-Agent': this.getUserAgent(),\r\n            ...getPlatformHeaders(),\r\n            ...this.authHeaders(opts),\r\n        };\r\n    }\r\n    /**\r\n     * Override this to add your own headers validation:\r\n     */\r\n    validateHeaders(headers, customHeaders) { }\r\n    defaultIdempotencyKey() {\r\n        return `stainless-node-retry-${uuid4()}`;\r\n    }\r\n    get(path, opts) {\r\n        return this.methodRequest('get', path, opts);\r\n    }\r\n    post(path, opts) {\r\n        return this.methodRequest('post', path, opts);\r\n    }\r\n    patch(path, opts) {\r\n        return this.methodRequest('patch', path, opts);\r\n    }\r\n    put(path, opts) {\r\n        return this.methodRequest('put', path, opts);\r\n    }\r\n    delete(path, opts) {\r\n        return this.methodRequest('delete', path, opts);\r\n    }\r\n    methodRequest(method, path, opts) {\r\n        return this.request(Promise.resolve(opts).then(async (opts) => {\r\n            const body = opts && (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isBlobLike)(opts?.body) ? new DataView(await opts.body.arrayBuffer())\r\n                : opts?.body instanceof DataView ? opts.body\r\n                    : opts?.body instanceof ArrayBuffer ? new DataView(opts.body)\r\n                        : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer)\r\n                            : opts?.body;\r\n            return { method, path, ...opts, body };\r\n        }));\r\n    }\r\n    getAPIList(path, Page, opts) {\r\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\r\n    }\r\n    calculateContentLength(body) {\r\n        if (typeof body === 'string') {\r\n            if (typeof Buffer !== 'undefined') {\r\n                return Buffer.byteLength(body, 'utf8').toString();\r\n            }\r\n            if (typeof TextEncoder !== 'undefined') {\r\n                const encoder = new TextEncoder();\r\n                const encoded = encoder.encode(body);\r\n                return encoded.length.toString();\r\n            }\r\n        }\r\n        else if (ArrayBuffer.isView(body)) {\r\n            return body.byteLength.toString();\r\n        }\r\n        return null;\r\n    }\r\n    buildRequest(options) {\r\n        const { method, path, query, headers: headers = {} } = options;\r\n        const body = ArrayBuffer.isView(options.body) || (options.__binaryRequest && typeof options.body === 'string') ?\r\n            options.body\r\n            : (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) ? options.body.body\r\n                : options.body ? JSON.stringify(options.body, null, 2)\r\n                    : null;\r\n        const contentLength = this.calculateContentLength(body);\r\n        const url = this.buildURL(path, query);\r\n        if ('timeout' in options)\r\n            validatePositiveInteger('timeout', options.timeout);\r\n        const timeout = options.timeout ?? this.timeout;\r\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent)(url);\r\n        const minAgentTimeout = timeout + 1000;\r\n        if (typeof httpAgent?.options?.timeout === 'number' &&\r\n            minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\r\n            // Allow any given request to bump our agent active socket timeout.\r\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\r\n            // and without mutating agent we would need to create more of them.\r\n            // This tradeoff optimizes for performance.\r\n            httpAgent.options.timeout = minAgentTimeout;\r\n        }\r\n        if (this.idempotencyHeader && method !== 'get') {\r\n            if (!options.idempotencyKey)\r\n                options.idempotencyKey = this.defaultIdempotencyKey();\r\n            headers[this.idempotencyHeader] = options.idempotencyKey;\r\n        }\r\n        const reqHeaders = this.buildHeaders({ options, headers, contentLength });\r\n        const req = {\r\n            method,\r\n            ...(body && { body: body }),\r\n            headers: reqHeaders,\r\n            ...(httpAgent && { agent: httpAgent }),\r\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\r\n            // not compatible with standard web types\r\n            signal: options.signal ?? null,\r\n        };\r\n        return { req, url, timeout };\r\n    }\r\n    buildHeaders({ options, headers, contentLength, }) {\r\n        const reqHeaders = {};\r\n        if (contentLength) {\r\n            reqHeaders['content-length'] = contentLength;\r\n        }\r\n        const defaultHeaders = this.defaultHeaders(options);\r\n        applyHeadersMut(reqHeaders, defaultHeaders);\r\n        applyHeadersMut(reqHeaders, headers);\r\n        // let builtin fetch set the Content-Type for multipart bodies\r\n        if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) && _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.kind !== 'node') {\r\n            delete reqHeaders['content-type'];\r\n        }\r\n        this.validateHeaders(reqHeaders, headers);\r\n        return reqHeaders;\r\n    }\r\n    /**\r\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\r\n     */\r\n    async prepareOptions(options) { }\r\n    /**\r\n     * Used as a callback for mutating the given `RequestInit` object.\r\n     *\r\n     * This is useful for cases where you want to add certain headers based off of\r\n     * the request properties, e.g. `method` or `url`.\r\n     */\r\n    async prepareRequest(request, { url, options }) { }\r\n    parseHeaders(headers) {\r\n        return (!headers ? {}\r\n            : Symbol.iterator in headers ?\r\n                Object.fromEntries(Array.from(headers).map((header) => [...header]))\r\n                : { ...headers });\r\n    }\r\n    makeStatusError(status, error, message, headers) {\r\n        return _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError.generate(status, error, message, headers);\r\n    }\r\n    request(options, remainingRetries = null) {\r\n        return new APIPromise(this.makeRequest(options, remainingRetries));\r\n    }\r\n    async makeRequest(optionsInput, retriesRemaining) {\r\n        const options = await optionsInput;\r\n        if (retriesRemaining == null) {\r\n            retriesRemaining = options.maxRetries ?? this.maxRetries;\r\n        }\r\n        await this.prepareOptions(options);\r\n        const { req, url, timeout } = this.buildRequest(options);\r\n        await this.prepareRequest(req, { url, options });\r\n        debug('request', url, options, req.headers);\r\n        if (options.signal?.aborted) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\r\n        }\r\n        const controller = new AbortController();\r\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\r\n        if (response instanceof Error) {\r\n            if (options.signal?.aborted) {\r\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\r\n            }\r\n            if (retriesRemaining) {\r\n                return this.retryRequest(options, retriesRemaining);\r\n            }\r\n            if (response.name === 'AbortError') {\r\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError();\r\n            }\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError({ cause: response });\r\n        }\r\n        const responseHeaders = createResponseHeaders(response.headers);\r\n        if (!response.ok) {\r\n            if (retriesRemaining && this.shouldRetry(response)) {\r\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\r\n                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\r\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\r\n            }\r\n            const errText = await response.text().catch((e) => castToError(e).message);\r\n            const errJSON = safeJSON(errText);\r\n            const errMessage = errJSON ? undefined : errText;\r\n            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\r\n            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\r\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\r\n            throw err;\r\n        }\r\n        return { response, options, controller };\r\n    }\r\n    requestAPIList(Page, options) {\r\n        const request = this.makeRequest(options, null);\r\n        return new PagePromise(this, request, Page);\r\n    }\r\n    buildURL(path, query) {\r\n        const url = isAbsoluteURL(path) ?\r\n            new URL(path)\r\n            : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\r\n        const defaultQuery = this.defaultQuery();\r\n        if (!isEmptyObj(defaultQuery)) {\r\n            query = { ...defaultQuery, ...query };\r\n        }\r\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\r\n            url.search = this.stringifyQuery(query);\r\n        }\r\n        return url.toString();\r\n    }\r\n    stringifyQuery(query) {\r\n        return Object.entries(query)\r\n            .filter(([_, value]) => typeof value !== 'undefined')\r\n            .map(([key, value]) => {\r\n            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\r\n            }\r\n            if (value === null) {\r\n                return `${encodeURIComponent(key)}=`;\r\n            }\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\r\n        })\r\n            .join('&');\r\n    }\r\n    async fetchWithTimeout(url, init, ms, controller) {\r\n        const { signal, ...options } = init || {};\r\n        if (signal)\r\n            signal.addEventListener('abort', () => controller.abort());\r\n        const timeout = setTimeout(() => controller.abort(), ms);\r\n        return (this.getRequestClient()\r\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\r\n            .fetch.call(undefined, url, { signal: controller.signal, ...options })\r\n            .finally(() => {\r\n            clearTimeout(timeout);\r\n        }));\r\n    }\r\n    getRequestClient() {\r\n        return { fetch: this.fetch };\r\n    }\r\n    shouldRetry(response) {\r\n        // Note this is not a standard header.\r\n        const shouldRetryHeader = response.headers.get('x-should-retry');\r\n        // If the server explicitly says whether or not to retry, obey.\r\n        if (shouldRetryHeader === 'true')\r\n            return true;\r\n        if (shouldRetryHeader === 'false')\r\n            return false;\r\n        // Retry on request timeouts.\r\n        if (response.status === 408)\r\n            return true;\r\n        // Retry on lock timeouts.\r\n        if (response.status === 409)\r\n            return true;\r\n        // Retry on rate limits.\r\n        if (response.status === 429)\r\n            return true;\r\n        // Retry internal errors.\r\n        if (response.status >= 500)\r\n            return true;\r\n        return false;\r\n    }\r\n    async retryRequest(options, retriesRemaining, responseHeaders) {\r\n        let timeoutMillis;\r\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\r\n        const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\r\n        if (retryAfterMillisHeader) {\r\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\r\n            if (!Number.isNaN(timeoutMs)) {\r\n                timeoutMillis = timeoutMs;\r\n            }\r\n        }\r\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\r\n        const retryAfterHeader = responseHeaders?.['retry-after'];\r\n        if (retryAfterHeader && !timeoutMillis) {\r\n            const timeoutSeconds = parseFloat(retryAfterHeader);\r\n            if (!Number.isNaN(timeoutSeconds)) {\r\n                timeoutMillis = timeoutSeconds * 1000;\r\n            }\r\n            else {\r\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\r\n            }\r\n        }\r\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\r\n        // just do what it says, but otherwise calculate a default\r\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\r\n            const maxRetries = options.maxRetries ?? this.maxRetries;\r\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\r\n        }\r\n        await sleep(timeoutMillis);\r\n        return this.makeRequest(options, retriesRemaining - 1);\r\n    }\r\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\r\n        const initialRetryDelay = 0.5;\r\n        const maxRetryDelay = 8.0;\r\n        const numRetries = maxRetries - retriesRemaining;\r\n        // Apply exponential backoff, but not more than the max.\r\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\r\n        // Apply some jitter, take up to at most 25 percent of the retry time.\r\n        const jitter = 1 - Math.random() * 0.25;\r\n        return sleepSeconds * jitter * 1000;\r\n    }\r\n    getUserAgent() {\r\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION}`;\r\n    }\r\n}\r\nclass AbstractPage {\r\n    constructor(client, response, body, options) {\r\n        _AbstractPage_client.set(this, void 0);\r\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\r\n        this.options = options;\r\n        this.response = response;\r\n        this.body = body;\r\n    }\r\n    hasNextPage() {\r\n        const items = this.getPaginatedItems();\r\n        if (!items.length)\r\n            return false;\r\n        return this.nextPageInfo() != null;\r\n    }\r\n    async getNextPage() {\r\n        const nextInfo = this.nextPageInfo();\r\n        if (!nextInfo) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\r\n        }\r\n        const nextOptions = { ...this.options };\r\n        if ('params' in nextInfo && typeof nextOptions.query === 'object') {\r\n            nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\r\n        }\r\n        else if ('url' in nextInfo) {\r\n            const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\r\n            for (const [key, value] of params) {\r\n                nextInfo.url.searchParams.set(key, value);\r\n            }\r\n            nextOptions.query = undefined;\r\n            nextOptions.path = nextInfo.url.toString();\r\n        }\r\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\r\n    }\r\n    async *iterPages() {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        let page = this;\r\n        yield page;\r\n        while (page.hasNextPage()) {\r\n            page = await page.getNextPage();\r\n            yield page;\r\n        }\r\n    }\r\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\r\n        for await (const page of this.iterPages()) {\r\n            for (const item of page.getPaginatedItems()) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\r\n *\r\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\r\n *\r\n *    for await (const item of client.items.list()) {\r\n *      console.log(item)\r\n *    }\r\n */\r\nclass PagePromise extends APIPromise {\r\n    constructor(client, request, Page) {\r\n        super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));\r\n    }\r\n    /**\r\n     * Allow auto-paginating iteration on an unawaited list call, eg:\r\n     *\r\n     *    for await (const item of client.items.list()) {\r\n     *      console.log(item)\r\n     *    }\r\n     */\r\n    async *[Symbol.asyncIterator]() {\r\n        const page = await this;\r\n        for await (const item of page) {\r\n            yield item;\r\n        }\r\n    }\r\n}\r\nconst createResponseHeaders = (headers) => {\r\n    return new Proxy(Object.fromEntries(\r\n    // @ts-ignore\r\n    headers.entries()), {\r\n        get(target, name) {\r\n            const key = name.toString();\r\n            return target[key.toLowerCase()] || target[key];\r\n        },\r\n    });\r\n};\r\n// This is required so that we can determine if a given object matches the RequestOptions\r\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\r\n// compiler such that any missing / extraneous keys will cause an error.\r\nconst requestOptionsKeys = {\r\n    method: true,\r\n    path: true,\r\n    query: true,\r\n    body: true,\r\n    headers: true,\r\n    maxRetries: true,\r\n    stream: true,\r\n    timeout: true,\r\n    httpAgent: true,\r\n    signal: true,\r\n    idempotencyKey: true,\r\n    __binaryRequest: true,\r\n    __binaryResponse: true,\r\n    __streamClass: true,\r\n};\r\nconst isRequestOptions = (obj) => {\r\n    return (typeof obj === 'object' &&\r\n        obj !== null &&\r\n        !isEmptyObj(obj) &&\r\n        Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k)));\r\n};\r\nconst getPlatformProperties = () => {\r\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\r\n        return {\r\n            'X-Stainless-Lang': 'js',\r\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\r\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\r\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\r\n            'X-Stainless-Runtime': 'deno',\r\n            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\r\n        };\r\n    }\r\n    if (typeof EdgeRuntime !== 'undefined') {\r\n        return {\r\n            'X-Stainless-Lang': 'js',\r\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\r\n            'X-Stainless-OS': 'Unknown',\r\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\r\n            'X-Stainless-Runtime': 'edge',\r\n            'X-Stainless-Runtime-Version': process.version,\r\n        };\r\n    }\r\n    // Check if Node.js\r\n    if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\r\n        return {\r\n            'X-Stainless-Lang': 'js',\r\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\r\n            'X-Stainless-OS': normalizePlatform(process.platform),\r\n            'X-Stainless-Arch': normalizeArch(process.arch),\r\n            'X-Stainless-Runtime': 'node',\r\n            'X-Stainless-Runtime-Version': process.version,\r\n        };\r\n    }\r\n    const browserInfo = getBrowserInfo();\r\n    if (browserInfo) {\r\n        return {\r\n            'X-Stainless-Lang': 'js',\r\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\r\n            'X-Stainless-OS': 'Unknown',\r\n            'X-Stainless-Arch': 'unknown',\r\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\r\n            'X-Stainless-Runtime-Version': browserInfo.version,\r\n        };\r\n    }\r\n    // TODO add support for Cloudflare workers, etc.\r\n    return {\r\n        'X-Stainless-Lang': 'js',\r\n        'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\r\n        'X-Stainless-OS': 'Unknown',\r\n        'X-Stainless-Arch': 'unknown',\r\n        'X-Stainless-Runtime': 'unknown',\r\n        'X-Stainless-Runtime-Version': 'unknown',\r\n    };\r\n};\r\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\r\nfunction getBrowserInfo() {\r\n    if (typeof navigator === 'undefined' || !navigator) {\r\n        return null;\r\n    }\r\n    // NOTE: The order matters here!\r\n    const browserPatterns = [\r\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\r\n    ];\r\n    // Find the FIRST matching browser\r\n    for (const { key, pattern } of browserPatterns) {\r\n        const match = pattern.exec(navigator.userAgent);\r\n        if (match) {\r\n            const major = match[1] || 0;\r\n            const minor = match[2] || 0;\r\n            const patch = match[3] || 0;\r\n            return { browser: key, version: `${major}.${minor}.${patch}` };\r\n        }\r\n    }\r\n    return null;\r\n}\r\nconst normalizeArch = (arch) => {\r\n    // Node docs:\r\n    // - https://nodejs.org/api/process.html#processarch\r\n    // Deno docs:\r\n    // - https://doc.deno.land/deno/stable/~/Deno.build\r\n    if (arch === 'x32')\r\n        return 'x32';\r\n    if (arch === 'x86_64' || arch === 'x64')\r\n        return 'x64';\r\n    if (arch === 'arm')\r\n        return 'arm';\r\n    if (arch === 'aarch64' || arch === 'arm64')\r\n        return 'arm64';\r\n    if (arch)\r\n        return `other:${arch}`;\r\n    return 'unknown';\r\n};\r\nconst normalizePlatform = (platform) => {\r\n    // Node platforms:\r\n    // - https://nodejs.org/api/process.html#processplatform\r\n    // Deno platforms:\r\n    // - https://doc.deno.land/deno/stable/~/Deno.build\r\n    // - https://github.com/denoland/deno/issues/14799\r\n    platform = platform.toLowerCase();\r\n    // NOTE: this iOS check is untested and may not work\r\n    // Node does not work natively on IOS, there is a fork at\r\n    // https://github.com/nodejs-mobile/nodejs-mobile\r\n    // however it is unknown at the time of writing how to detect if it is running\r\n    if (platform.includes('ios'))\r\n        return 'iOS';\r\n    if (platform === 'android')\r\n        return 'Android';\r\n    if (platform === 'darwin')\r\n        return 'MacOS';\r\n    if (platform === 'win32')\r\n        return 'Windows';\r\n    if (platform === 'freebsd')\r\n        return 'FreeBSD';\r\n    if (platform === 'openbsd')\r\n        return 'OpenBSD';\r\n    if (platform === 'linux')\r\n        return 'Linux';\r\n    if (platform)\r\n        return `Other:${platform}`;\r\n    return 'Unknown';\r\n};\r\nlet _platformHeaders;\r\nconst getPlatformHeaders = () => {\r\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\r\n};\r\nconst safeJSON = (text) => {\r\n    try {\r\n        return JSON.parse(text);\r\n    }\r\n    catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n// https://stackoverflow.com/a/19709846\r\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\r\nconst isAbsoluteURL = (url) => {\r\n    return startsWithSchemeRegexp.test(url);\r\n};\r\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\nconst validatePositiveInteger = (name, n) => {\r\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\r\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be an integer`);\r\n    }\r\n    if (n < 0) {\r\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be a positive integer`);\r\n    }\r\n    return n;\r\n};\r\nconst castToError = (err) => {\r\n    if (err instanceof Error)\r\n        return err;\r\n    return new Error(err);\r\n};\r\nconst ensurePresent = (value) => {\r\n    if (value == null)\r\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Expected a value to be given but received ${value} instead.`);\r\n    return value;\r\n};\r\n/**\r\n * Read an environment variable.\r\n *\r\n * Trims beginning and trailing whitespace.\r\n *\r\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\r\n */\r\nconst readEnv = (env) => {\r\n    if (typeof process !== 'undefined') {\r\n        return process.env?.[env]?.trim() ?? undefined;\r\n    }\r\n    if (typeof Deno !== 'undefined') {\r\n        return Deno.env?.get?.(env)?.trim();\r\n    }\r\n    return undefined;\r\n};\r\nconst coerceInteger = (value) => {\r\n    if (typeof value === 'number')\r\n        return Math.round(value);\r\n    if (typeof value === 'string')\r\n        return parseInt(value, 10);\r\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\r\n};\r\nconst coerceFloat = (value) => {\r\n    if (typeof value === 'number')\r\n        return value;\r\n    if (typeof value === 'string')\r\n        return parseFloat(value);\r\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\r\n};\r\nconst coerceBoolean = (value) => {\r\n    if (typeof value === 'boolean')\r\n        return value;\r\n    if (typeof value === 'string')\r\n        return value === 'true';\r\n    return Boolean(value);\r\n};\r\nconst maybeCoerceInteger = (value) => {\r\n    if (value === undefined) {\r\n        return undefined;\r\n    }\r\n    return coerceInteger(value);\r\n};\r\nconst maybeCoerceFloat = (value) => {\r\n    if (value === undefined) {\r\n        return undefined;\r\n    }\r\n    return coerceFloat(value);\r\n};\r\nconst maybeCoerceBoolean = (value) => {\r\n    if (value === undefined) {\r\n        return undefined;\r\n    }\r\n    return coerceBoolean(value);\r\n};\r\n// https://stackoverflow.com/a/34491287\r\nfunction isEmptyObj(obj) {\r\n    if (!obj)\r\n        return true;\r\n    for (const _k in obj)\r\n        return false;\r\n    return true;\r\n}\r\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\r\nfunction hasOwn(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\n/**\r\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\r\n * using lower-case for all properties,\r\n * ignoring any keys with undefined values,\r\n * and deleting any keys with null values.\r\n */\r\nfunction applyHeadersMut(targetHeaders, newHeaders) {\r\n    for (const k in newHeaders) {\r\n        if (!hasOwn(newHeaders, k))\r\n            continue;\r\n        const lowerKey = k.toLowerCase();\r\n        if (!lowerKey)\r\n            continue;\r\n        const val = newHeaders[k];\r\n        if (val === null) {\r\n            delete targetHeaders[lowerKey];\r\n        }\r\n        else if (val !== undefined) {\r\n            targetHeaders[lowerKey] = val;\r\n        }\r\n    }\r\n}\r\nfunction debug(action, ...args) {\r\n    if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\r\n        console.log(`OpenAI:DEBUG:${action}`, ...args);\r\n    }\r\n}\r\n/**\r\n * https://stackoverflow.com/a/2117523\r\n */\r\nconst uuid4 = () => {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16) | 0;\r\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\r\nconst isRunningInBrowser = () => {\r\n    return (\r\n    // @ts-ignore\r\n    typeof window !== 'undefined' &&\r\n        // @ts-ignore\r\n        typeof window.document !== 'undefined' &&\r\n        // @ts-ignore\r\n        typeof navigator !== 'undefined');\r\n};\r\nconst isHeadersProtocol = (headers) => {\r\n    return typeof headers?.get === 'function';\r\n};\r\nconst getRequiredHeader = (headers, header) => {\r\n    const lowerCasedHeader = header.toLowerCase();\r\n    if (isHeadersProtocol(headers)) {\r\n        // to deal with the case where the header looks like Stainless-Event-Id\r\n        const intercapsHeader = header[0]?.toUpperCase() +\r\n            header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\r\n        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\r\n            const value = headers.get(key);\r\n            if (value) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n    for (const [key, value] of Object.entries(headers)) {\r\n        if (key.toLowerCase() === lowerCasedHeader) {\r\n            if (Array.isArray(value)) {\r\n                if (value.length <= 1)\r\n                    return value[0];\r\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\r\n                return value[0];\r\n            }\r\n            return value;\r\n        }\r\n    }\r\n    throw new Error(`Could not find ${header} header`);\r\n};\r\n/**\r\n * Encodes a string to Base64 format.\r\n */\r\nconst toBase64 = (str) => {\r\n    if (!str)\r\n        return '';\r\n    if (typeof Buffer !== 'undefined') {\r\n        return Buffer.from(str).toString('base64');\r\n    }\r\n    if (typeof btoa !== 'undefined') {\r\n        return btoa(str);\r\n    }\r\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\r\n};\r\nfunction isObj(obj) {\r\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\r\n}\r\n//# sourceMappingURL=core.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/error.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/error.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   ContentFilterFinishReasonError: () => (/* binding */ ContentFilterFinishReasonError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   LengthFinishReasonError: () => (/* binding */ LengthFinishReasonError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nclass OpenAIError extends Error {\r\n}\r\nclass APIError extends OpenAIError {\r\n    constructor(status, error, message, headers) {\r\n        super(`${APIError.makeMessage(status, error, message)}`);\r\n        this.status = status;\r\n        this.headers = headers;\r\n        this.request_id = headers?.['x-request-id'];\r\n        const data = error;\r\n        this.error = data;\r\n        this.code = data?.['code'];\r\n        this.param = data?.['param'];\r\n        this.type = data?.['type'];\r\n    }\r\n    static makeMessage(status, error, message) {\r\n        const msg = error?.message ?\r\n            typeof error.message === 'string' ?\r\n                error.message\r\n                : JSON.stringify(error.message)\r\n            : error ? JSON.stringify(error)\r\n                : message;\r\n        if (status && msg) {\r\n            return `${status} ${msg}`;\r\n        }\r\n        if (status) {\r\n            return `${status} status code (no body)`;\r\n        }\r\n        if (msg) {\r\n            return msg;\r\n        }\r\n        return '(no status code or body)';\r\n    }\r\n    static generate(status, errorResponse, message, headers) {\r\n        if (!status) {\r\n            return new APIConnectionError({ cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse) });\r\n        }\r\n        const error = errorResponse?.['error'];\r\n        if (status === 400) {\r\n            return new BadRequestError(status, error, message, headers);\r\n        }\r\n        if (status === 401) {\r\n            return new AuthenticationError(status, error, message, headers);\r\n        }\r\n        if (status === 403) {\r\n            return new PermissionDeniedError(status, error, message, headers);\r\n        }\r\n        if (status === 404) {\r\n            return new NotFoundError(status, error, message, headers);\r\n        }\r\n        if (status === 409) {\r\n            return new ConflictError(status, error, message, headers);\r\n        }\r\n        if (status === 422) {\r\n            return new UnprocessableEntityError(status, error, message, headers);\r\n        }\r\n        if (status === 429) {\r\n            return new RateLimitError(status, error, message, headers);\r\n        }\r\n        if (status >= 500) {\r\n            return new InternalServerError(status, error, message, headers);\r\n        }\r\n        return new APIError(status, error, message, headers);\r\n    }\r\n}\r\nclass APIUserAbortError extends APIError {\r\n    constructor({ message } = {}) {\r\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\r\n        this.status = undefined;\r\n    }\r\n}\r\nclass APIConnectionError extends APIError {\r\n    constructor({ message, cause }) {\r\n        super(undefined, undefined, message || 'Connection error.', undefined);\r\n        this.status = undefined;\r\n        // in some environments the 'cause' property is already declared\r\n        // @ts-ignore\r\n        if (cause)\r\n            this.cause = cause;\r\n    }\r\n}\r\nclass APIConnectionTimeoutError extends APIConnectionError {\r\n    constructor({ message } = {}) {\r\n        super({ message: message ?? 'Request timed out.' });\r\n    }\r\n}\r\nclass BadRequestError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 400;\r\n    }\r\n}\r\nclass AuthenticationError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 401;\r\n    }\r\n}\r\nclass PermissionDeniedError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 403;\r\n    }\r\n}\r\nclass NotFoundError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 404;\r\n    }\r\n}\r\nclass ConflictError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 409;\r\n    }\r\n}\r\nclass UnprocessableEntityError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 422;\r\n    }\r\n}\r\nclass RateLimitError extends APIError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.status = 429;\r\n    }\r\n}\r\nclass InternalServerError extends APIError {\r\n}\r\nclass LengthFinishReasonError extends OpenAIError {\r\n    constructor() {\r\n        super(`Could not parse response content as the length limit was reached`);\r\n    }\r\n}\r\nclass ContentFilterFinishReasonError extends OpenAIError {\r\n    constructor() {\r\n        super(`Could not parse response content as the request was rejected by the content filter`);\r\n    }\r\n}\r\n//# sourceMappingURL=error.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/index.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/moderations.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/beta/beta.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/batches.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\nvar _a;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * API Client for interfacing with the OpenAI API.\r\n */\r\nclass OpenAI extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\r\n    /**\r\n     * API Client for interfacing with the OpenAI API.\r\n     *\r\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\r\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\r\n     * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\r\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\r\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\r\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\r\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\r\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\r\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\r\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\r\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\r\n     */\r\n    constructor({ baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_BASE_URL'), apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_API_KEY'), organization = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_ORG_ID') ?? null, project = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_PROJECT_ID') ?? null, ...opts } = {}) {\r\n        if (apiKey === undefined) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\r\n        }\r\n        const options = {\r\n            apiKey,\r\n            organization,\r\n            project,\r\n            ...opts,\r\n            baseURL: baseURL || `https://api.openai.com/v1`,\r\n        };\r\n        if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\r\n        }\r\n        super({\r\n            baseURL: options.baseURL,\r\n            timeout: options.timeout ?? 600000 /* 10 minutes */,\r\n            httpAgent: options.httpAgent,\r\n            maxRetries: options.maxRetries,\r\n            fetch: options.fetch,\r\n        });\r\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions(this);\r\n        this.chat = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat(this);\r\n        this.embeddings = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Embeddings(this);\r\n        this.files = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Files(this);\r\n        this.images = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Images(this);\r\n        this.audio = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Audio(this);\r\n        this.moderations = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Moderations(this);\r\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Models(this);\r\n        this.fineTuning = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.FineTuning(this);\r\n        this.beta = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.Beta(this);\r\n        this.batches = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Batches(this);\r\n        this.uploads = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Uploads(this);\r\n        this._options = options;\r\n        this.apiKey = apiKey;\r\n        this.organization = organization;\r\n        this.project = project;\r\n    }\r\n    defaultQuery() {\r\n        return this._options.defaultQuery;\r\n    }\r\n    defaultHeaders(opts) {\r\n        return {\r\n            ...super.defaultHeaders(opts),\r\n            'OpenAI-Organization': this.organization,\r\n            'OpenAI-Project': this.project,\r\n            ...this._options.defaultHeaders,\r\n        };\r\n    }\r\n    authHeaders(opts) {\r\n        return { Authorization: `Bearer ${this.apiKey}` };\r\n    }\r\n}\r\n_a = OpenAI;\r\nOpenAI.OpenAI = _a;\r\nOpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes\r\nOpenAI.OpenAIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError;\r\nOpenAI.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError;\r\nOpenAI.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError;\r\nOpenAI.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError;\r\nOpenAI.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError;\r\nOpenAI.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError;\r\nOpenAI.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError;\r\nOpenAI.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError;\r\nOpenAI.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError;\r\nOpenAI.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError;\r\nOpenAI.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError;\r\nOpenAI.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError;\r\nOpenAI.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError;\r\nOpenAI.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_14__.toFile;\r\nOpenAI.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_15__.fileFromPath;\r\nconst { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } = _error_mjs__WEBPACK_IMPORTED_MODULE_1__;\r\nvar toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_14__.toFile;\r\nvar fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_15__.fileFromPath;\r\n(function (OpenAI) {\r\n    OpenAI.Page = _pagination_mjs__WEBPACK_IMPORTED_MODULE_16__.Page;\r\n    OpenAI.CursorPage = _pagination_mjs__WEBPACK_IMPORTED_MODULE_16__.CursorPage;\r\n    OpenAI.Completions = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions;\r\n    OpenAI.Chat = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat;\r\n    OpenAI.Embeddings = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Embeddings;\r\n    OpenAI.Files = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Files;\r\n    OpenAI.FileObjectsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.FileObjectsPage;\r\n    OpenAI.Images = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Images;\r\n    OpenAI.Audio = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Audio;\r\n    OpenAI.Moderations = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Moderations;\r\n    OpenAI.Models = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Models;\r\n    OpenAI.ModelsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.ModelsPage;\r\n    OpenAI.FineTuning = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.FineTuning;\r\n    OpenAI.Beta = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.Beta;\r\n    OpenAI.Batches = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Batches;\r\n    OpenAI.BatchesPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.BatchesPage;\r\n    OpenAI.Uploads = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Uploads;\r\n})(OpenAI || (OpenAI = {}));\r\n/** API Client for interfacing with the Azure OpenAI API. */\r\nclass AzureOpenAI extends OpenAI {\r\n    /**\r\n     * API Client for interfacing with the Azure OpenAI API.\r\n     *\r\n     * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\r\n     * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\r\n     * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\r\n     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\r\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\r\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API.\r\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\r\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\r\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\r\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\r\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\r\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\r\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\r\n     */\r\n    constructor({ baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_BASE_URL'), apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('AZURE_OPENAI_API_KEY'), apiVersion = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_API_VERSION'), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}) {\r\n        if (!apiVersion) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\r\n        }\r\n        if (typeof azureADTokenProvider === 'function') {\r\n            dangerouslyAllowBrowser = true;\r\n        }\r\n        if (!azureADTokenProvider && !apiKey) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.');\r\n        }\r\n        if (azureADTokenProvider && apiKey) {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.');\r\n        }\r\n        // define a sentinel value to avoid any typing issues\r\n        apiKey ?? (apiKey = API_KEY_SENTINEL);\r\n        opts.defaultQuery = { ...opts.defaultQuery, 'api-version': apiVersion };\r\n        if (!baseURL) {\r\n            if (!endpoint) {\r\n                endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\r\n            }\r\n            if (!endpoint) {\r\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable');\r\n            }\r\n            baseURL = `${endpoint}/openai`;\r\n        }\r\n        else {\r\n            if (endpoint) {\r\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('baseURL and endpoint are mutually exclusive');\r\n            }\r\n        }\r\n        super({\r\n            apiKey,\r\n            baseURL,\r\n            ...opts,\r\n            ...(dangerouslyAllowBrowser !== undefined ? { dangerouslyAllowBrowser } : {}),\r\n        });\r\n        this.apiVersion = '';\r\n        this._azureADTokenProvider = azureADTokenProvider;\r\n        this.apiVersion = apiVersion;\r\n        this._deployment = deployment;\r\n    }\r\n    buildRequest(options) {\r\n        if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\r\n            if (!_core_mjs__WEBPACK_IMPORTED_MODULE_0__.isObj(options.body)) {\r\n                throw new Error('Expected request body to be an object');\r\n            }\r\n            const model = this._deployment || options.body['model'];\r\n            if (model !== undefined && !this.baseURL.includes('/deployments')) {\r\n                options.path = `/deployments/${model}${options.path}`;\r\n            }\r\n        }\r\n        return super.buildRequest(options);\r\n    }\r\n    async _getAzureADToken() {\r\n        if (typeof this._azureADTokenProvider === 'function') {\r\n            const token = await this._azureADTokenProvider();\r\n            if (!token || typeof token !== 'string') {\r\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);\r\n            }\r\n            return token;\r\n        }\r\n        return undefined;\r\n    }\r\n    authHeaders(opts) {\r\n        return {};\r\n    }\r\n    async prepareOptions(opts) {\r\n        /**\r\n         * The user should provide a bearer token provider if they want\r\n         * to use Azure AD authentication. The user shouldn't set the\r\n         * Authorization header manually because the header is overwritten\r\n         * with the Azure AD token if a bearer token provider is provided.\r\n         */\r\n        if (opts.headers?.['api-key']) {\r\n            return super.prepareOptions(opts);\r\n        }\r\n        const token = await this._getAzureADToken();\r\n        opts.headers ?? (opts.headers = {});\r\n        if (token) {\r\n            opts.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        else if (this.apiKey !== API_KEY_SENTINEL) {\r\n            opts.headers['api-key'] = this.apiKey;\r\n        }\r\n        else {\r\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('Unable to handle auth');\r\n        }\r\n        return super.prepareOptions(opts);\r\n    }\r\n}\r\nconst _deployments_endpoints = new Set([\r\n    '/completions',\r\n    '/chat/completions',\r\n    '/embeddings',\r\n    '/audio/transcriptions',\r\n    '/audio/translations',\r\n    '/audio/speech',\r\n    '/images/generations',\r\n]);\r\nconst API_KEY_SENTINEL = '<Missing Key>';\r\n// ---------------------- End Azure ----------------------\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenAI);\r\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractChatCompletionRunner: () => (/* binding */ AbstractChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/error */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RunnableFunction.mjs */ \"(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/lib/parser */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\r\n\r\n\r\n\r\n\r\n\r\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\r\nclass AbstractChatCompletionRunner extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\r\n    constructor() {\r\n        super(...arguments);\r\n        _AbstractChatCompletionRunner_instances.add(this);\r\n        this._chatCompletions = [];\r\n        this.messages = [];\r\n    }\r\n    _addChatCompletion(chatCompletion) {\r\n        this._chatCompletions.push(chatCompletion);\r\n        this._emit('chatCompletion', chatCompletion);\r\n        const message = chatCompletion.choices[0]?.message;\r\n        if (message)\r\n            this._addMessage(message);\r\n        return chatCompletion;\r\n    }\r\n    _addMessage(message, emit = true) {\r\n        if (!('content' in message))\r\n            message.content = null;\r\n        this.messages.push(message);\r\n        if (emit) {\r\n            this._emit('message', message);\r\n            if (((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) || (0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message)) && message.content) {\r\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\r\n                this._emit('functionCallResult', message.content);\r\n            }\r\n            else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.function_call) {\r\n                this._emit('functionCall', message.function_call);\r\n            }\r\n            else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.tool_calls) {\r\n                for (const tool_call of message.tool_calls) {\r\n                    if (tool_call.type === 'function') {\r\n                        this._emit('functionCall', tool_call.function);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\r\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\r\n     */\r\n    async finalChatCompletion() {\r\n        await this.done();\r\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\r\n        if (!completion)\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('stream ended without producing a ChatCompletion');\r\n        return completion;\r\n    }\r\n    /**\r\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\r\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\r\n     */\r\n    async finalContent() {\r\n        await this.done();\r\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\r\n    }\r\n    /**\r\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\r\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\r\n     */\r\n    async finalMessage() {\r\n        await this.done();\r\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\r\n    }\r\n    /**\r\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\r\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\r\n     */\r\n    async finalFunctionCall() {\r\n        await this.done();\r\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\r\n    }\r\n    async finalFunctionCallResult() {\r\n        await this.done();\r\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\r\n    }\r\n    async totalUsage() {\r\n        await this.done();\r\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\r\n    }\r\n    allChatCompletions() {\r\n        return [...this._chatCompletions];\r\n    }\r\n    _emitFinal() {\r\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\r\n        if (completion)\r\n            this._emit('finalChatCompletion', completion);\r\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\r\n        if (finalMessage)\r\n            this._emit('finalMessage', finalMessage);\r\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\r\n        if (finalContent)\r\n            this._emit('finalContent', finalContent);\r\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\r\n        if (finalFunctionCall)\r\n            this._emit('finalFunctionCall', finalFunctionCall);\r\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\r\n        if (finalFunctionCallResult != null)\r\n            this._emit('finalFunctionCallResult', finalFunctionCallResult);\r\n        if (this._chatCompletions.some((c) => c.usage)) {\r\n            this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\r\n        }\r\n    }\r\n    async _createChatCompletion(client, params, options) {\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\r\n        const chatCompletion = await client.chat.completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });\r\n        this._connected();\r\n        return this._addChatCompletion((0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.parseChatCompletion)(chatCompletion, params));\r\n    }\r\n    async _runChatCompletion(client, params, options) {\r\n        for (const message of params.messages) {\r\n            this._addMessage(message, false);\r\n        }\r\n        return await this._createChatCompletion(client, params, options);\r\n    }\r\n    async _runFunctions(client, params, options) {\r\n        const role = 'function';\r\n        const { function_call = 'auto', stream, ...restParams } = params;\r\n        const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\r\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\r\n        const functionsByName = {};\r\n        for (const f of params.functions) {\r\n            functionsByName[f.name || f.function.name] = f;\r\n        }\r\n        const functions = params.functions.map((f) => ({\r\n            name: f.name || f.function.name,\r\n            parameters: f.parameters,\r\n            description: f.description,\r\n        }));\r\n        for (const message of params.messages) {\r\n            this._addMessage(message, false);\r\n        }\r\n        for (let i = 0; i < maxChatCompletions; ++i) {\r\n            const chatCompletion = await this._createChatCompletion(client, {\r\n                ...restParams,\r\n                function_call,\r\n                functions,\r\n                messages: [...this.messages],\r\n            }, options);\r\n            const message = chatCompletion.choices[0]?.message;\r\n            if (!message) {\r\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`missing message in ChatCompletion response`);\r\n            }\r\n            if (!message.function_call)\r\n                return;\r\n            const { name, arguments: args } = message.function_call;\r\n            const fn = functionsByName[name];\r\n            if (!fn) {\r\n                const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\r\n                    .map((f) => JSON.stringify(f.name))\r\n                    .join(', ')}. Please try again`;\r\n                this._addMessage({ role, name, content });\r\n                continue;\r\n            }\r\n            else if (singleFunctionToCall && singleFunctionToCall !== name) {\r\n                const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\r\n                this._addMessage({ role, name, content });\r\n                continue;\r\n            }\r\n            let parsed;\r\n            try {\r\n                parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\r\n            }\r\n            catch (error) {\r\n                this._addMessage({\r\n                    role,\r\n                    name,\r\n                    content: error instanceof Error ? error.message : String(error),\r\n                });\r\n                continue;\r\n            }\r\n            // @ts-expect-error it can't rule out `never` type.\r\n            const rawContent = await fn.function(parsed, this);\r\n            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\r\n            this._addMessage({ role, name, content });\r\n            if (singleFunctionToCall)\r\n                return;\r\n        }\r\n    }\r\n    async _runTools(client, params, options) {\r\n        const role = 'tool';\r\n        const { tool_choice = 'auto', stream, ...restParams } = params;\r\n        const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\r\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\r\n        // TODO(someday): clean this logic up\r\n        const inputTools = params.tools.map((tool) => {\r\n            if ((0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableTool)(tool)) {\r\n                if (!tool.$callback) {\r\n                    throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('Tool given to `.runTools()` that does not have an associated function');\r\n                }\r\n                return {\r\n                    type: 'function',\r\n                    function: {\r\n                        function: tool.$callback,\r\n                        name: tool.function.name,\r\n                        description: tool.function.description || '',\r\n                        parameters: tool.function.parameters,\r\n                        parse: tool.$parseRaw,\r\n                        strict: true,\r\n                    },\r\n                };\r\n            }\r\n            return tool;\r\n        });\r\n        const functionsByName = {};\r\n        for (const f of inputTools) {\r\n            if (f.type === 'function') {\r\n                functionsByName[f.function.name || f.function.function.name] = f.function;\r\n            }\r\n        }\r\n        const tools = 'tools' in params ?\r\n            inputTools.map((t) => t.type === 'function' ?\r\n                {\r\n                    type: 'function',\r\n                    function: {\r\n                        name: t.function.name || t.function.function.name,\r\n                        parameters: t.function.parameters,\r\n                        description: t.function.description,\r\n                        strict: t.function.strict,\r\n                    },\r\n                }\r\n                : t)\r\n            : undefined;\r\n        for (const message of params.messages) {\r\n            this._addMessage(message, false);\r\n        }\r\n        for (let i = 0; i < maxChatCompletions; ++i) {\r\n            const chatCompletion = await this._createChatCompletion(client, {\r\n                ...restParams,\r\n                tool_choice,\r\n                tools,\r\n                messages: [...this.messages],\r\n            }, options);\r\n            const message = chatCompletion.choices[0]?.message;\r\n            if (!message) {\r\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`missing message in ChatCompletion response`);\r\n            }\r\n            if (!message.tool_calls?.length) {\r\n                return;\r\n            }\r\n            for (const tool_call of message.tool_calls) {\r\n                if (tool_call.type !== 'function')\r\n                    continue;\r\n                const tool_call_id = tool_call.id;\r\n                const { name, arguments: args } = tool_call.function;\r\n                const fn = functionsByName[name];\r\n                if (!fn) {\r\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName)\r\n                        .map((name) => JSON.stringify(name))\r\n                        .join(', ')}. Please try again`;\r\n                    this._addMessage({ role, tool_call_id, content });\r\n                    continue;\r\n                }\r\n                else if (singleFunctionToCall && singleFunctionToCall !== name) {\r\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\r\n                    this._addMessage({ role, tool_call_id, content });\r\n                    continue;\r\n                }\r\n                let parsed;\r\n                try {\r\n                    parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\r\n                }\r\n                catch (error) {\r\n                    const content = error instanceof Error ? error.message : String(error);\r\n                    this._addMessage({ role, tool_call_id, content });\r\n                    continue;\r\n                }\r\n                // @ts-expect-error it can't rule out `never` type.\r\n                const rawContent = await fn.function(parsed, this);\r\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\r\n                this._addMessage({ role, tool_call_id, content });\r\n                if (singleFunctionToCall) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n}\r\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\r\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\r\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\r\n    let i = this.messages.length;\r\n    while (i-- > 0) {\r\n        const message = this.messages[i];\r\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message)) {\r\n            const { function_call, ...rest } = message;\r\n            const ret = {\r\n                ...rest,\r\n                content: message.content ?? null,\r\n                refusal: message.refusal ?? null,\r\n            };\r\n            if (function_call) {\r\n                ret.function_call = function_call;\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n    throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\r\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\r\n    for (let i = this.messages.length - 1; i >= 0; i--) {\r\n        const message = this.messages[i];\r\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.function_call) {\r\n            return message.function_call;\r\n        }\r\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.tool_calls?.length) {\r\n            return message.tool_calls.at(-1)?.function;\r\n        }\r\n    }\r\n    return;\r\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\r\n    for (let i = this.messages.length - 1; i >= 0; i--) {\r\n        const message = this.messages[i];\r\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) && message.content != null) {\r\n            return message.content;\r\n        }\r\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message) &&\r\n            message.content != null &&\r\n            typeof message.content === 'string' &&\r\n            this.messages.some((x) => x.role === 'assistant' &&\r\n                x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id))) {\r\n            return message.content;\r\n        }\r\n    }\r\n    return;\r\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\r\n    const total = {\r\n        completion_tokens: 0,\r\n        prompt_tokens: 0,\r\n        total_tokens: 0,\r\n    };\r\n    for (const { usage } of this._chatCompletions) {\r\n        if (usage) {\r\n            total.completion_tokens += usage.completion_tokens;\r\n            total.prompt_tokens += usage.prompt_tokens;\r\n            total.total_tokens += usage.total_tokens;\r\n        }\r\n    }\r\n    return total;\r\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\r\n    if (params.n != null && params.n > 1) {\r\n        throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\r\n    }\r\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\r\n    return (typeof rawContent === 'string' ? rawContent\r\n        : rawContent === undefined ? 'undefined'\r\n            : JSON.stringify(rawContent));\r\n};\r\n//# sourceMappingURL=AbstractChatCompletionRunner.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/AssistantStream.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/lib/AssistantStream.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantStream: () => (/* binding */ AssistantStream)\n/* harmony export */ });\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/core */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_streaming__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/streaming */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/error */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\r\n\r\n\r\n\r\n\r\nclass AssistantStream extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\r\n    constructor() {\r\n        super(...arguments);\r\n        _AssistantStream_instances.add(this);\r\n        //Track all events in a single list for reference\r\n        _AssistantStream_events.set(this, []);\r\n        //Used to accumulate deltas\r\n        //We are accumulating many types so the value here is not strict\r\n        _AssistantStream_runStepSnapshots.set(this, {});\r\n        _AssistantStream_messageSnapshots.set(this, {});\r\n        _AssistantStream_messageSnapshot.set(this, void 0);\r\n        _AssistantStream_finalRun.set(this, void 0);\r\n        _AssistantStream_currentContentIndex.set(this, void 0);\r\n        _AssistantStream_currentContent.set(this, void 0);\r\n        _AssistantStream_currentToolCallIndex.set(this, void 0);\r\n        _AssistantStream_currentToolCall.set(this, void 0);\r\n        //For current snapshot methods\r\n        _AssistantStream_currentEvent.set(this, void 0);\r\n        _AssistantStream_currentRunSnapshot.set(this, void 0);\r\n        _AssistantStream_currentRunStepSnapshot.set(this, void 0);\r\n    }\r\n    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\r\n        const pushQueue = [];\r\n        const readQueue = [];\r\n        let done = false;\r\n        //Catch all for passing along all events\r\n        this.on('event', (event) => {\r\n            const reader = readQueue.shift();\r\n            if (reader) {\r\n                reader.resolve(event);\r\n            }\r\n            else {\r\n                pushQueue.push(event);\r\n            }\r\n        });\r\n        this.on('end', () => {\r\n            done = true;\r\n            for (const reader of readQueue) {\r\n                reader.resolve(undefined);\r\n            }\r\n            readQueue.length = 0;\r\n        });\r\n        this.on('abort', (err) => {\r\n            done = true;\r\n            for (const reader of readQueue) {\r\n                reader.reject(err);\r\n            }\r\n            readQueue.length = 0;\r\n        });\r\n        this.on('error', (err) => {\r\n            done = true;\r\n            for (const reader of readQueue) {\r\n                reader.reject(err);\r\n            }\r\n            readQueue.length = 0;\r\n        });\r\n        return {\r\n            next: async () => {\r\n                if (!pushQueue.length) {\r\n                    if (done) {\r\n                        return { value: undefined, done: true };\r\n                    }\r\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\r\n                }\r\n                const chunk = pushQueue.shift();\r\n                return { value: chunk, done: false };\r\n            },\r\n            return: async () => {\r\n                this.abort();\r\n                return { value: undefined, done: true };\r\n            },\r\n        };\r\n    }\r\n    static fromReadableStream(stream) {\r\n        const runner = new AssistantStream();\r\n        runner._run(() => runner._fromReadableStream(stream));\r\n        return runner;\r\n    }\r\n    async _fromReadableStream(readableStream, options) {\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        this._connected();\r\n        const stream = openai_streaming__WEBPACK_IMPORTED_MODULE_1__.Stream.fromReadableStream(readableStream, this.controller);\r\n        for await (const event of stream) {\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\r\n        }\r\n        if (stream.controller.signal?.aborted) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\r\n        }\r\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\r\n    }\r\n    toReadableStream() {\r\n        const stream = new openai_streaming__WEBPACK_IMPORTED_MODULE_1__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\r\n        return stream.toReadableStream();\r\n    }\r\n    static createToolAssistantStream(threadId, runId, runs, params, options) {\r\n        const runner = new AssistantStream();\r\n        runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, params, {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\r\n        }));\r\n        return runner;\r\n    }\r\n    async _createToolAssistantStream(run, threadId, runId, params, options) {\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        const body = { ...params, stream: true };\r\n        const stream = await run.submitToolOutputs(threadId, runId, body, {\r\n            ...options,\r\n            signal: this.controller.signal,\r\n        });\r\n        this._connected();\r\n        for await (const event of stream) {\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\r\n        }\r\n        if (stream.controller.signal?.aborted) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\r\n        }\r\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\r\n    }\r\n    static createThreadAssistantStream(params, thread, options) {\r\n        const runner = new AssistantStream();\r\n        runner._run(() => runner._threadAssistantStream(params, thread, {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\r\n        }));\r\n        return runner;\r\n    }\r\n    static createAssistantStream(threadId, runs, params, options) {\r\n        const runner = new AssistantStream();\r\n        runner._run(() => runner._runAssistantStream(threadId, runs, params, {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\r\n        }));\r\n        return runner;\r\n    }\r\n    currentEvent() {\r\n        return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\r\n    }\r\n    currentRun() {\r\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\r\n    }\r\n    currentMessageSnapshot() {\r\n        return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\r\n    }\r\n    currentRunStepSnapshot() {\r\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\r\n    }\r\n    async finalRunSteps() {\r\n        await this.done();\r\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\r\n    }\r\n    async finalMessages() {\r\n        await this.done();\r\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\r\n    }\r\n    async finalRun() {\r\n        await this.done();\r\n        if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\r\n            throw Error('Final run was not received.');\r\n        return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\r\n    }\r\n    async _createThreadAssistantStream(thread, params, options) {\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        const body = { ...params, stream: true };\r\n        const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });\r\n        this._connected();\r\n        for await (const event of stream) {\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\r\n        }\r\n        if (stream.controller.signal?.aborted) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\r\n        }\r\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\r\n    }\r\n    async _createAssistantStream(run, threadId, params, options) {\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        const body = { ...params, stream: true };\r\n        const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });\r\n        this._connected();\r\n        for await (const event of stream) {\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\r\n        }\r\n        if (stream.controller.signal?.aborted) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\r\n        }\r\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\r\n    }\r\n    static accumulateDelta(acc, delta) {\r\n        for (const [key, deltaValue] of Object.entries(delta)) {\r\n            if (!acc.hasOwnProperty(key)) {\r\n                acc[key] = deltaValue;\r\n                continue;\r\n            }\r\n            let accValue = acc[key];\r\n            if (accValue === null || accValue === undefined) {\r\n                acc[key] = deltaValue;\r\n                continue;\r\n            }\r\n            // We don't accumulate these special properties\r\n            if (key === 'index' || key === 'type') {\r\n                acc[key] = deltaValue;\r\n                continue;\r\n            }\r\n            // Type-specific accumulation logic\r\n            if (typeof accValue === 'string' && typeof deltaValue === 'string') {\r\n                accValue += deltaValue;\r\n            }\r\n            else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\r\n                accValue += deltaValue;\r\n            }\r\n            else if (openai_core__WEBPACK_IMPORTED_MODULE_3__.isObj(accValue) && openai_core__WEBPACK_IMPORTED_MODULE_3__.isObj(deltaValue)) {\r\n                accValue = this.accumulateDelta(accValue, deltaValue);\r\n            }\r\n            else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\r\n                if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {\r\n                    accValue.push(...deltaValue); // Use spread syntax for efficient addition\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\r\n            }\r\n            acc[key] = accValue;\r\n        }\r\n        return acc;\r\n    }\r\n    _addRun(run) {\r\n        return run;\r\n    }\r\n    async _threadAssistantStream(params, thread, options) {\r\n        return await this._createThreadAssistantStream(thread, params, options);\r\n    }\r\n    async _runAssistantStream(threadId, runs, params, options) {\r\n        return await this._createAssistantStream(runs, threadId, params, options);\r\n    }\r\n    async _runToolAssistantStream(threadId, runId, runs, params, options) {\r\n        return await this._createToolAssistantStream(runs, threadId, runId, params, options);\r\n    }\r\n}\r\n_AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\r\n    if (this.ended)\r\n        return;\r\n    __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\r\n    __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\r\n    switch (event.event) {\r\n        case 'thread.created':\r\n            //No action on this event.\r\n            break;\r\n        case 'thread.run.created':\r\n        case 'thread.run.queued':\r\n        case 'thread.run.in_progress':\r\n        case 'thread.run.requires_action':\r\n        case 'thread.run.completed':\r\n        case 'thread.run.failed':\r\n        case 'thread.run.cancelling':\r\n        case 'thread.run.cancelled':\r\n        case 'thread.run.expired':\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\r\n            break;\r\n        case 'thread.run.step.created':\r\n        case 'thread.run.step.in_progress':\r\n        case 'thread.run.step.delta':\r\n        case 'thread.run.step.completed':\r\n        case 'thread.run.step.failed':\r\n        case 'thread.run.step.cancelled':\r\n        case 'thread.run.step.expired':\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\r\n            break;\r\n        case 'thread.message.created':\r\n        case 'thread.message.in_progress':\r\n        case 'thread.message.delta':\r\n        case 'thread.message.completed':\r\n        case 'thread.message.incomplete':\r\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\r\n            break;\r\n        case 'error':\r\n            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\r\n            throw new Error('Encountered an error event in event processing - errors should be processed earlier');\r\n    }\r\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\r\n    if (this.ended) {\r\n        throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`stream has ended, this shouldn't happen`);\r\n    }\r\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\r\n        throw Error('Final run has not been received');\r\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\r\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\r\n    const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\r\n    __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\r\n    __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\r\n    for (const content of newContent) {\r\n        const snapshotContent = accumulatedMessage.content[content.index];\r\n        if (snapshotContent?.type == 'text') {\r\n            this._emit('textCreated', snapshotContent.text);\r\n        }\r\n    }\r\n    switch (event.event) {\r\n        case 'thread.message.created':\r\n            this._emit('messageCreated', event.data);\r\n            break;\r\n        case 'thread.message.in_progress':\r\n            break;\r\n        case 'thread.message.delta':\r\n            this._emit('messageDelta', event.data.delta, accumulatedMessage);\r\n            if (event.data.delta.content) {\r\n                for (const content of event.data.delta.content) {\r\n                    //If it is text delta, emit a text delta event\r\n                    if (content.type == 'text' && content.text) {\r\n                        let textDelta = content.text;\r\n                        let snapshot = accumulatedMessage.content[content.index];\r\n                        if (snapshot && snapshot.type == 'text') {\r\n                            this._emit('textDelta', textDelta, snapshot.text);\r\n                        }\r\n                        else {\r\n                            throw Error('The snapshot associated with this text delta is not text or missing');\r\n                        }\r\n                    }\r\n                    if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\r\n                        //See if we have in progress content\r\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\r\n                            switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\r\n                                case 'text':\r\n                                    this._emit('textDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\r\n                                    break;\r\n                                case 'image_file':\r\n                                    this._emit('imageFileDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\r\n                                    break;\r\n                            }\r\n                        }\r\n                        __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\r\n                    }\r\n                    __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\r\n                }\r\n            }\r\n            break;\r\n        case 'thread.message.completed':\r\n        case 'thread.message.incomplete':\r\n            //We emit the latest content we were working on on completion (including incomplete)\r\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\r\n                const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\r\n                if (currentContent) {\r\n                    switch (currentContent.type) {\r\n                        case 'image_file':\r\n                            this._emit('imageFileDone', currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\r\n                            break;\r\n                        case 'text':\r\n                            this._emit('textDone', currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\r\n                this._emit('messageDone', event.data);\r\n            }\r\n            __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\r\n    }\r\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\r\n    const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\r\n    __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\r\n    switch (event.event) {\r\n        case 'thread.run.step.created':\r\n            this._emit('runStepCreated', event.data);\r\n            break;\r\n        case 'thread.run.step.delta':\r\n            const delta = event.data.delta;\r\n            if (delta.step_details &&\r\n                delta.step_details.type == 'tool_calls' &&\r\n                delta.step_details.tool_calls &&\r\n                accumulatedRunStep.step_details.type == 'tool_calls') {\r\n                for (const toolCall of delta.step_details.tool_calls) {\r\n                    if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\r\n                        this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\r\n                    }\r\n                    else {\r\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\r\n                            this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\r\n                        }\r\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\r\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\r\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"))\r\n                            this._emit('toolCallCreated', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\r\n                    }\r\n                }\r\n            }\r\n            this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\r\n            break;\r\n        case 'thread.run.step.completed':\r\n        case 'thread.run.step.failed':\r\n        case 'thread.run.step.cancelled':\r\n        case 'thread.run.step.expired':\r\n            __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\r\n            const details = event.data.step_details;\r\n            if (details.type == 'tool_calls') {\r\n                if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\r\n                    this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\r\n                    __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\r\n                }\r\n            }\r\n            this._emit('runStepDone', event.data, accumulatedRunStep);\r\n            break;\r\n        case 'thread.run.step.in_progress':\r\n            break;\r\n    }\r\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\r\n    __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\r\n    this._emit('event', event);\r\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\r\n    switch (event.event) {\r\n        case 'thread.run.step.created':\r\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\r\n            return event.data;\r\n        case 'thread.run.step.delta':\r\n            let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\r\n            if (!snapshot) {\r\n                throw Error('Received a RunStepDelta before creation of a snapshot');\r\n            }\r\n            let data = event.data;\r\n            if (data.delta) {\r\n                const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);\r\n                __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\r\n            }\r\n            return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\r\n        case 'thread.run.step.completed':\r\n        case 'thread.run.step.failed':\r\n        case 'thread.run.step.cancelled':\r\n        case 'thread.run.step.expired':\r\n        case 'thread.run.step.in_progress':\r\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\r\n            break;\r\n    }\r\n    if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id])\r\n        return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\r\n    throw new Error('No snapshot available');\r\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\r\n    let newContent = [];\r\n    switch (event.event) {\r\n        case 'thread.message.created':\r\n            //On creation the snapshot is just the initial message\r\n            return [event.data, newContent];\r\n        case 'thread.message.delta':\r\n            if (!snapshot) {\r\n                throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\r\n            }\r\n            let data = event.data;\r\n            //If this delta does not have content, nothing to process\r\n            if (data.delta.content) {\r\n                for (const contentElement of data.delta.content) {\r\n                    if (contentElement.index in snapshot.content) {\r\n                        let currentContent = snapshot.content[contentElement.index];\r\n                        snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\r\n                    }\r\n                    else {\r\n                        snapshot.content[contentElement.index] = contentElement;\r\n                        // This is a new element\r\n                        newContent.push(contentElement);\r\n                    }\r\n                }\r\n            }\r\n            return [snapshot, newContent];\r\n        case 'thread.message.in_progress':\r\n        case 'thread.message.completed':\r\n        case 'thread.message.incomplete':\r\n            //No changes on other thread events\r\n            if (snapshot) {\r\n                return [snapshot, newContent];\r\n            }\r\n            else {\r\n                throw Error('Received thread message event with no existing snapshot');\r\n            }\r\n    }\r\n    throw Error('Tried to accumulate a non-message event');\r\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\r\n    return AssistantStream.accumulateDelta(currentContent, contentElement);\r\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\r\n    __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\r\n    switch (event.event) {\r\n        case 'thread.run.created':\r\n            break;\r\n        case 'thread.run.queued':\r\n            break;\r\n        case 'thread.run.in_progress':\r\n            break;\r\n        case 'thread.run.requires_action':\r\n        case 'thread.run.cancelled':\r\n        case 'thread.run.failed':\r\n        case 'thread.run.completed':\r\n        case 'thread.run.expired':\r\n            __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\r\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\r\n                this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\r\n                __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\r\n            }\r\n            break;\r\n        case 'thread.run.cancelling':\r\n            break;\r\n    }\r\n};\r\n//# sourceMappingURL=AssistantStream.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/AssistantStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionRunner.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* binding */ ChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n\r\n\r\nclass ChatCompletionRunner extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\r\n    /** @deprecated - please use `runTools` instead. */\r\n    static runFunctions(client, params, options) {\r\n        const runner = new ChatCompletionRunner();\r\n        const opts = {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\r\n        };\r\n        runner._run(() => runner._runFunctions(client, params, opts));\r\n        return runner;\r\n    }\r\n    static runTools(client, params, options) {\r\n        const runner = new ChatCompletionRunner();\r\n        const opts = {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\r\n        };\r\n        runner._run(() => runner._runTools(client, params, opts));\r\n        return runner;\r\n    }\r\n    _addMessage(message) {\r\n        super._addMessage(message);\r\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.content) {\r\n            this._emit('content', message.content);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ChatCompletionRunner.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1GO0FBQ3BCO0FBQ3hELG1DQUFtQywyRkFBNEI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrRUFBa0U7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4REFBOEQ7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0RUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLm1qcz8yMDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIsIH0gZnJvbSBcIi4vQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcclxuaW1wb3J0IHsgaXNBc3Npc3RhbnRNZXNzYWdlIH0gZnJvbSBcIi4vY2hhdENvbXBsZXRpb25VdGlscy5tanNcIjtcclxuZXhwb3J0IGNsYXNzIENoYXRDb21wbGV0aW9uUnVubmVyIGV4dGVuZHMgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lciB7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBydW5Ub29sc2AgaW5zdGVhZC4gKi9cclxuICAgIHN0YXRpYyBydW5GdW5jdGlvbnMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25SdW5uZXIoKTtcclxuICAgICAgICBjb25zdCBvcHRzID0ge1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1bkZ1bmN0aW9ucycgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuRnVuY3Rpb25zKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBydW5Ub29scyhjbGllbnQsIHBhcmFtcywgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblJ1bm5lcigpO1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuVG9vbHMnIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgIH1cclxuICAgIF9hZGRNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICBzdXBlci5fYWRkTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICBpZiAoaXNBc3Npc3RhbnRNZXNzYWdlKG1lc3NhZ2UpICYmIG1lc3NhZ2UuY29udGVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbWl0KCdjb250ZW50JywgbWVzc2FnZS5jb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhdENvbXBsZXRpb25SdW5uZXIubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStream.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStream: () => (/* binding */ ChatCompletionStream)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/error */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var openai_streaming__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/streaming */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/lib/parser */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\r\n\r\n\r\n\r\n\r\n\r\nclass ChatCompletionStream extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\r\n    constructor(params) {\r\n        super();\r\n        _ChatCompletionStream_instances.add(this);\r\n        _ChatCompletionStream_params.set(this, void 0);\r\n        _ChatCompletionStream_choiceEventStates.set(this, void 0);\r\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\r\n        __classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\r\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\r\n    }\r\n    get currentChatCompletionSnapshot() {\r\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\r\n    }\r\n    /**\r\n     * Intended for use on the frontend, consuming a stream produced with\r\n     * `.toReadableStream()` on the backend.\r\n     *\r\n     * Note that messages sent to the model do not appear in `.on('message')`\r\n     * in this context.\r\n     */\r\n    static fromReadableStream(stream) {\r\n        const runner = new ChatCompletionStream(null);\r\n        runner._run(() => runner._fromReadableStream(stream));\r\n        return runner;\r\n    }\r\n    static createChatCompletion(client, params, options) {\r\n        const runner = new ChatCompletionStream(params);\r\n        runner._run(() => runner._runChatCompletion(client, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\r\n        return runner;\r\n    }\r\n    async _createChatCompletion(client, params, options) {\r\n        super._createChatCompletion;\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\r\n        const stream = await client.chat.completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\r\n        this._connected();\r\n        for await (const chunk of stream) {\r\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\r\n        }\r\n        if (stream.controller.signal?.aborted) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\r\n        }\r\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\r\n    }\r\n    async _fromReadableStream(readableStream, options) {\r\n        const signal = options?.signal;\r\n        if (signal) {\r\n            if (signal.aborted)\r\n                this.controller.abort();\r\n            signal.addEventListener('abort', () => this.controller.abort());\r\n        }\r\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\r\n        this._connected();\r\n        const stream = openai_streaming__WEBPACK_IMPORTED_MODULE_2__.Stream.fromReadableStream(readableStream, this.controller);\r\n        let chatId;\r\n        for await (const chunk of stream) {\r\n            if (chatId && chatId !== chunk.id) {\r\n                // A new request has been made.\r\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\r\n            }\r\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\r\n            chatId = chunk.id;\r\n        }\r\n        if (stream.controller.signal?.aborted) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\r\n        }\r\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\r\n    }\r\n    [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\r\n        if (this.ended)\r\n            return;\r\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\r\n    }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\r\n        let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\r\n        if (state) {\r\n            return state;\r\n        }\r\n        state = {\r\n            content_done: false,\r\n            refusal_done: false,\r\n            logprobs_content_done: false,\r\n            logprobs_refusal_done: false,\r\n            done_tool_calls: new Set(),\r\n            current_tool_call_index: null,\r\n        };\r\n        __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\r\n        return state;\r\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\r\n        if (this.ended)\r\n            return;\r\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\r\n        this._emit('chunk', chunk, completion);\r\n        for (const choice of chunk.choices) {\r\n            const choiceSnapshot = completion.choices[choice.index];\r\n            if (choice.delta.content != null &&\r\n                choiceSnapshot.message?.role === 'assistant' &&\r\n                choiceSnapshot.message?.content) {\r\n                this._emit('content', choice.delta.content, choiceSnapshot.message.content);\r\n                this._emit('content.delta', {\r\n                    delta: choice.delta.content,\r\n                    snapshot: choiceSnapshot.message.content,\r\n                    parsed: choiceSnapshot.message.parsed,\r\n                });\r\n            }\r\n            if (choice.delta.refusal != null &&\r\n                choiceSnapshot.message?.role === 'assistant' &&\r\n                choiceSnapshot.message?.refusal) {\r\n                this._emit('refusal.delta', {\r\n                    delta: choice.delta.refusal,\r\n                    snapshot: choiceSnapshot.message.refusal,\r\n                });\r\n            }\r\n            if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\r\n                this._emit('logprobs.content.delta', {\r\n                    content: choice.logprobs?.content,\r\n                    snapshot: choiceSnapshot.logprobs?.content ?? [],\r\n                });\r\n            }\r\n            if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\r\n                this._emit('logprobs.refusal.delta', {\r\n                    refusal: choice.logprobs?.refusal,\r\n                    snapshot: choiceSnapshot.logprobs?.refusal ?? [],\r\n                });\r\n            }\r\n            const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\r\n            if (choiceSnapshot.finish_reason) {\r\n                __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\r\n                if (state.current_tool_call_index != null) {\r\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\r\n                }\r\n            }\r\n            for (const toolCall of choice.delta.tool_calls ?? []) {\r\n                if (state.current_tool_call_index !== toolCall.index) {\r\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\r\n                    // new tool call started, the previous one is done\r\n                    if (state.current_tool_call_index != null) {\r\n                        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\r\n                    }\r\n                }\r\n                state.current_tool_call_index = toolCall.index;\r\n            }\r\n            for (const toolCallDelta of choice.delta.tool_calls ?? []) {\r\n                const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\r\n                if (!toolCallSnapshot?.type) {\r\n                    continue;\r\n                }\r\n                if (toolCallSnapshot?.type === 'function') {\r\n                    this._emit('tool_calls.function.arguments.delta', {\r\n                        name: toolCallSnapshot.function?.name,\r\n                        index: toolCallDelta.index,\r\n                        arguments: toolCallSnapshot.function.arguments,\r\n                        parsed_arguments: toolCallSnapshot.function.parsed_arguments,\r\n                        arguments_delta: toolCallDelta.function?.arguments ?? '',\r\n                    });\r\n                }\r\n                else {\r\n                    assertNever(toolCallSnapshot?.type);\r\n                }\r\n            }\r\n        }\r\n    }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\r\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\r\n        if (state.done_tool_calls.has(toolCallIndex)) {\r\n            // we've already fired the done event\r\n            return;\r\n        }\r\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\r\n        if (!toolCallSnapshot) {\r\n            throw new Error('no tool call snapshot');\r\n        }\r\n        if (!toolCallSnapshot.type) {\r\n            throw new Error('tool call snapshot missing `type`');\r\n        }\r\n        if (toolCallSnapshot.type === 'function') {\r\n            const inputTool = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.tools?.find((tool) => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name);\r\n            this._emit('tool_calls.function.arguments.done', {\r\n                name: toolCallSnapshot.function.name,\r\n                index: toolCallIndex,\r\n                arguments: toolCallSnapshot.function.arguments,\r\n                parsed_arguments: (0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableTool)(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments)\r\n                    : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments)\r\n                        : null,\r\n            });\r\n        }\r\n        else {\r\n            assertNever(toolCallSnapshot.type);\r\n        }\r\n    }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\r\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\r\n        if (choiceSnapshot.message.content && !state.content_done) {\r\n            state.content_done = true;\r\n            const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\r\n            this._emit('content.done', {\r\n                content: choiceSnapshot.message.content,\r\n                parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null,\r\n            });\r\n        }\r\n        if (choiceSnapshot.message.refusal && !state.refusal_done) {\r\n            state.refusal_done = true;\r\n            this._emit('refusal.done', { refusal: choiceSnapshot.message.refusal });\r\n        }\r\n        if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\r\n            state.logprobs_content_done = true;\r\n            this._emit('logprobs.content.done', { content: choiceSnapshot.logprobs.content });\r\n        }\r\n        if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\r\n            state.logprobs_refusal_done = true;\r\n            this._emit('logprobs.refusal.done', { refusal: choiceSnapshot.logprobs.refusal });\r\n        }\r\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\r\n        if (this.ended) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\r\n        }\r\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\r\n        if (!snapshot) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any chunks`);\r\n        }\r\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\r\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\r\n        return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\r\n    }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\r\n        const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.response_format;\r\n        if ((0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableResponseFormat)(responseFormat)) {\r\n            return responseFormat;\r\n        }\r\n        return null;\r\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\r\n        var _a, _b, _c, _d;\r\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\r\n        const { choices, ...rest } = chunk;\r\n        if (!snapshot) {\r\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\r\n                ...rest,\r\n                choices: [],\r\n            }, \"f\");\r\n        }\r\n        else {\r\n            Object.assign(snapshot, rest);\r\n        }\r\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\r\n            let choice = snapshot.choices[index];\r\n            if (!choice) {\r\n                choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\r\n            }\r\n            if (logprobs) {\r\n                if (!choice.logprobs) {\r\n                    choice.logprobs = Object.assign({}, logprobs);\r\n                }\r\n                else {\r\n                    const { content, refusal, ...rest } = logprobs;\r\n                    assertIsEmpty(rest);\r\n                    Object.assign(choice.logprobs, rest);\r\n                    if (content) {\r\n                        (_a = choice.logprobs).content ?? (_a.content = []);\r\n                        choice.logprobs.content.push(...content);\r\n                    }\r\n                    if (refusal) {\r\n                        (_b = choice.logprobs).refusal ?? (_b.refusal = []);\r\n                        choice.logprobs.refusal.push(...refusal);\r\n                    }\r\n                }\r\n            }\r\n            if (finish_reason) {\r\n                choice.finish_reason = finish_reason;\r\n                if (__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && (0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.hasAutoParseableInput)(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\r\n                    if (finish_reason === 'length') {\r\n                        throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.LengthFinishReasonError();\r\n                    }\r\n                    if (finish_reason === 'content_filter') {\r\n                        throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.ContentFilterFinishReasonError();\r\n                    }\r\n                }\r\n            }\r\n            Object.assign(choice, other);\r\n            if (!delta)\r\n                continue; // Shouldn't happen; just in case.\r\n            const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\r\n            assertIsEmpty(rest);\r\n            Object.assign(choice.message, rest);\r\n            if (refusal) {\r\n                choice.message.refusal = (choice.message.refusal || '') + refusal;\r\n            }\r\n            if (role)\r\n                choice.message.role = role;\r\n            if (function_call) {\r\n                if (!choice.message.function_call) {\r\n                    choice.message.function_call = function_call;\r\n                }\r\n                else {\r\n                    if (function_call.name)\r\n                        choice.message.function_call.name = function_call.name;\r\n                    if (function_call.arguments) {\r\n                        (_c = choice.message.function_call).arguments ?? (_c.arguments = '');\r\n                        choice.message.function_call.arguments += function_call.arguments;\r\n                    }\r\n                }\r\n            }\r\n            if (content) {\r\n                choice.message.content = (choice.message.content || '') + content;\r\n                if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\r\n                    choice.message.parsed = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(choice.message.content);\r\n                }\r\n            }\r\n            if (tool_calls) {\r\n                if (!choice.message.tool_calls)\r\n                    choice.message.tool_calls = [];\r\n                for (const { index, id, type, function: fn, ...rest } of tool_calls) {\r\n                    const tool_call = ((_d = choice.message.tool_calls)[index] ?? (_d[index] = {}));\r\n                    Object.assign(tool_call, rest);\r\n                    if (id)\r\n                        tool_call.id = id;\r\n                    if (type)\r\n                        tool_call.type = type;\r\n                    if (fn)\r\n                        tool_call.function ?? (tool_call.function = { name: fn.name ?? '', arguments: '' });\r\n                    if (fn?.name)\r\n                        tool_call.function.name = fn.name;\r\n                    if (fn?.arguments) {\r\n                        tool_call.function.arguments += fn.arguments;\r\n                        if ((0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.shouldParseToolCall)(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\r\n                            tool_call.function.parsed_arguments = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(tool_call.function.arguments);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return snapshot;\r\n    }, Symbol.asyncIterator)]() {\r\n        const pushQueue = [];\r\n        const readQueue = [];\r\n        let done = false;\r\n        this.on('chunk', (chunk) => {\r\n            const reader = readQueue.shift();\r\n            if (reader) {\r\n                reader.resolve(chunk);\r\n            }\r\n            else {\r\n                pushQueue.push(chunk);\r\n            }\r\n        });\r\n        this.on('end', () => {\r\n            done = true;\r\n            for (const reader of readQueue) {\r\n                reader.resolve(undefined);\r\n            }\r\n            readQueue.length = 0;\r\n        });\r\n        this.on('abort', (err) => {\r\n            done = true;\r\n            for (const reader of readQueue) {\r\n                reader.reject(err);\r\n            }\r\n            readQueue.length = 0;\r\n        });\r\n        this.on('error', (err) => {\r\n            done = true;\r\n            for (const reader of readQueue) {\r\n                reader.reject(err);\r\n            }\r\n            readQueue.length = 0;\r\n        });\r\n        return {\r\n            next: async () => {\r\n                if (!pushQueue.length) {\r\n                    if (done) {\r\n                        return { value: undefined, done: true };\r\n                    }\r\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\r\n                }\r\n                const chunk = pushQueue.shift();\r\n                return { value: chunk, done: false };\r\n            },\r\n            return: async () => {\r\n                this.abort();\r\n                return { value: undefined, done: true };\r\n            },\r\n        };\r\n    }\r\n    toReadableStream() {\r\n        const stream = new openai_streaming__WEBPACK_IMPORTED_MODULE_2__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\r\n        return stream.toReadableStream();\r\n    }\r\n}\r\nfunction finalizeChatCompletion(snapshot, params) {\r\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\r\n    const completion = {\r\n        ...rest,\r\n        id,\r\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {\r\n            if (!finish_reason) {\r\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing finish_reason for choice ${index}`);\r\n            }\r\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\r\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\r\n            if (!role) {\r\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing role for choice ${index}`);\r\n            }\r\n            if (function_call) {\r\n                const { arguments: args, name } = function_call;\r\n                if (args == null) {\r\n                    throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.arguments for choice ${index}`);\r\n                }\r\n                if (!name) {\r\n                    throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.name for choice ${index}`);\r\n                }\r\n                return {\r\n                    ...choiceRest,\r\n                    message: {\r\n                        content,\r\n                        function_call: { arguments: args, name },\r\n                        role,\r\n                        refusal: message.refusal ?? null,\r\n                    },\r\n                    finish_reason,\r\n                    index,\r\n                    logprobs,\r\n                };\r\n            }\r\n            if (tool_calls) {\r\n                return {\r\n                    ...choiceRest,\r\n                    index,\r\n                    finish_reason,\r\n                    logprobs,\r\n                    message: {\r\n                        ...messageRest,\r\n                        role,\r\n                        content,\r\n                        refusal: message.refusal ?? null,\r\n                        tool_calls: tool_calls.map((tool_call, i) => {\r\n                            const { function: fn, type, id, ...toolRest } = tool_call;\r\n                            const { arguments: args, name, ...fnRest } = fn || {};\r\n                            if (id == null) {\r\n                                throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\r\n                            }\r\n                            if (type == null) {\r\n                                throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\r\n                            }\r\n                            if (name == null) {\r\n                                throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\r\n                            }\r\n                            if (args == null) {\r\n                                throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\r\n                            }\r\n                            return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\r\n                        }),\r\n                    },\r\n                };\r\n            }\r\n            return {\r\n                ...choiceRest,\r\n                message: { ...messageRest, content, role, refusal: message.refusal ?? null },\r\n                finish_reason,\r\n                index,\r\n                logprobs,\r\n            };\r\n        }),\r\n        created,\r\n        model,\r\n        object: 'chat.completion',\r\n        ...(system_fingerprint ? { system_fingerprint } : {}),\r\n    };\r\n    return (0,openai_lib_parser__WEBPACK_IMPORTED_MODULE_3__.maybeParseChatCompletion)(completion, params);\r\n}\r\nfunction str(x) {\r\n    return JSON.stringify(x);\r\n}\r\n/**\r\n * Ensures the given argument is an empty object, useful for\r\n * asserting that all known properties on an object have been\r\n * destructured.\r\n */\r\nfunction assertIsEmpty(obj) {\r\n    return;\r\n}\r\nfunction assertNever(_x) { }\r\n//# sourceMappingURL=ChatCompletionStream.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* binding */ ChatCompletionStreamingRunner)\n/* harmony export */ });\n/* harmony import */ var _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChatCompletionStream.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n\r\nclass ChatCompletionStreamingRunner extends _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream {\r\n    static fromReadableStream(stream) {\r\n        const runner = new ChatCompletionStreamingRunner(null);\r\n        runner._run(() => runner._fromReadableStream(stream));\r\n        return runner;\r\n    }\r\n    /** @deprecated - please use `runTools` instead. */\r\n    static runFunctions(client, params, options) {\r\n        const runner = new ChatCompletionStreamingRunner(null);\r\n        const opts = {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\r\n        };\r\n        runner._run(() => runner._runFunctions(client, params, opts));\r\n        return runner;\r\n    }\r\n    static runTools(client, params, options) {\r\n        const runner = new ChatCompletionStreamingRunner(\r\n        // @ts-expect-error TODO these types are incompatible\r\n        params);\r\n        const opts = {\r\n            ...options,\r\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\r\n        };\r\n        runner._run(() => runner._runTools(client, params, opts));\r\n        return runner;\r\n    }\r\n}\r\n//# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0U7QUFDM0QsNENBQTRDLDJFQUFvQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrRUFBa0U7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsOERBQThEO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcz9lZGNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSBcIi4vQ2hhdENvbXBsZXRpb25TdHJlYW0ubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciBleHRlbmRzIENoYXRDb21wbGV0aW9uU3RyZWFtIHtcclxuICAgIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSB7XHJcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKG51bGwpO1xyXG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkpO1xyXG4gICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICB9XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBydW5Ub29sc2AgaW5zdGVhZC4gKi9cclxuICAgIHN0YXRpYyBydW5GdW5jdGlvbnMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIobnVsbCk7XHJcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5GdW5jdGlvbnMnIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1bkZ1bmN0aW9ucyhjbGllbnQsIHBhcmFtcywgb3B0cykpO1xyXG4gICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgcnVuVG9vbHMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIoXHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIHRoZXNlIHR5cGVzIGFyZSBpbmNvbXBhdGlibGVcclxuICAgICAgICBwYXJhbXMpO1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuVG9vbHMnIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/EventStream.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/lib/EventStream.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStream: () => (/* binding */ EventStream)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/error */ \"(rsc)/./node_modules/openai/error.mjs\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;\r\n\r\nclass EventStream {\r\n    constructor() {\r\n        _EventStream_instances.add(this);\r\n        this.controller = new AbortController();\r\n        _EventStream_connectedPromise.set(this, void 0);\r\n        _EventStream_resolveConnectedPromise.set(this, () => { });\r\n        _EventStream_rejectConnectedPromise.set(this, () => { });\r\n        _EventStream_endPromise.set(this, void 0);\r\n        _EventStream_resolveEndPromise.set(this, () => { });\r\n        _EventStream_rejectEndPromise.set(this, () => { });\r\n        _EventStream_listeners.set(this, {});\r\n        _EventStream_ended.set(this, false);\r\n        _EventStream_errored.set(this, false);\r\n        _EventStream_aborted.set(this, false);\r\n        _EventStream_catchingPromiseCreated.set(this, false);\r\n        __classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {\r\n            __classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, \"f\");\r\n            __classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, \"f\");\r\n        }), \"f\");\r\n        __classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject) => {\r\n            __classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, \"f\");\r\n            __classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, \"f\");\r\n        }), \"f\");\r\n        // Don't let these promises cause unhandled rejection errors.\r\n        // we will manually cause an unhandled rejection error later\r\n        // if the user hasn't registered any error listener or called\r\n        // any promise-returning method.\r\n        __classPrivateFieldGet(this, _EventStream_connectedPromise, \"f\").catch(() => { });\r\n        __classPrivateFieldGet(this, _EventStream_endPromise, \"f\").catch(() => { });\r\n    }\r\n    _run(executor) {\r\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\r\n        // references to `this` before the `super()` constructor call returns.\r\n        setTimeout(() => {\r\n            executor().then(() => {\r\n                this._emitFinal();\r\n                this._emit('end');\r\n            }, __classPrivateFieldGet(this, _EventStream_instances, \"m\", _EventStream_handleError).bind(this));\r\n        }, 0);\r\n    }\r\n    _connected() {\r\n        if (this.ended)\r\n            return;\r\n        __classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, \"f\").call(this);\r\n        this._emit('connect');\r\n    }\r\n    get ended() {\r\n        return __classPrivateFieldGet(this, _EventStream_ended, \"f\");\r\n    }\r\n    get errored() {\r\n        return __classPrivateFieldGet(this, _EventStream_errored, \"f\");\r\n    }\r\n    get aborted() {\r\n        return __classPrivateFieldGet(this, _EventStream_aborted, \"f\");\r\n    }\r\n    abort() {\r\n        this.controller.abort();\r\n    }\r\n    /**\r\n     * Adds the listener function to the end of the listeners array for the event.\r\n     * No checks are made to see if the listener has already been added. Multiple calls passing\r\n     * the same combination of event and listener will result in the listener being added, and\r\n     * called, multiple times.\r\n     * @returns this ChatCompletionStream, so that calls can be chained\r\n     */\r\n    on(event, listener) {\r\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\r\n        listeners.push({ listener });\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the specified listener from the listener array for the event.\r\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\r\n     * listener has been added multiple times to the listener array for the specified event, then\r\n     * off() must be called multiple times to remove each instance.\r\n     * @returns this ChatCompletionStream, so that calls can be chained\r\n     */\r\n    off(event, listener) {\r\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\r\n        if (!listeners)\r\n            return this;\r\n        const index = listeners.findIndex((l) => l.listener === listener);\r\n        if (index >= 0)\r\n            listeners.splice(index, 1);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a one-time listener function for the event. The next time the event is triggered,\r\n     * this listener is removed and then invoked.\r\n     * @returns this ChatCompletionStream, so that calls can be chained\r\n     */\r\n    once(event, listener) {\r\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\r\n        listeners.push({ listener, once: true });\r\n        return this;\r\n    }\r\n    /**\r\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\r\n     * the event is triggered, instead of calling a listener callback.\r\n     * @returns a Promise that resolves the next time given event is triggered,\r\n     * or rejects if an error is emitted.  (If you request the 'error' event,\r\n     * returns a promise that resolves with the error).\r\n     *\r\n     * Example:\r\n     *\r\n     *   const message = await stream.emitted('message') // rejects if the stream errors\r\n     */\r\n    emitted(event) {\r\n        return new Promise((resolve, reject) => {\r\n            __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\r\n            if (event !== 'error')\r\n                this.once('error', reject);\r\n            this.once(event, resolve);\r\n        });\r\n    }\r\n    async done() {\r\n        __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\r\n        await __classPrivateFieldGet(this, _EventStream_endPromise, \"f\");\r\n    }\r\n    _emit(event, ...args) {\r\n        // make sure we don't emit any events after end\r\n        if (__classPrivateFieldGet(this, _EventStream_ended, \"f\")) {\r\n            return;\r\n        }\r\n        if (event === 'end') {\r\n            __classPrivateFieldSet(this, _EventStream_ended, true, \"f\");\r\n            __classPrivateFieldGet(this, _EventStream_resolveEndPromise, \"f\").call(this);\r\n        }\r\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\r\n        if (listeners) {\r\n            __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\r\n            listeners.forEach(({ listener }) => listener(...args));\r\n        }\r\n        if (event === 'abort') {\r\n            const error = args[0];\r\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\r\n                Promise.reject(error);\r\n            }\r\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\r\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\r\n            this._emit('end');\r\n            return;\r\n        }\r\n        if (event === 'error') {\r\n            // NOTE: _emit('error', error) should only be called from #handleError().\r\n            const error = args[0];\r\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\r\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\r\n                // If you are seeing stack traces here, make sure to handle errors via either:\r\n                // - runner.on('error', () => ...)\r\n                // - await runner.done()\r\n                // - await runner.finalChatCompletion()\r\n                // - etc.\r\n                Promise.reject(error);\r\n            }\r\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\r\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\r\n            this._emit('end');\r\n        }\r\n    }\r\n    _emitFinal() { }\r\n}\r\n_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {\r\n    __classPrivateFieldSet(this, _EventStream_errored, true, \"f\");\r\n    if (error instanceof Error && error.name === 'AbortError') {\r\n        error = new openai_error__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError();\r\n    }\r\n    if (error instanceof openai_error__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError) {\r\n        __classPrivateFieldSet(this, _EventStream_aborted, true, \"f\");\r\n        return this._emit('abort', error);\r\n    }\r\n    if (error instanceof openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError) {\r\n        return this._emit('error', error);\r\n    }\r\n    if (error instanceof Error) {\r\n        const openAIError = new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(error.message);\r\n        // @ts-ignore\r\n        openAIError.cause = error;\r\n        return this._emit('error', openAIError);\r\n    }\r\n    return this._emit('error', new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(String(error)));\r\n};\r\n//# sourceMappingURL=EventStream.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/EventStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/RunnableFunction.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/lib/RunnableFunction.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParsingFunction: () => (/* binding */ ParsingFunction),\n/* harmony export */   ParsingToolFunction: () => (/* binding */ ParsingToolFunction),\n/* harmony export */   isRunnableFunctionWithParse: () => (/* binding */ isRunnableFunctionWithParse)\n/* harmony export */ });\nfunction isRunnableFunctionWithParse(fn) {\r\n    return typeof fn.parse === 'function';\r\n}\r\n/**\r\n * This is helper class for passing a `function` and `parse` where the `function`\r\n * argument type matches the `parse` return type.\r\n *\r\n * @deprecated - please use ParsingToolFunction instead.\r\n */\r\nclass ParsingFunction {\r\n    constructor(input) {\r\n        this.function = input.function;\r\n        this.parse = input.parse;\r\n        this.parameters = input.parameters;\r\n        this.description = input.description;\r\n        this.name = input.name;\r\n    }\r\n}\r\n/**\r\n * This is helper class for passing a `function` and `parse` where the `function`\r\n * argument type matches the `parse` return type.\r\n */\r\nclass ParsingToolFunction {\r\n    constructor(input) {\r\n        this.type = 'function';\r\n        this.function = input;\r\n    }\r\n}\r\n//# sourceMappingURL=RunnableFunction.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvUnVubmFibGVGdW5jdGlvbi5tanM/NzkwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlKGZuKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGZuLnBhcnNlID09PSAnZnVuY3Rpb24nO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGlzIGhlbHBlciBjbGFzcyBmb3IgcGFzc2luZyBhIGBmdW5jdGlvbmAgYW5kIGBwYXJzZWAgd2hlcmUgdGhlIGBmdW5jdGlvbmBcclxuICogYXJndW1lbnQgdHlwZSBtYXRjaGVzIHRoZSBgcGFyc2VgIHJldHVybiB0eXBlLlxyXG4gKlxyXG4gKiBAZGVwcmVjYXRlZCAtIHBsZWFzZSB1c2UgUGFyc2luZ1Rvb2xGdW5jdGlvbiBpbnN0ZWFkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBhcnNpbmdGdW5jdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xyXG4gICAgICAgIHRoaXMuZnVuY3Rpb24gPSBpbnB1dC5mdW5jdGlvbjtcclxuICAgICAgICB0aGlzLnBhcnNlID0gaW5wdXQucGFyc2U7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gaW5wdXQucGFyYW1ldGVycztcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gaW5wdXQuZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5uYW1lID0gaW5wdXQubmFtZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhpcyBpcyBoZWxwZXIgY2xhc3MgZm9yIHBhc3NpbmcgYSBgZnVuY3Rpb25gIGFuZCBgcGFyc2VgIHdoZXJlIHRoZSBgZnVuY3Rpb25gXHJcbiAqIGFyZ3VtZW50IHR5cGUgbWF0Y2hlcyB0aGUgYHBhcnNlYCByZXR1cm4gdHlwZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQYXJzaW5nVG9vbEZ1bmN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gJ2Z1bmN0aW9uJztcclxuICAgICAgICB0aGlzLmZ1bmN0aW9uID0gaW5wdXQ7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UnVubmFibGVGdW5jdGlvbi5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/Util.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/lib/Util.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettledWithThrow: () => (/* binding */ allSettledWithThrow)\n/* harmony export */ });\n/**\r\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\r\n */\r\nconst allSettledWithThrow = async (promises) => {\r\n    const results = await Promise.allSettled(promises);\r\n    const rejected = results.filter((result) => result.status === 'rejected');\r\n    if (rejected.length) {\r\n        for (const result of rejected) {\r\n            console.error(result.reason);\r\n        }\r\n        throw new Error(`${rejected.length} promise(s) failed - see the above errors`);\r\n    }\r\n    // Note: TS was complaining about using `.filter().map()` here for some reason\r\n    const values = [];\r\n    for (const result of results) {\r\n        if (result.status === 'fulfilled') {\r\n            values.push(result.value);\r\n        }\r\n    }\r\n    return values;\r\n};\r\n//# sourceMappingURL=Util.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9VdGlsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsaUJBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9VdGlsLm1qcz9mNTA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMaWtlIGBQcm9taXNlLmFsbFNldHRsZWQoKWAgYnV0IHRocm93cyBhbiBlcnJvciBpZiBhbnkgcHJvbWlzZXMgYXJlIHJlamVjdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGFsbFNldHRsZWRXaXRoVGhyb3cgPSBhc3luYyAocHJvbWlzZXMpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpO1xyXG4gICAgY29uc3QgcmVqZWN0ZWQgPSByZXN1bHRzLmZpbHRlcigocmVzdWx0KSA9PiByZXN1bHQuc3RhdHVzID09PSAncmVqZWN0ZWQnKTtcclxuICAgIGlmIChyZWplY3RlZC5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZWplY3RlZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc3VsdC5yZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVqZWN0ZWQubGVuZ3RofSBwcm9taXNlKHMpIGZhaWxlZCAtIHNlZSB0aGUgYWJvdmUgZXJyb3JzYCk7XHJcbiAgICB9XHJcbiAgICAvLyBOb3RlOiBUUyB3YXMgY29tcGxhaW5pbmcgYWJvdXQgdXNpbmcgYC5maWx0ZXIoKS5tYXAoKWAgaGVyZSBmb3Igc29tZSByZWFzb25cclxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xyXG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xyXG4gICAgICAgICAgICB2YWx1ZXMucHVzaChyZXN1bHQudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWwubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/Util.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/lib/chatCompletionUtils.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAssistantMessage: () => (/* binding */ isAssistantMessage),\n/* harmony export */   isFunctionMessage: () => (/* binding */ isFunctionMessage),\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage)\n/* harmony export */ });\nconst isAssistantMessage = (message) => {\r\n    return message?.role === 'assistant';\r\n};\r\nconst isFunctionMessage = (message) => {\r\n    return message?.role === 'function';\r\n};\r\nconst isToolMessage = (message) => {\r\n    return message?.role === 'tool';\r\n};\r\nfunction isPresent(obj) {\r\n    return obj != null;\r\n}\r\n//# sourceMappingURL=chatCompletionUtils.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcz9hMjEzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0Fzc2lzdGFudE1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xyXG4gICAgcmV0dXJuIG1lc3NhZ2U/LnJvbGUgPT09ICdhc3Npc3RhbnQnO1xyXG59O1xyXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbk1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xyXG4gICAgcmV0dXJuIG1lc3NhZ2U/LnJvbGUgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBpc1Rvb2xNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcclxuICAgIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAndG9vbCc7XHJcbn07XHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXNlbnQob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqICE9IG51bGw7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdENvbXBsZXRpb25VdGlscy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/parser.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/lib/parser.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasAutoParseableInput: () => (/* binding */ hasAutoParseableInput),\n/* harmony export */   isAutoParsableResponseFormat: () => (/* binding */ isAutoParsableResponseFormat),\n/* harmony export */   isAutoParsableTool: () => (/* binding */ isAutoParsableTool),\n/* harmony export */   makeParseableResponseFormat: () => (/* binding */ makeParseableResponseFormat),\n/* harmony export */   makeParseableTool: () => (/* binding */ makeParseableTool),\n/* harmony export */   maybeParseChatCompletion: () => (/* binding */ maybeParseChatCompletion),\n/* harmony export */   parseChatCompletion: () => (/* binding */ parseChatCompletion),\n/* harmony export */   shouldParseToolCall: () => (/* binding */ shouldParseToolCall),\n/* harmony export */   validateInputTools: () => (/* binding */ validateInputTools)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/error */ \"(rsc)/./node_modules/openai/error.mjs\");\n\r\nfunction makeParseableResponseFormat(response_format, parser) {\r\n    const obj = { ...response_format };\r\n    Object.defineProperties(obj, {\r\n        $brand: {\r\n            value: 'auto-parseable-response-format',\r\n            enumerable: false,\r\n        },\r\n        $parseRaw: {\r\n            value: parser,\r\n            enumerable: false,\r\n        },\r\n    });\r\n    return obj;\r\n}\r\nfunction isAutoParsableResponseFormat(response_format) {\r\n    return response_format?.['$brand'] === 'auto-parseable-response-format';\r\n}\r\nfunction makeParseableTool(tool, { parser, callback, }) {\r\n    const obj = { ...tool };\r\n    Object.defineProperties(obj, {\r\n        $brand: {\r\n            value: 'auto-parseable-tool',\r\n            enumerable: false,\r\n        },\r\n        $parseRaw: {\r\n            value: parser,\r\n            enumerable: false,\r\n        },\r\n        $callback: {\r\n            value: callback,\r\n            enumerable: false,\r\n        },\r\n    });\r\n    return obj;\r\n}\r\nfunction isAutoParsableTool(tool) {\r\n    return tool?.['$brand'] === 'auto-parseable-tool';\r\n}\r\nfunction maybeParseChatCompletion(completion, params) {\r\n    if (!params || !hasAutoParseableInput(params)) {\r\n        return {\r\n            ...completion,\r\n            choices: completion.choices.map((choice) => ({\r\n                ...choice,\r\n                message: { ...choice.message, parsed: null, tool_calls: choice.message.tool_calls ?? [] },\r\n            })),\r\n        };\r\n    }\r\n    return parseChatCompletion(completion, params);\r\n}\r\nfunction parseChatCompletion(completion, params) {\r\n    const choices = completion.choices.map((choice) => {\r\n        if (choice.finish_reason === 'length') {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.LengthFinishReasonError();\r\n        }\r\n        if (choice.finish_reason === 'content_filter') {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.ContentFilterFinishReasonError();\r\n        }\r\n        return {\r\n            ...choice,\r\n            message: {\r\n                ...choice.message,\r\n                tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? [],\r\n                parsed: choice.message.content && !choice.message.refusal ?\r\n                    parseResponseFormat(params, choice.message.content)\r\n                    : null,\r\n            },\r\n        };\r\n    });\r\n    return { ...completion, choices };\r\n}\r\nfunction parseResponseFormat(params, content) {\r\n    if (params.response_format?.type !== 'json_schema') {\r\n        return null;\r\n    }\r\n    if (params.response_format?.type === 'json_schema') {\r\n        if ('$parseRaw' in params.response_format) {\r\n            const response_format = params.response_format;\r\n            return response_format.$parseRaw(content);\r\n        }\r\n        return JSON.parse(content);\r\n    }\r\n    return null;\r\n}\r\nfunction parseToolCall(params, toolCall) {\r\n    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\r\n    return {\r\n        ...toolCall,\r\n        function: {\r\n            ...toolCall.function,\r\n            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\r\n                : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\r\n                    : null,\r\n        },\r\n    };\r\n}\r\nfunction shouldParseToolCall(params, toolCall) {\r\n    if (!params) {\r\n        return false;\r\n    }\r\n    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\r\n    return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\r\n}\r\nfunction hasAutoParseableInput(params) {\r\n    if (isAutoParsableResponseFormat(params.response_format)) {\r\n        return true;\r\n    }\r\n    return (params.tools?.some((t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true)) ?? false);\r\n}\r\nfunction validateInputTools(tools) {\r\n    for (const tool of tools ?? []) {\r\n        if (tool.type !== 'function') {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\r\n        }\r\n        if (tool.function.strict !== true) {\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=parser.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9wYXJzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBb0c7QUFDN0Y7QUFDUCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ08sbUNBQW1DLG1CQUFtQjtBQUM3RCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw4RUFBOEU7QUFDekcsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esc0JBQXNCLGlFQUF1QjtBQUM3QztBQUNBO0FBQ0Esc0JBQXNCLHdFQUE4QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFXLCtEQUErRCxhQUFhLFVBQVU7QUFDdkg7QUFDQTtBQUNBLHNCQUFzQixxREFBVyxVQUFVLG1CQUFtQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL3BhcnNlci5tanM/OGQ5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZW50RmlsdGVyRmluaXNoUmVhc29uRXJyb3IsIExlbmd0aEZpbmlzaFJlYXNvbkVycm9yLCBPcGVuQUlFcnJvciB9IGZyb20gJ29wZW5haS9lcnJvcic7XHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQocmVzcG9uc2VfZm9ybWF0LCBwYXJzZXIpIHtcclxuICAgIGNvbnN0IG9iaiA9IHsgLi4ucmVzcG9uc2VfZm9ybWF0IH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcclxuICAgICAgICAkYnJhbmQ6IHtcclxuICAgICAgICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgICRwYXJzZVJhdzoge1xyXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0KHJlc3BvbnNlX2Zvcm1hdCkge1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlX2Zvcm1hdD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXJlc3BvbnNlLWZvcm1hdCc7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYXJzZWFibGVUb29sKHRvb2wsIHsgcGFyc2VyLCBjYWxsYmFjaywgfSkge1xyXG4gICAgY29uc3Qgb2JqID0geyAuLi50b29sIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcclxuICAgICAgICAkYnJhbmQ6IHtcclxuICAgICAgICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS10b29sJyxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAkcGFyc2VSYXc6IHtcclxuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAkY2FsbGJhY2s6IHtcclxuICAgICAgICAgICAgdmFsdWU6IGNhbGxiYWNrLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0F1dG9QYXJzYWJsZVRvb2wodG9vbCkge1xyXG4gICAgcmV0dXJuIHRvb2w/LlsnJGJyYW5kJ10gPT09ICdhdXRvLXBhcnNlYWJsZS10b29sJztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVQYXJzZUNoYXRDb21wbGV0aW9uKGNvbXBsZXRpb24sIHBhcmFtcykge1xyXG4gICAgaWYgKCFwYXJhbXMgfHwgIWhhc0F1dG9QYXJzZWFibGVJbnB1dChwYXJhbXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uY29tcGxldGlvbixcclxuICAgICAgICAgICAgY2hvaWNlczogY29tcGxldGlvbi5jaG9pY2VzLm1hcCgoY2hvaWNlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgLi4uY2hvaWNlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogeyAuLi5jaG9pY2UubWVzc2FnZSwgcGFyc2VkOiBudWxsLCB0b29sX2NhbGxzOiBjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzID8/IFtdIH0sXHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcnNlQ2hhdENvbXBsZXRpb24oY29tcGxldGlvbiwgcGFyYW1zKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBwYXJhbXMpIHtcclxuICAgIGNvbnN0IGNob2ljZXMgPSBjb21wbGV0aW9uLmNob2ljZXMubWFwKChjaG9pY2UpID0+IHtcclxuICAgICAgICBpZiAoY2hvaWNlLmZpbmlzaF9yZWFzb24gPT09ICdsZW5ndGgnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBMZW5ndGhGaW5pc2hSZWFzb25FcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hvaWNlLmZpbmlzaF9yZWFzb24gPT09ICdjb250ZW50X2ZpbHRlcicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IENvbnRlbnRGaWx0ZXJGaW5pc2hSZWFzb25FcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5jaG9pY2UsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcclxuICAgICAgICAgICAgICAgIC4uLmNob2ljZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsczogY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscz8ubWFwKCh0b29sQ2FsbCkgPT4gcGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSkgPz8gW10sXHJcbiAgICAgICAgICAgICAgICBwYXJzZWQ6IGNob2ljZS5tZXNzYWdlLmNvbnRlbnQgJiYgIWNob2ljZS5tZXNzYWdlLnJlZnVzYWwgP1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlUmVzcG9uc2VGb3JtYXQocGFyYW1zLCBjaG9pY2UubWVzc2FnZS5jb250ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4geyAuLi5jb21wbGV0aW9uLCBjaG9pY2VzIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VSZXNwb25zZUZvcm1hdChwYXJhbXMsIGNvbnRlbnQpIHtcclxuICAgIGlmIChwYXJhbXMucmVzcG9uc2VfZm9ybWF0Py50eXBlICE9PSAnanNvbl9zY2hlbWEnKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAocGFyYW1zLnJlc3BvbnNlX2Zvcm1hdD8udHlwZSA9PT0gJ2pzb25fc2NoZW1hJykge1xyXG4gICAgICAgIGlmICgnJHBhcnNlUmF3JyBpbiBwYXJhbXMucmVzcG9uc2VfZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlX2Zvcm1hdCA9IHBhcmFtcy5yZXNwb25zZV9mb3JtYXQ7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZV9mb3JtYXQuJHBhcnNlUmF3KGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkge1xyXG4gICAgY29uc3QgaW5wdXRUb29sID0gcGFyYW1zLnRvb2xzPy5maW5kKChpbnB1dFRvb2wpID0+IGlucHV0VG9vbC5mdW5jdGlvbj8ubmFtZSA9PT0gdG9vbENhbGwuZnVuY3Rpb24ubmFtZSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnRvb2xDYWxsLFxyXG4gICAgICAgIGZ1bmN0aW9uOiB7XHJcbiAgICAgICAgICAgIC4uLnRvb2xDYWxsLmZ1bmN0aW9uLFxyXG4gICAgICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBpc0F1dG9QYXJzYWJsZVRvb2woaW5wdXRUb29sKSA/IGlucHV0VG9vbC4kcGFyc2VSYXcodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzKVxyXG4gICAgICAgICAgICAgICAgOiBpbnB1dFRvb2w/LmZ1bmN0aW9uLnN0cmljdCA/IEpTT04ucGFyc2UodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XHJcbiAgICBpZiAoIXBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlucHV0VG9vbCA9IHBhcmFtcy50b29scz8uZmluZCgoaW5wdXRUb29sKSA9PiBpbnB1dFRvb2wuZnVuY3Rpb24/Lm5hbWUgPT09IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUpO1xyXG4gICAgcmV0dXJuIGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpIHx8IGlucHV0VG9vbD8uZnVuY3Rpb24uc3RyaWN0IHx8IGZhbHNlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSB7XHJcbiAgICBpZiAoaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdChwYXJhbXMucmVzcG9uc2VfZm9ybWF0KSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChwYXJhbXMudG9vbHM/LnNvbWUoKHQpID0+IGlzQXV0b1BhcnNhYmxlVG9vbCh0KSB8fCAodC50eXBlID09PSAnZnVuY3Rpb24nICYmIHQuZnVuY3Rpb24uc3RyaWN0ID09PSB0cnVlKSkgPz8gZmFsc2UpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUlucHV0VG9vbHModG9vbHMpIHtcclxuICAgIGZvciAoY29uc3QgdG9vbCBvZiB0b29scyA/PyBbXSkge1xyXG4gICAgICAgIGlmICh0b29sLnR5cGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBDdXJyZW50bHkgb25seSBcXGBmdW5jdGlvblxcYCB0b29sIHR5cGVzIHN1cHBvcnQgYXV0by1wYXJzaW5nOyBSZWNlaXZlZCBcXGAke3Rvb2wudHlwZX1cXGBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvb2wuZnVuY3Rpb24uc3RyaWN0ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgVGhlIFxcYCR7dG9vbC5mdW5jdGlvbi5uYW1lfVxcYCB0b29sIGlzIG5vdCBtYXJrZWQgd2l0aCBcXGBzdHJpY3Q6IHRydWVcXGAuIE9ubHkgc3RyaWN0IGZ1bmN0aW9uIHRvb2xzIGNhbiBiZSBhdXRvLXBhcnNlZGApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXIubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/pagination.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/pagination.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CursorPage: () => (/* binding */ CursorPage),\n/* harmony export */   Page: () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n/**\r\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\r\n */\r\nclass Page extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\r\n    constructor(client, response, body, options) {\r\n        super(client, response, body, options);\r\n        this.data = body.data || [];\r\n        this.object = body.object;\r\n    }\r\n    getPaginatedItems() {\r\n        return this.data ?? [];\r\n    }\r\n    // @deprecated Please use `nextPageInfo()` instead\r\n    /**\r\n     * This page represents a response that isn't actually paginated at the API level\r\n     * so there will never be any next page params.\r\n     */\r\n    nextPageParams() {\r\n        return null;\r\n    }\r\n    nextPageInfo() {\r\n        return null;\r\n    }\r\n}\r\nclass CursorPage extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\r\n    constructor(client, response, body, options) {\r\n        super(client, response, body, options);\r\n        this.data = body.data || [];\r\n    }\r\n    getPaginatedItems() {\r\n        return this.data ?? [];\r\n    }\r\n    // @deprecated Please use `nextPageInfo()` instead\r\n    nextPageParams() {\r\n        const info = this.nextPageInfo();\r\n        if (!info)\r\n            return null;\r\n        if ('params' in info)\r\n            return info.params;\r\n        const params = Object.fromEntries(info.url.searchParams);\r\n        if (!Object.keys(params).length)\r\n            return null;\r\n        return params;\r\n    }\r\n    nextPageInfo() {\r\n        const data = this.getPaginatedItems();\r\n        if (!data.length) {\r\n            return null;\r\n        }\r\n        const id = data[data.length - 1]?.id;\r\n        if (!id) {\r\n            return null;\r\n        }\r\n        return { params: { after: id } };\r\n    }\r\n}\r\n//# sourceMappingURL=pagination.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3BhZ2luYXRpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQzBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNPLG1CQUFtQixtREFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUJBQXlCLG1EQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9wYWdpbmF0aW9uLm1qcz9mM2ZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFic3RyYWN0UGFnZSB9IGZyb20gXCIuL2NvcmUubWpzXCI7XHJcbi8qKlxyXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gYm9keS5vYmplY3Q7XHJcbiAgICB9XHJcbiAgICBnZXRQYWdpbmF0ZWRJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhID8/IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBwYWdlIHJlcHJlc2VudHMgYSByZXNwb25zZSB0aGF0IGlzbid0IGFjdHVhbGx5IHBhZ2luYXRlZCBhdCB0aGUgQVBJIGxldmVsXHJcbiAgICAgKiBzbyB0aGVyZSB3aWxsIG5ldmVyIGJlIGFueSBuZXh0IHBhZ2UgcGFyYW1zLlxyXG4gICAgICovXHJcbiAgICBuZXh0UGFnZVBhcmFtcygpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIG5leHRQYWdlSW5mbygpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgQ3Vyc29yUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xyXG4gICAgfVxyXG4gICAgZ2V0UGFnaW5hdGVkSXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA/PyBbXTtcclxuICAgIH1cclxuICAgIC8vIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYG5leHRQYWdlSW5mbygpYCBpbnN0ZWFkXHJcbiAgICBuZXh0UGFnZVBhcmFtcygpIHtcclxuICAgICAgICBjb25zdCBpbmZvID0gdGhpcy5uZXh0UGFnZUluZm8oKTtcclxuICAgICAgICBpZiAoIWluZm8pXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmICgncGFyYW1zJyBpbiBpbmZvKVxyXG4gICAgICAgICAgICByZXR1cm4gaW5mby5wYXJhbXM7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKGluZm8udXJsLnNlYXJjaFBhcmFtcyk7XHJcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgIH1cclxuICAgIG5leHRQYWdlSW5mbygpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRQYWdpbmF0ZWRJdGVtcygpO1xyXG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlkID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdPy5pZDtcclxuICAgICAgICBpZiAoIWlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBwYXJhbXM6IHsgYWZ0ZXI6IGlkIH0gfTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdpbmF0aW9uLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/pagination.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resource.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/resource.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\nclass APIResource {\r\n    constructor(client) {\r\n        this._client = client;\r\n    }\r\n}\r\n//# sourceMappingURL=resource.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlLm1qcz9jMTE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcclxuICAgICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb3VyY2UubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resource.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/audio.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/audio/audio.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _speech_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./speech.mjs */ \"(rsc)/./node_modules/openai/resources/audio/speech.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./translations.mjs */ \"(rsc)/./node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Audio extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.transcriptions = new _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions(this._client);\r\n        this.translations = new _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations(this._client);\r\n        this.speech = new _speech_mjs__WEBPACK_IMPORTED_MODULE_3__.Speech(this._client);\r\n    }\r\n}\r\n(function (Audio) {\r\n    Audio.Transcriptions = _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions;\r\n    Audio.Translations = _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations;\r\n    Audio.Speech = _speech_mjs__WEBPACK_IMPORTED_MODULE_3__.Speech;\r\n})(Audio || (Audio = {}));\r\n//# sourceMappingURL=audio.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNpRDtBQUNQO0FBQ2dCO0FBQ0o7QUFDL0Msb0JBQW9CLHNEQUFXO0FBQ3RDO0FBQ0E7QUFDQSxrQ0FBa0MsK0RBQWdDO0FBQ2xFLGdDQUFnQywyREFBNEI7QUFDNUQsMEJBQTBCLCtDQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsK0RBQWdDO0FBQzNELHlCQUF5QiwyREFBNEI7QUFDckQsbUJBQW1CLCtDQUFnQjtBQUNuQyxDQUFDLHNCQUFzQjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcz84ZGViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBTcGVlY2hBUEkgZnJvbSBcIi4vc3BlZWNoLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uc0FQSSBmcm9tIFwiLi90cmFuc2NyaXB0aW9ucy5tanNcIjtcclxuaW1wb3J0ICogYXMgVHJhbnNsYXRpb25zQVBJIGZyb20gXCIuL3RyYW5zbGF0aW9ucy5tanNcIjtcclxuZXhwb3J0IGNsYXNzIEF1ZGlvIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnRyYW5zY3JpcHRpb25zID0gbmV3IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zKHRoaXMuX2NsaWVudCk7XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbnMgPSBuZXcgVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucyh0aGlzLl9jbGllbnQpO1xyXG4gICAgICAgIHRoaXMuc3BlZWNoID0gbmV3IFNwZWVjaEFQSS5TcGVlY2godGhpcy5fY2xpZW50KTtcclxuICAgIH1cclxufVxyXG4oZnVuY3Rpb24gKEF1ZGlvKSB7XHJcbiAgICBBdWRpby5UcmFuc2NyaXB0aW9ucyA9IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zO1xyXG4gICAgQXVkaW8uVHJhbnNsYXRpb25zID0gVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucztcclxuICAgIEF1ZGlvLlNwZWVjaCA9IFNwZWVjaEFQSS5TcGVlY2g7XHJcbn0pKEF1ZGlvIHx8IChBdWRpbyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1ZGlvLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/speech.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/resources/audio/speech.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: () => (/* binding */ Speech)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nclass Speech extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Generates audio from the input text.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/audio/speech', { body, ...options, __binaryResponse: true });\r\n    }\r\n}\r\n(function (Speech) {\r\n})(Speech || (Speech = {}));\r\n//# sourceMappingURL=speech.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDaUQ7QUFDMUMscUJBQXFCLHNEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDBDQUEwQztBQUM5RjtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3NwZWVjaC5tanM/ZmFkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuZXhwb3J0IGNsYXNzIFNwZWVjaCBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGF1ZGlvIGZyb20gdGhlIGlucHV0IHRleHQuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vc3BlZWNoJywgeyBib2R5LCAuLi5vcHRpb25zLCBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlIH0pO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoU3BlZWNoKSB7XHJcbn0pKFNwZWVjaCB8fCAoU3BlZWNoID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BlZWNoLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/speech.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/audio/transcriptions.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Transcriptions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Transcribes audio into the input language.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/audio/transcriptions', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({ body, ...options }));\r\n    }\r\n}\r\n(function (Transcriptions) {\r\n})(Transcriptions || (Transcriptions = {}));\r\n//# sourceMappingURL=transcriptions.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDaUQ7QUFDVjtBQUNoQyw2QkFBNkIsc0RBQVc7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsa0VBQWdDLEdBQUcsa0JBQWtCO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vdHJhbnNjcmlwdGlvbnMubWpzPzc4OTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBUcmFuc2NyaXB0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vdHJhbnNjcmlwdGlvbnMnLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoVHJhbnNjcmlwdGlvbnMpIHtcclxufSkoVHJhbnNjcmlwdGlvbnMgfHwgKFRyYW5zY3JpcHRpb25zID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNjcmlwdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/translations.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/resources/audio/translations.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Translations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Translates audio into English.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/audio/translations', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({ body, ...options }));\r\n    }\r\n}\r\n(function (Translations) {\r\n})(Translations || (Translations = {}));\r\n//# sourceMappingURL=translations.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ2lEO0FBQ1Y7QUFDaEMsMkJBQTJCLHNEQUFXO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGtFQUFnQyxHQUFHLGtCQUFrQjtBQUM3RztBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanM/Y2UyMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vLi4vY29yZS5tanNcIjtcclxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNsYXRlcyBhdWRpbyBpbnRvIEVuZ2xpc2guXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vdHJhbnNsYXRpb25zJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcclxuICAgIH1cclxufVxyXG4oZnVuY3Rpb24gKFRyYW5zbGF0aW9ucykge1xyXG59KShUcmFuc2xhdGlvbnMgfHwgKFRyYW5zbGF0aW9ucyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zbGF0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/batches.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/resources/batches.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches),\n/* harmony export */   BatchesPage: () => (/* binding */ BatchesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _batches_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./batches.mjs */ \"(rsc)/./node_modules/openai/resources/batches.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Batches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Creates and executes a batch from an uploaded file of requests\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/batches', { body, ...options });\r\n    }\r\n    /**\r\n     * Retrieves a batch.\r\n     */\r\n    retrieve(batchId, options) {\r\n        return this._client.get(`/batches/${batchId}`, options);\r\n    }\r\n    list(query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.list({}, query);\r\n        }\r\n        return this._client.getAPIList('/batches', BatchesPage, { query, ...options });\r\n    }\r\n    /**\r\n     * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\r\n     * 10 minutes, before changing to `cancelled`, where it will have partial results\r\n     * (if any) available in the output file.\r\n     */\r\n    cancel(batchId, options) {\r\n        return this._client.post(`/batches/${batchId}/cancel`, options);\r\n    }\r\n}\r\nclass BatchesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\r\n}\r\n(function (Batches) {\r\n    Batches.BatchesPage = _batches_mjs__WEBPACK_IMPORTED_MODULE_3__.BatchesPage;\r\n})(Batches || (Batches = {}));\r\n//# sourceMappingURL=batches.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iYXRjaGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUM4QztBQUNDO0FBQ0g7QUFDRztBQUN4QyxzQkFBc0Isc0RBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0Msa0JBQWtCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBLG1CQUFtQjtBQUNuQixZQUFZLDJEQUFnQjtBQUM1QiwrQkFBK0I7QUFDL0I7QUFDQSxrRUFBa0UsbUJBQW1CO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFFBQVE7QUFDckQ7QUFDQTtBQUNPLDBCQUEwQix1REFBVTtBQUMzQztBQUNBO0FBQ0EsMEJBQTBCLHFEQUFzQjtBQUNoRCxDQUFDLDBCQUEwQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JhdGNoZXMubWpzPzhjYmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS5tanNcIjtcclxuaW1wb3J0ICogYXMgQmF0Y2hlc0FQSSBmcm9tIFwiLi9iYXRjaGVzLm1qc1wiO1xyXG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uL3BhZ2luYXRpb24ubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBCYXRjaGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuZCBleGVjdXRlcyBhIGJhdGNoIGZyb20gYW4gdXBsb2FkZWQgZmlsZSBvZiByZXF1ZXN0c1xyXG4gICAgICovXHJcbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2JhdGNoZXMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyBhIGJhdGNoLlxyXG4gICAgICovXHJcbiAgICByZXRyaWV2ZShiYXRjaElkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9iYXRjaGVzLyR7YmF0Y2hJZH1gLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2JhdGNoZXMnLCBCYXRjaGVzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FuY2VscyBhbiBpbi1wcm9ncmVzcyBiYXRjaC4gVGhlIGJhdGNoIHdpbGwgYmUgaW4gc3RhdHVzIGBjYW5jZWxsaW5nYCBmb3IgdXAgdG9cclxuICAgICAqIDEwIG1pbnV0ZXMsIGJlZm9yZSBjaGFuZ2luZyB0byBgY2FuY2VsbGVkYCwgd2hlcmUgaXQgd2lsbCBoYXZlIHBhcnRpYWwgcmVzdWx0c1xyXG4gICAgICogKGlmIGFueSkgYXZhaWxhYmxlIGluIHRoZSBvdXRwdXQgZmlsZS5cclxuICAgICAqL1xyXG4gICAgY2FuY2VsKGJhdGNoSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9iYXRjaGVzLyR7YmF0Y2hJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEJhdGNoZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XHJcbn1cclxuKGZ1bmN0aW9uIChCYXRjaGVzKSB7XHJcbiAgICBCYXRjaGVzLkJhdGNoZXNQYWdlID0gQmF0Y2hlc0FQSS5CYXRjaGVzUGFnZTtcclxufSkoQmF0Y2hlcyB8fCAoQmF0Y2hlcyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhdGNoZXMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/assistants.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assistants: () => (/* binding */ Assistants),\n/* harmony export */   AssistantsPage: () => (/* binding */ AssistantsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assistants.mjs */ \"(rsc)/./node_modules/openai/resources/beta/assistants.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Assistants extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Create an assistant with a model and instructions.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/assistants', {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves an assistant.\r\n     */\r\n    retrieve(assistantId, options) {\r\n        return this._client.get(`/assistants/${assistantId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Modifies an assistant.\r\n     */\r\n    update(assistantId, body, options) {\r\n        return this._client.post(`/assistants/${assistantId}`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    list(query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.list({}, query);\r\n        }\r\n        return this._client.getAPIList('/assistants', AssistantsPage, {\r\n            query,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Delete an assistant.\r\n     */\r\n    del(assistantId, options) {\r\n        return this._client.delete(`/assistants/${assistantId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n}\r\nclass AssistantsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\r\n}\r\n(function (Assistants) {\r\n    Assistants.AssistantsPage = _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantsPage;\r\n})(Assistants || (Assistants = {}));\r\n//# sourceMappingURL=assistants.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ2lEO0FBQ0M7QUFDQTtBQUNBO0FBQzNDLHlCQUF5QixzREFBVztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsWUFBWTtBQUMzRDtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsWUFBWTtBQUM1RDtBQUNBO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQSxtQkFBbUI7QUFDbkIsWUFBWSwyREFBZ0I7QUFDNUIsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxZQUFZO0FBQzlEO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQTtBQUNPLDZCQUE2Qix1REFBVTtBQUM5QztBQUNBO0FBQ0EsZ0NBQWdDLDJEQUE0QjtBQUM1RCxDQUFDLGdDQUFnQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy5tanM/OWNhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi9jb3JlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBBc3Npc3RhbnRzQVBJIGZyb20gXCIuL2Fzc2lzdGFudHMubWpzXCI7XHJcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vcGFnaW5hdGlvbi5tanNcIjtcclxuZXhwb3J0IGNsYXNzIEFzc2lzdGFudHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhbiBhc3Npc3RhbnQgd2l0aCBhIG1vZGVsIGFuZCBpbnN0cnVjdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXNzaXN0YW50cycsIHtcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIGFuIGFzc2lzdGFudC5cclxuICAgICAqL1xyXG4gICAgcmV0cmlldmUoYXNzaXN0YW50SWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH1gLCB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmaWVzIGFuIGFzc2lzdGFudC5cclxuICAgICAqL1xyXG4gICAgdXBkYXRlKGFzc2lzdGFudElkLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfWAsIHtcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2Fzc2lzdGFudHMnLCBBc3Npc3RhbnRzUGFnZSwge1xyXG4gICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGFuIGFzc2lzdGFudC5cclxuICAgICAqL1xyXG4gICAgZGVsKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xyXG59XHJcbihmdW5jdGlvbiAoQXNzaXN0YW50cykge1xyXG4gICAgQXNzaXN0YW50cy5Bc3Npc3RhbnRzUGFnZSA9IEFzc2lzdGFudHNBUEkuQXNzaXN0YW50c1BhZ2U7XHJcbn0pKEFzc2lzdGFudHMgfHwgKEFzc2lzdGFudHMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3Npc3RhbnRzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/assistants.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/beta.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/beta/beta.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assistants.mjs */ \"(rsc)/./node_modules/openai/resources/beta/assistants.mjs\");\n/* harmony import */ var _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat/chat.mjs */ \"(rsc)/./node_modules/openai/resources/beta/chat/chat.mjs\");\n/* harmony import */ var _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./threads/threads.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs\");\n/* harmony import */ var _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vector-stores/vector-stores.mjs */ \"(rsc)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\nclass Beta extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.vectorStores = new _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_1__.VectorStores(this._client);\r\n        this.chat = new _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_2__.Chat(this._client);\r\n        this.assistants = new _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.Assistants(this._client);\r\n        this.threads = new _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_4__.Threads(this._client);\r\n    }\r\n}\r\n(function (Beta) {\r\n    Beta.VectorStores = _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_1__.VectorStores;\r\n    Beta.VectorStoresPage = _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_1__.VectorStoresPage;\r\n    Beta.Chat = _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_2__.Chat;\r\n    Beta.Assistants = _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.Assistants;\r\n    Beta.AssistantsPage = _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantsPage;\r\n    Beta.Threads = _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_4__.Threads;\r\n})(Beta || (Beta = {}));\r\n//# sourceMappingURL=beta.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ2lEO0FBQ0M7QUFDUDtBQUNTO0FBQ2lCO0FBQzlELG1CQUFtQixzREFBVztBQUNyQztBQUNBO0FBQ0EsZ0NBQWdDLDBFQUE0QjtBQUM1RCx3QkFBd0IsZ0RBQVk7QUFDcEMsOEJBQThCLHVEQUF3QjtBQUN0RCwyQkFBMkIseURBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwwRUFBNEI7QUFDcEQsNEJBQTRCLDhFQUFnQztBQUM1RCxnQkFBZ0IsZ0RBQVk7QUFDNUIsc0JBQXNCLHVEQUF3QjtBQUM5QywwQkFBMEIsMkRBQTRCO0FBQ3RELG1CQUFtQix5REFBa0I7QUFDckMsQ0FBQyxvQkFBb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzPzNhNmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCAqIGFzIEFzc2lzdGFudHNBUEkgZnJvbSBcIi4vYXNzaXN0YW50cy5tanNcIjtcclxuaW1wb3J0ICogYXMgQ2hhdEFQSSBmcm9tIFwiLi9jaGF0L2NoYXQubWpzXCI7XHJcbmltcG9ydCAqIGFzIFRocmVhZHNBUEkgZnJvbSBcIi4vdGhyZWFkcy90aHJlYWRzLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBWZWN0b3JTdG9yZXNBUEkgZnJvbSBcIi4vdmVjdG9yLXN0b3Jlcy92ZWN0b3Itc3RvcmVzLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgQmV0YSBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZXMgPSBuZXcgVmVjdG9yU3RvcmVzQVBJLlZlY3RvclN0b3Jlcyh0aGlzLl9jbGllbnQpO1xyXG4gICAgICAgIHRoaXMuY2hhdCA9IG5ldyBDaGF0QVBJLkNoYXQodGhpcy5fY2xpZW50KTtcclxuICAgICAgICB0aGlzLmFzc2lzdGFudHMgPSBuZXcgQXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRzKHRoaXMuX2NsaWVudCk7XHJcbiAgICAgICAgdGhpcy50aHJlYWRzID0gbmV3IFRocmVhZHNBUEkuVGhyZWFkcyh0aGlzLl9jbGllbnQpO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoQmV0YSkge1xyXG4gICAgQmV0YS5WZWN0b3JTdG9yZXMgPSBWZWN0b3JTdG9yZXNBUEkuVmVjdG9yU3RvcmVzO1xyXG4gICAgQmV0YS5WZWN0b3JTdG9yZXNQYWdlID0gVmVjdG9yU3RvcmVzQVBJLlZlY3RvclN0b3Jlc1BhZ2U7XHJcbiAgICBCZXRhLkNoYXQgPSBDaGF0QVBJLkNoYXQ7XHJcbiAgICBCZXRhLkFzc2lzdGFudHMgPSBBc3Npc3RhbnRzQVBJLkFzc2lzdGFudHM7XHJcbiAgICBCZXRhLkFzc2lzdGFudHNQYWdlID0gQXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRzUGFnZTtcclxuICAgIEJldGEuVGhyZWFkcyA9IFRocmVhZHNBUEkuVGhyZWFkcztcclxufSkoQmV0YSB8fCAoQmV0YSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJldGEubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/chat/chat.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/chat.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/openai/resources/beta/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\r\n    }\r\n}\r\n(function (Chat) {\r\n    Chat.Completions = _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions;\r\n})(Chat || (Chat = {}));\r\n//# sourceMappingURL=chat.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY2hhdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDb0Q7QUFDQTtBQUM3QyxtQkFBbUIsc0RBQVc7QUFDckM7QUFDQTtBQUNBLCtCQUErQix5REFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlEQUEwQjtBQUNqRCxDQUFDLG9CQUFvQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jaGF0Lm1qcz9iZjI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBDb21wbGV0aW9uc0FQSSBmcm9tIFwiLi9jb21wbGV0aW9ucy5tanNcIjtcclxuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuY29tcGxldGlvbnMgPSBuZXcgQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnModGhpcy5fY2xpZW50KTtcclxuICAgIH1cclxufVxyXG4oZnVuY3Rpb24gKENoYXQpIHtcclxuICAgIENoYXQuQ29tcGxldGlvbnMgPSBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucztcclxufSkoQ2hhdCB8fCAoQ2hhdCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXQubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/chat/completions.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/completions.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* reexport safe */ _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner),\n/* harmony export */   ChatCompletionStream: () => (/* reexport safe */ _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionStream),\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* reexport safe */ _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner),\n/* harmony export */   Completions: () => (/* binding */ Completions),\n/* harmony export */   ParsingFunction: () => (/* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.ParsingFunction),\n/* harmony export */   ParsingToolFunction: () => (/* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.ParsingToolFunction)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/ChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/ChatCompletionStreamingRunner.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\");\n/* harmony import */ var _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/RunnableFunction.mjs */ \"(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/ChatCompletionStream.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_4__.APIResource {\r\n    async parse(body, options) {\r\n        (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.validateInputTools)(body.tools);\r\n        const completion = await this._client.chat.completions.create(body, {\r\n            ...options,\r\n            headers: {\r\n                ...options?.headers,\r\n                'X-Stainless-Helper-Method': 'beta.chat.completions.parse',\r\n            },\r\n        });\r\n        return (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.parseChatCompletion)(completion, body);\r\n    }\r\n    runFunctions(body, options) {\r\n        if (body.stream) {\r\n            return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner.runFunctions(this._client, body, options);\r\n        }\r\n        return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner.runFunctions(this._client, body, options);\r\n    }\r\n    runTools(body, options) {\r\n        if (body.stream) {\r\n            return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner.runTools(this._client, body, options);\r\n        }\r\n        return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner.runTools(this._client, body, options);\r\n    }\r\n    /**\r\n     * Creates a chat completion stream\r\n     */\r\n    stream(body, options) {\r\n        return _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionStream.createChatCompletion(this._client, body, options);\r\n    }\r\n}\r\n//# sourceMappingURL=completions.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY29tcGxldGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ29EO0FBQ3lCO0FBQ0E7QUFDbUI7QUFDQTtBQUNOO0FBQ2I7QUFDSztBQUNMO0FBQ3RFLDBCQUEwQixzREFBVztBQUM1QztBQUNBLFFBQVEsbUVBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULGVBQWUsb0VBQW1CO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpR0FBNkI7QUFDaEQ7QUFDQSxlQUFlLCtFQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUdBQTZCO0FBQ2hEO0FBQ0EsZUFBZSwrRUFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0VBQW9CO0FBQ25DO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jb21wbGV0aW9ucy5tanM/YjgyOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25SdW5uZXIgfSBmcm9tIFwiLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLm1qc1wiO1xyXG5leHBvcnQgeyBDaGF0Q29tcGxldGlvblJ1bm5lciB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25SdW5uZXIubWpzXCI7XHJcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzXCI7XHJcbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzXCI7XHJcbmV4cG9ydCB7IFBhcnNpbmdGdW5jdGlvbiwgUGFyc2luZ1Rvb2xGdW5jdGlvbiwgfSBmcm9tIFwiLi4vLi4vLi4vbGliL1J1bm5hYmxlRnVuY3Rpb24ubWpzXCI7XHJcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbS5tanNcIjtcclxuaW1wb3J0IHsgcGFyc2VDaGF0Q29tcGxldGlvbiwgdmFsaWRhdGVJbnB1dFRvb2xzIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9wYXJzZXIubWpzXCI7XHJcbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbS5tanNcIjtcclxuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgYXN5bmMgcGFyc2UoYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhbGlkYXRlSW5wdXRUb29scyhib2R5LnRvb2xzKTtcclxuICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgdGhpcy5fY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKGJvZHksIHtcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVycyxcclxuICAgICAgICAgICAgICAgICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ2JldGEuY2hhdC5jb21wbGV0aW9ucy5wYXJzZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlQ2hhdENvbXBsZXRpb24oY29tcGxldGlvbiwgYm9keSk7XHJcbiAgICB9XHJcbiAgICBydW5GdW5jdGlvbnMoYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChib2R5LnN0cmVhbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIucnVuRnVuY3Rpb25zKHRoaXMuX2NsaWVudCwgYm9keSwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5GdW5jdGlvbnModGhpcy5fY2xpZW50LCBib2R5LCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIHJ1blRvb2xzKGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoYm9keS5zdHJlYW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLnJ1blRvb2xzKHRoaXMuX2NsaWVudCwgYm9keSwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgY2hhdCBjb21wbGV0aW9uIHN0cmVhbVxyXG4gICAgICovXHJcbiAgICBzdHJlYW0oYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblN0cmVhbS5jcmVhdGVDaGF0Q29tcGxldGlvbih0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/chat/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages),\n/* harmony export */   MessagesPage: () => (/* binding */ MessagesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Messages extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Create a message.\r\n     */\r\n    create(threadId, body, options) {\r\n        return this._client.post(`/threads/${threadId}/messages`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a message.\r\n     */\r\n    retrieve(threadId, messageId, options) {\r\n        return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Modifies a message.\r\n     */\r\n    update(threadId, messageId, body, options) {\r\n        return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    list(threadId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.list(threadId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {\r\n            query,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a message.\r\n     */\r\n    del(threadId, messageId, options) {\r\n        return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n}\r\nclass MessagesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\r\n}\r\n(function (Messages) {\r\n    Messages.MessagesPage = _messages_mjs__WEBPACK_IMPORTED_MODULE_3__.MessagesPage;\r\n})(Messages || (Messages = {}));\r\n//# sourceMappingURL=messages.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ29EO0FBQ0M7QUFDUDtBQUNPO0FBQzlDLHVCQUF1QixzREFBVztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFNBQVMsWUFBWSxVQUFVO0FBQzNFO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxTQUFTLFlBQVksVUFBVTtBQUM1RTtBQUNBO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQSw2QkFBNkI7QUFDN0IsWUFBWSwyREFBZ0I7QUFDNUIseUNBQXlDO0FBQ3pDO0FBQ0EsbURBQW1ELFNBQVM7QUFDNUQ7QUFDQTtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsU0FBUyxZQUFZLFVBQVU7QUFDOUU7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ08sMkJBQTJCLHVEQUFVO0FBQzVDO0FBQ0E7QUFDQSw0QkFBNEIsdURBQXdCO0FBQ3BELENBQUMsNEJBQTRCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzLm1qcz8yZGNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XHJcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gXCIuL21lc3NhZ2VzLm1qc1wiO1xyXG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlc2AsIHtcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmUgYSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICByZXRyaWV2ZSh0aHJlYWRJZCwgbWVzc2FnZUlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfWAsIHtcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZpZXMgYSBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGUodGhyZWFkSWQsIG1lc3NhZ2VJZCwgYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbGlzdCh0aHJlYWRJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCB7fSwgcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzYCwgTWVzc2FnZXNQYWdlLCB7XHJcbiAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGVzIGEgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZGVsKHRocmVhZElkLCBtZXNzYWdlSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcclxufVxyXG4oZnVuY3Rpb24gKE1lc3NhZ2VzKSB7XHJcbiAgICBNZXNzYWdlcy5NZXNzYWdlc1BhZ2UgPSBNZXNzYWdlc0FQSS5NZXNzYWdlc1BhZ2U7XHJcbn0pKE1lc3NhZ2VzIHx8IChNZXNzYWdlcyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/runs.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: () => (/* binding */ Runs),\n/* harmony export */   RunsPage: () => (/* binding */ RunsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/AssistantStream.mjs */ \"(rsc)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _runs_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./runs.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n/* harmony import */ var _steps_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./steps.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Runs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.steps = new _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.Steps(this._client);\r\n    }\r\n    create(threadId, body, options) {\r\n        return this._client.post(`/threads/${threadId}/runs`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n            stream: body.stream ?? false,\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a run.\r\n     */\r\n    retrieve(threadId, runId, options) {\r\n        return this._client.get(`/threads/${threadId}/runs/${runId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Modifies a run.\r\n     */\r\n    update(threadId, runId, body, options) {\r\n        return this._client.post(`/threads/${threadId}/runs/${runId}`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    list(threadId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\r\n            return this.list(threadId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\r\n            query,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Cancels a run that is `in_progress`.\r\n     */\r\n    cancel(threadId, runId, options) {\r\n        return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * A helper to create a run an poll for a terminal state. More information on Run\r\n     * lifecycles can be found here:\r\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\r\n     */\r\n    async createAndPoll(threadId, body, options) {\r\n        const run = await this.create(threadId, body, options);\r\n        return await this.poll(threadId, run.id, options);\r\n    }\r\n    /**\r\n     * Create a Run stream\r\n     *\r\n     * @deprecated use `stream` instead\r\n     */\r\n    createAndStream(threadId, body, options) {\r\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\r\n    }\r\n    /**\r\n     * A helper to poll a run status until it reaches a terminal state. More\r\n     * information on Run lifecycles can be found here:\r\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\r\n     */\r\n    async poll(threadId, runId, options) {\r\n        const headers = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\r\n        if (options?.pollIntervalMs) {\r\n            headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\r\n        }\r\n        while (true) {\r\n            const { data: run, response } = await this.retrieve(threadId, runId, {\r\n                ...options,\r\n                headers: { ...options?.headers, ...headers },\r\n            }).withResponse();\r\n            switch (run.status) {\r\n                //If we are in any sort of intermediate state we poll\r\n                case 'queued':\r\n                case 'in_progress':\r\n                case 'cancelling':\r\n                    let sleepInterval = 5000;\r\n                    if (options?.pollIntervalMs) {\r\n                        sleepInterval = options.pollIntervalMs;\r\n                    }\r\n                    else {\r\n                        const headerInterval = response.headers.get('openai-poll-after-ms');\r\n                        if (headerInterval) {\r\n                            const headerIntervalMs = parseInt(headerInterval);\r\n                            if (!isNaN(headerIntervalMs)) {\r\n                                sleepInterval = headerIntervalMs;\r\n                            }\r\n                        }\r\n                    }\r\n                    await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(sleepInterval);\r\n                    break;\r\n                //We return the run in any terminal state.\r\n                case 'requires_action':\r\n                case 'incomplete':\r\n                case 'cancelled':\r\n                case 'completed':\r\n                case 'failed':\r\n                case 'expired':\r\n                    return run;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Create a Run stream\r\n     */\r\n    stream(threadId, body, options) {\r\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\r\n    }\r\n    submitToolOutputs(threadId, runId, body, options) {\r\n        return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n            stream: body.stream ?? false,\r\n        });\r\n    }\r\n    /**\r\n     * A helper to submit a tool output to a run and poll for a terminal run state.\r\n     * More information on Run lifecycles can be found here:\r\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\r\n     */\r\n    async submitToolOutputsAndPoll(threadId, runId, body, options) {\r\n        const run = await this.submitToolOutputs(threadId, runId, body, options);\r\n        return await this.poll(threadId, run.id, options);\r\n    }\r\n    /**\r\n     * Submit the tool outputs from a previous run and stream the run to a terminal\r\n     * state. More information on Run lifecycles can be found here:\r\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\r\n     */\r\n    submitToolOutputsStream(threadId, runId, body, options) {\r\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);\r\n    }\r\n}\r\nclass RunsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {\r\n}\r\n(function (Runs) {\r\n    Runs.RunsPage = _runs_mjs__WEBPACK_IMPORTED_MODULE_5__.RunsPage;\r\n    Runs.Steps = _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.Steps;\r\n    Runs.RunStepsPage = _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.RunStepsPage;\r\n})(Runs || (Runs = {}));\r\n//# sourceMappingURL=runs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9ydW5zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ3VEO0FBQ0M7QUFDYztBQUN6QjtBQUNQO0FBQ0U7QUFDZ0I7QUFDakQsbUJBQW1CLHNEQUFXO0FBQ3JDO0FBQ0E7QUFDQSx5QkFBeUIsNkNBQWM7QUFDdkM7QUFDQTtBQUNBLDZDQUE2QyxTQUFTO0FBQ3REO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUyxRQUFRLE1BQU07QUFDbkU7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVMsUUFBUSxNQUFNO0FBQ3BFO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBLDZCQUE2QjtBQUM3QixZQUFZLDJEQUFnQjtBQUM1Qix5Q0FBeUM7QUFDekM7QUFDQSxtREFBbUQsU0FBUztBQUM1RDtBQUNBO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxTQUFTLFFBQVEsTUFBTTtBQUNwRTtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxRUFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQSwyQkFBMkIsaUNBQWlDO0FBQzVELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZ0RBQUs7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFFQUFlO0FBQzlCO0FBQ0E7QUFDQSw2Q0FBNkMsU0FBUyxRQUFRLE1BQU07QUFDcEU7QUFDQTtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFFQUFlO0FBQzlCO0FBQ0E7QUFDTyx1QkFBdUIsdURBQVU7QUFDeEM7QUFDQTtBQUNBLG9CQUFvQiwrQ0FBZ0I7QUFDcEMsaUJBQWlCLDZDQUFjO0FBQy9CLHdCQUF3QixvREFBcUI7QUFDN0MsQ0FBQyxvQkFBb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9ydW5zLm1qcz8wMTMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvcmUubWpzXCI7XHJcbmltcG9ydCB7IEFzc2lzdGFudFN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi8uLi9saWIvQXNzaXN0YW50U3RyZWFtLm1qc1wiO1xyXG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb3JlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBSdW5zQVBJIGZyb20gXCIuL3J1bnMubWpzXCI7XHJcbmltcG9ydCAqIGFzIFN0ZXBzQVBJIGZyb20gXCIuL3N0ZXBzLm1qc1wiO1xyXG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBSdW5zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnN0ZXBzID0gbmV3IFN0ZXBzQVBJLlN0ZXBzKHRoaXMuX2NsaWVudCk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUodGhyZWFkSWQsIGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnNgLCB7XHJcbiAgICAgICAgICAgIGJvZHksXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgICAgIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyBhIHJ1bi5cclxuICAgICAqL1xyXG4gICAgcmV0cmlldmUodGhyZWFkSWQsIHJ1bklkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH1gLCB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmaWVzIGEgcnVuLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGUodGhyZWFkSWQsIHJ1bklkLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9YCwge1xyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbGlzdCh0aHJlYWRJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCB7fSwgcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnNgLCBSdW5zUGFnZSwge1xyXG4gICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FuY2VscyBhIHJ1biB0aGF0IGlzIGBpbl9wcm9ncmVzc2AuXHJcbiAgICAgKi9cclxuICAgIGNhbmNlbCh0aHJlYWRJZCwgcnVuSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vY2FuY2VsYCwge1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGhlbHBlciB0byBjcmVhdGUgYSBydW4gYW4gcG9sbCBmb3IgYSB0ZXJtaW5hbCBzdGF0ZS4gTW9yZSBpbmZvcm1hdGlvbiBvbiBSdW5cclxuICAgICAqIGxpZmVjeWNsZXMgY2FuIGJlIGZvdW5kIGhlcmU6XHJcbiAgICAgKiBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hc3Npc3RhbnRzL2hvdy1pdC13b3Jrcy9ydW5zLWFuZC1ydW4tc3RlcHNcclxuICAgICAqL1xyXG4gICAgYXN5bmMgY3JlYXRlQW5kUG9sbCh0aHJlYWRJZCwgYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHJ1biA9IGF3YWl0IHRoaXMuY3JlYXRlKHRocmVhZElkLCBib2R5LCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb2xsKHRocmVhZElkLCBydW4uaWQsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBSdW4gc3RyZWFtXHJcbiAgICAgKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGBzdHJlYW1gIGluc3RlYWRcclxuICAgICAqL1xyXG4gICAgY3JlYXRlQW5kU3RyZWFtKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIEFzc2lzdGFudFN0cmVhbS5jcmVhdGVBc3Npc3RhbnRTdHJlYW0odGhyZWFkSWQsIHRoaXMuX2NsaWVudC5iZXRhLnRocmVhZHMucnVucywgYm9keSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgaGVscGVyIHRvIHBvbGwgYSBydW4gc3RhdHVzIHVudGlsIGl0IHJlYWNoZXMgYSB0ZXJtaW5hbCBzdGF0ZS4gTW9yZVxyXG4gICAgICogaW5mb3JtYXRpb24gb24gUnVuIGxpZmVjeWNsZXMgY2FuIGJlIGZvdW5kIGhlcmU6XHJcbiAgICAgKiBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hc3Npc3RhbnRzL2hvdy1pdC13b3Jrcy9ydW5zLWFuZC1ydW4tc3RlcHNcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcG9sbCh0aHJlYWRJZCwgcnVuSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0geyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtUG9sbC1IZWxwZXInOiAndHJ1ZScgfTtcclxuICAgICAgICBpZiAob3B0aW9ucz8ucG9sbEludGVydmFsTXMpIHtcclxuICAgICAgICAgICAgaGVhZGVyc1snWC1TdGFpbmxlc3MtQ3VzdG9tLVBvbGwtSW50ZXJ2YWwnXSA9IG9wdGlvbnMucG9sbEludGVydmFsTXMudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBydW4sIHJlc3BvbnNlIH0gPSBhd2FpdCB0aGlzLnJldHJpZXZlKHRocmVhZElkLCBydW5JZCwge1xyXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgLi4uaGVhZGVycyB9LFxyXG4gICAgICAgICAgICB9KS53aXRoUmVzcG9uc2UoKTtcclxuICAgICAgICAgICAgc3dpdGNoIChydW4uc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAvL0lmIHdlIGFyZSBpbiBhbnkgc29ydCBvZiBpbnRlcm1lZGlhdGUgc3RhdGUgd2UgcG9sbFxyXG4gICAgICAgICAgICAgICAgY2FzZSAncXVldWVkJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2luX3Byb2dyZXNzJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbGxpbmcnOlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzbGVlcEludGVydmFsID0gNTAwMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucz8ucG9sbEludGVydmFsTXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXBJbnRlcnZhbCA9IG9wdGlvbnMucG9sbEludGVydmFsTXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJJbnRlcnZhbCA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdvcGVuYWktcG9sbC1hZnRlci1tcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVySW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckludGVydmFsTXMgPSBwYXJzZUludChoZWFkZXJJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGhlYWRlckludGVydmFsTXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXBJbnRlcnZhbCA9IGhlYWRlckludGVydmFsTXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoc2xlZXBJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvL1dlIHJldHVybiB0aGUgcnVuIGluIGFueSB0ZXJtaW5hbCBzdGF0ZS5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVzX2FjdGlvbic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbmNvbXBsZXRlJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbGxlZCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjb21wbGV0ZWQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbGVkJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGlyZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIFJ1biBzdHJlYW1cclxuICAgICAqL1xyXG4gICAgc3RyZWFtKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIEFzc2lzdGFudFN0cmVhbS5jcmVhdGVBc3Npc3RhbnRTdHJlYW0odGhyZWFkSWQsIHRoaXMuX2NsaWVudC5iZXRhLnRocmVhZHMucnVucywgYm9keSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBzdWJtaXRUb29sT3V0cHV0cyh0aHJlYWRJZCwgcnVuSWQsIGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3VibWl0X3Rvb2xfb3V0cHV0c2AsIHtcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICAgICAgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQSBoZWxwZXIgdG8gc3VibWl0IGEgdG9vbCBvdXRwdXQgdG8gYSBydW4gYW5kIHBvbGwgZm9yIGEgdGVybWluYWwgcnVuIHN0YXRlLlxyXG4gICAgICogTW9yZSBpbmZvcm1hdGlvbiBvbiBSdW4gbGlmZWN5Y2xlcyBjYW4gYmUgZm91bmQgaGVyZTpcclxuICAgICAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvaG93LWl0LXdvcmtzL3J1bnMtYW5kLXJ1bi1zdGVwc1xyXG4gICAgICovXHJcbiAgICBhc3luYyBzdWJtaXRUb29sT3V0cHV0c0FuZFBvbGwodGhyZWFkSWQsIHJ1bklkLCBib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgcnVuID0gYXdhaXQgdGhpcy5zdWJtaXRUb29sT3V0cHV0cyh0aHJlYWRJZCwgcnVuSWQsIGJvZHksIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvbGwodGhyZWFkSWQsIHJ1bi5pZCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1Ym1pdCB0aGUgdG9vbCBvdXRwdXRzIGZyb20gYSBwcmV2aW91cyBydW4gYW5kIHN0cmVhbSB0aGUgcnVuIHRvIGEgdGVybWluYWxcclxuICAgICAqIHN0YXRlLiBNb3JlIGluZm9ybWF0aW9uIG9uIFJ1biBsaWZlY3ljbGVzIGNhbiBiZSBmb3VuZCBoZXJlOlxyXG4gICAgICogaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy9ob3ctaXQtd29ya3MvcnVucy1hbmQtcnVuLXN0ZXBzXHJcbiAgICAgKi9cclxuICAgIHN1Ym1pdFRvb2xPdXRwdXRzU3RyZWFtKHRocmVhZElkLCBydW5JZCwgYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBBc3Npc3RhbnRTdHJlYW0uY3JlYXRlVG9vbEFzc2lzdGFudFN0cmVhbSh0aHJlYWRJZCwgcnVuSWQsIHRoaXMuX2NsaWVudC5iZXRhLnRocmVhZHMucnVucywgYm9keSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFJ1bnNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XHJcbn1cclxuKGZ1bmN0aW9uIChSdW5zKSB7XHJcbiAgICBSdW5zLlJ1bnNQYWdlID0gUnVuc0FQSS5SdW5zUGFnZTtcclxuICAgIFJ1bnMuU3RlcHMgPSBTdGVwc0FQSS5TdGVwcztcclxuICAgIFJ1bnMuUnVuU3RlcHNQYWdlID0gU3RlcHNBUEkuUnVuU3RlcHNQYWdlO1xyXG59KShSdW5zIHx8IChSdW5zID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVucy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/steps.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunStepsPage: () => (/* binding */ RunStepsPage),\n/* harmony export */   Steps: () => (/* binding */ Steps)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _steps_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./steps.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Steps extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Retrieves a run step.\r\n     */\r\n    retrieve(threadId, runId, stepId, options) {\r\n        return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    list(threadId, runId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.list(threadId, runId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\r\n            query,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n}\r\nclass RunStepsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\r\n}\r\n(function (Steps) {\r\n    Steps.RunStepsPage = _steps_mjs__WEBPACK_IMPORTED_MODULE_3__.RunStepsPage;\r\n})(Steps || (Steps = {}));\r\n//# sourceMappingURL=steps.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDdUQ7QUFDQztBQUNoQjtBQUNnQjtBQUNqRCxvQkFBb0Isc0RBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUyxRQUFRLE1BQU0sU0FBUyxPQUFPO0FBQ25GO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQSxvQ0FBb0M7QUFDcEMsWUFBWSwyREFBZ0I7QUFDNUIsZ0RBQWdEO0FBQ2hEO0FBQ0EsbURBQW1ELFNBQVMsUUFBUSxNQUFNO0FBQzFFO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ08sMkJBQTJCLHVEQUFVO0FBQzVDO0FBQ0E7QUFDQSx5QkFBeUIsb0RBQXFCO0FBQzlDLENBQUMsc0JBQXNCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3J1bnMvc3RlcHMubWpzPzNiZGIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29yZS5tanNcIjtcclxuaW1wb3J0ICogYXMgU3RlcHNBUEkgZnJvbSBcIi4vc3RlcHMubWpzXCI7XHJcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vLi4vcGFnaW5hdGlvbi5tanNcIjtcclxuZXhwb3J0IGNsYXNzIFN0ZXBzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgYSBydW4gc3RlcC5cclxuICAgICAqL1xyXG4gICAgcmV0cmlldmUodGhyZWFkSWQsIHJ1bklkLCBzdGVwSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9zdGVwcy8ke3N0ZXBJZH1gLCB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsaXN0KHRocmVhZElkLCBydW5JZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCBydW5JZCwge30sIHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L3N0ZXBzYCwgUnVuU3RlcHNQYWdlLCB7XHJcbiAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBSdW5TdGVwc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcclxufVxyXG4oZnVuY3Rpb24gKFN0ZXBzKSB7XHJcbiAgICBTdGVwcy5SdW5TdGVwc1BhZ2UgPSBTdGVwc0FQSS5SdW5TdGVwc1BhZ2U7XHJcbn0pKFN0ZXBzIHx8IChTdGVwcyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZXBzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/threads.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Threads: () => (/* binding */ Threads)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/AssistantStream.mjs */ \"(rsc)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\");\n/* harmony import */ var _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runs/runs.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\nclass Threads extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.runs = new _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs(this._client);\r\n        this.messages = new _messages_mjs__WEBPACK_IMPORTED_MODULE_2__.Messages(this._client);\r\n    }\r\n    create(body = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(body)) {\r\n            return this.create({}, body);\r\n        }\r\n        return this._client.post('/threads', {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a thread.\r\n     */\r\n    retrieve(threadId, options) {\r\n        return this._client.get(`/threads/${threadId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Modifies a thread.\r\n     */\r\n    update(threadId, body, options) {\r\n        return this._client.post(`/threads/${threadId}`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Delete a thread.\r\n     */\r\n    del(threadId, options) {\r\n        return this._client.delete(`/threads/${threadId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    createAndRun(body, options) {\r\n        return this._client.post('/threads/runs', {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n            stream: body.stream ?? false,\r\n        });\r\n    }\r\n    /**\r\n     * A helper to create a thread, start a run and then poll for a terminal state.\r\n     * More information on Run lifecycles can be found here:\r\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\r\n     */\r\n    async createAndRunPoll(body, options) {\r\n        const run = await this.createAndRun(body, options);\r\n        return await this.runs.poll(run.thread_id, run.id, options);\r\n    }\r\n    /**\r\n     * Create a thread and stream the run back\r\n     */\r\n    createAndRunStream(body, options) {\r\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\r\n    }\r\n}\r\n(function (Threads) {\r\n    Threads.Runs = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs;\r\n    Threads.RunsPage = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.RunsPage;\r\n    Threads.Messages = _messages_mjs__WEBPACK_IMPORTED_MODULE_2__.Messages;\r\n    Threads.MessagesPage = _messages_mjs__WEBPACK_IMPORTED_MODULE_2__.MessagesPage;\r\n})(Threads || (Threads = {}));\r\n//# sourceMappingURL=threads.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDb0Q7QUFDQztBQUNjO0FBQ3JCO0FBQ0g7QUFDcEMsc0JBQXNCLHNEQUFXO0FBQ3hDO0FBQ0E7QUFDQSx3QkFBd0IsZ0RBQVk7QUFDcEMsNEJBQTRCLG1EQUFvQjtBQUNoRDtBQUNBLG9CQUFvQjtBQUNwQixZQUFZLDJEQUFnQjtBQUM1QixpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFNBQVM7QUFDckQ7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsU0FBUztBQUN4RDtBQUNBLHVCQUF1QixxREFBcUQ7QUFDNUUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnREFBWTtBQUMvQix1QkFBdUIsb0RBQWdCO0FBQ3ZDLHVCQUF1QixtREFBb0I7QUFDM0MsMkJBQTJCLHVEQUF3QjtBQUNuRCxDQUFDLDBCQUEwQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy90aHJlYWRzLm1qcz8wMmJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XHJcbmltcG9ydCB7IEFzc2lzdGFudFN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi9saWIvQXNzaXN0YW50U3RyZWFtLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi9tZXNzYWdlcy5tanNcIjtcclxuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tIFwiLi9ydW5zL3J1bnMubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBUaHJlYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0FQSS5SdW5zKHRoaXMuX2NsaWVudCk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG5ldyBNZXNzYWdlc0FQSS5NZXNzYWdlcyh0aGlzLl9jbGllbnQpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKGJvZHkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKGJvZHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7fSwgYm9keSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3RocmVhZHMnLCB7XHJcbiAgICAgICAgICAgIGJvZHksXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyBhIHRocmVhZC5cclxuICAgICAqL1xyXG4gICAgcmV0cmlldmUodGhyZWFkSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3RocmVhZHMvJHt0aHJlYWRJZH1gLCB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmaWVzIGEgdGhyZWFkLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGUodGhyZWFkSWQsIGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGUgYSB0aHJlYWQuXHJcbiAgICAgKi9cclxuICAgIGRlbCh0aHJlYWRJZCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUFuZFJ1bihib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdGhyZWFkcy9ydW5zJywge1xyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgICAgICBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGhlbHBlciB0byBjcmVhdGUgYSB0aHJlYWQsIHN0YXJ0IGEgcnVuIGFuZCB0aGVuIHBvbGwgZm9yIGEgdGVybWluYWwgc3RhdGUuXHJcbiAgICAgKiBNb3JlIGluZm9ybWF0aW9uIG9uIFJ1biBsaWZlY3ljbGVzIGNhbiBiZSBmb3VuZCBoZXJlOlxyXG4gICAgICogaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy9ob3ctaXQtd29ya3MvcnVucy1hbmQtcnVuLXN0ZXBzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNyZWF0ZUFuZFJ1blBvbGwoYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHJ1biA9IGF3YWl0IHRoaXMuY3JlYXRlQW5kUnVuKGJvZHksIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJ1bnMucG9sbChydW4udGhyZWFkX2lkLCBydW4uaWQsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSB0aHJlYWQgYW5kIHN0cmVhbSB0aGUgcnVuIGJhY2tcclxuICAgICAqL1xyXG4gICAgY3JlYXRlQW5kUnVuU3RyZWFtKGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gQXNzaXN0YW50U3RyZWFtLmNyZWF0ZVRocmVhZEFzc2lzdGFudFN0cmVhbShib2R5LCB0aGlzLl9jbGllbnQuYmV0YS50aHJlYWRzLCBvcHRpb25zKTtcclxuICAgIH1cclxufVxyXG4oZnVuY3Rpb24gKFRocmVhZHMpIHtcclxuICAgIFRocmVhZHMuUnVucyA9IFJ1bnNBUEkuUnVucztcclxuICAgIFRocmVhZHMuUnVuc1BhZ2UgPSBSdW5zQVBJLlJ1bnNQYWdlO1xyXG4gICAgVGhyZWFkcy5NZXNzYWdlcyA9IE1lc3NhZ2VzQVBJLk1lc3NhZ2VzO1xyXG4gICAgVGhyZWFkcy5NZXNzYWdlc1BhZ2UgPSBNZXNzYWdlc0FQSS5NZXNzYWdlc1BhZ2U7XHJcbn0pKFRocmVhZHMgfHwgKFRocmVhZHMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJlYWRzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/vector-stores/file-batches.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/vector-stores/file-batches.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileBatches: () => (/* binding */ FileBatches),\n/* harmony export */   VectorStoreFilesPage: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_Util_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/Util.mjs */ \"(rsc)/./node_modules/openai/lib/Util.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/beta/vector-stores/files.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\nclass FileBatches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Create a vector store file batch.\r\n     */\r\n    create(vectorStoreId, body, options) {\r\n        return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a vector store file batch.\r\n     */\r\n    retrieve(vectorStoreId, batchId, options) {\r\n        return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Cancel a vector store file batch. This attempts to cancel the processing of\r\n     * files in this batch as soon as possible.\r\n     */\r\n    cancel(vectorStoreId, batchId, options) {\r\n        return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Create a vector store batch and poll until all files have been processed.\r\n     */\r\n    async createAndPoll(vectorStoreId, body, options) {\r\n        const batch = await this.create(vectorStoreId, body);\r\n        return await this.poll(vectorStoreId, batch.id, options);\r\n    }\r\n    listFiles(vectorStoreId, batchId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.listFiles(vectorStoreId, batchId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage, { query, ...options, headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers } });\r\n    }\r\n    /**\r\n     * Wait for the given file batch to be processed.\r\n     *\r\n     * Note: this will return even if one of the files failed to process, you need to\r\n     * check batch.file_counts.failed_count to handle this case.\r\n     */\r\n    async poll(vectorStoreId, batchId, options) {\r\n        const headers = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\r\n        if (options?.pollIntervalMs) {\r\n            headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\r\n        }\r\n        while (true) {\r\n            const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {\r\n                ...options,\r\n                headers,\r\n            }).withResponse();\r\n            switch (batch.status) {\r\n                case 'in_progress':\r\n                    let sleepInterval = 5000;\r\n                    if (options?.pollIntervalMs) {\r\n                        sleepInterval = options.pollIntervalMs;\r\n                    }\r\n                    else {\r\n                        const headerInterval = response.headers.get('openai-poll-after-ms');\r\n                        if (headerInterval) {\r\n                            const headerIntervalMs = parseInt(headerInterval);\r\n                            if (!isNaN(headerIntervalMs)) {\r\n                                sleepInterval = headerIntervalMs;\r\n                            }\r\n                        }\r\n                    }\r\n                    await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\r\n                    break;\r\n                case 'failed':\r\n                case 'cancelled':\r\n                case 'completed':\r\n                    return batch;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Uploads the given files concurrently and then creates a vector store file batch.\r\n     *\r\n     * The concurrency limit is configurable using the `maxConcurrency` parameter.\r\n     */\r\n    async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {\r\n        if (files == null || files.length == 0) {\r\n            throw new Error(`No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`);\r\n        }\r\n        const configuredConcurrency = options?.maxConcurrency ?? 5;\r\n        // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\r\n        const concurrencyLimit = Math.min(configuredConcurrency, files.length);\r\n        const client = this._client;\r\n        const fileIterator = files.values();\r\n        const allFileIds = [...fileIds];\r\n        // This code is based on this design. The libraries don't accommodate our environment limits.\r\n        // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\r\n        async function processFiles(iterator) {\r\n            for (let item of iterator) {\r\n                const fileObj = await client.files.create({ file: item, purpose: 'assistants' }, options);\r\n                allFileIds.push(fileObj.id);\r\n            }\r\n        }\r\n        // Start workers to process results\r\n        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\r\n        // Wait for all processing to complete.\r\n        await (0,_lib_Util_mjs__WEBPACK_IMPORTED_MODULE_3__.allSettledWithThrow)(workers);\r\n        return await this.createAndPoll(vectorStoreId, {\r\n            file_ids: allFileIds,\r\n        });\r\n    }\r\n}\r\n(function (FileBatches) {\r\n})(FileBatches || (FileBatches = {}));\r\n\r\n//# sourceMappingURL=file-batches.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/vector-stores/file-batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/vector-stores/files.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/resources/beta/vector-stores/files.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files),\n/* harmony export */   VectorStoreFilesPage: () => (/* binding */ VectorStoreFilesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/beta/vector-stores/files.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Create a vector store file by attaching a\r\n     * [File](https://platform.openai.com/docs/api-reference/files) to a\r\n     * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\r\n     */\r\n    create(vectorStoreId, body, options) {\r\n        return this._client.post(`/vector_stores/${vectorStoreId}/files`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a vector store file.\r\n     */\r\n    retrieve(vectorStoreId, fileId, options) {\r\n        return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    list(vectorStoreId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.list(vectorStoreId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {\r\n            query,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Delete a vector store file. This will remove the file from the vector store but\r\n     * the file itself will not be deleted. To delete the file, use the\r\n     * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\r\n     * endpoint.\r\n     */\r\n    del(vectorStoreId, fileId, options) {\r\n        return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Attach a file to the given vector store and wait for it to be processed.\r\n     */\r\n    async createAndPoll(vectorStoreId, body, options) {\r\n        const file = await this.create(vectorStoreId, body, options);\r\n        return await this.poll(vectorStoreId, file.id, options);\r\n    }\r\n    /**\r\n     * Wait for the vector store file to finish processing.\r\n     *\r\n     * Note: this will return even if the file failed to process, you need to check\r\n     * file.last_error and file.status to handle these cases\r\n     */\r\n    async poll(vectorStoreId, fileId, options) {\r\n        const headers = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\r\n        if (options?.pollIntervalMs) {\r\n            headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\r\n        }\r\n        while (true) {\r\n            const fileResponse = await this.retrieve(vectorStoreId, fileId, {\r\n                ...options,\r\n                headers,\r\n            }).withResponse();\r\n            const file = fileResponse.data;\r\n            switch (file.status) {\r\n                case 'in_progress':\r\n                    let sleepInterval = 5000;\r\n                    if (options?.pollIntervalMs) {\r\n                        sleepInterval = options.pollIntervalMs;\r\n                    }\r\n                    else {\r\n                        const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\r\n                        if (headerInterval) {\r\n                            const headerIntervalMs = parseInt(headerInterval);\r\n                            if (!isNaN(headerIntervalMs)) {\r\n                                sleepInterval = headerIntervalMs;\r\n                            }\r\n                        }\r\n                    }\r\n                    await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\r\n                    break;\r\n                case 'failed':\r\n                case 'completed':\r\n                    return file;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Upload a file to the `files` API and then attach it to the given vector store.\r\n     *\r\n     * Note the file will be asynchronously processed (you can use the alternative\r\n     * polling helper method to wait for processing to complete).\r\n     */\r\n    async upload(vectorStoreId, file, options) {\r\n        const fileInfo = await this._client.files.create({ file: file, purpose: 'assistants' }, options);\r\n        return this.create(vectorStoreId, { file_id: fileInfo.id }, options);\r\n    }\r\n    /**\r\n     * Add a file to a vector store and poll until processing is complete.\r\n     */\r\n    async uploadAndPoll(vectorStoreId, file, options) {\r\n        const fileInfo = await this.upload(vectorStoreId, file, options);\r\n        return await this.poll(vectorStoreId, fileInfo.id, options);\r\n    }\r\n}\r\nclass VectorStoreFilesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\r\n}\r\n(function (Files) {\r\n    Files.VectorStoreFilesPage = _files_mjs__WEBPACK_IMPORTED_MODULE_3__.VectorStoreFilesPage;\r\n})(Files || (Files = {}));\r\n//# sourceMappingURL=files.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/vector-stores/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorStores: () => (/* binding */ VectorStores),\n/* harmony export */   VectorStoresPage: () => (/* binding */ VectorStoresPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _vector_stores_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vector-stores.mjs */ \"(rsc)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs\");\n/* harmony import */ var _file_batches_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-batches.mjs */ \"(rsc)/./node_modules/openai/resources/beta/vector-stores/file-batches.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/beta/vector-stores/files.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass VectorStores extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.files = new _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\r\n        this.fileBatches = new _file_batches_mjs__WEBPACK_IMPORTED_MODULE_2__.FileBatches(this._client);\r\n    }\r\n    /**\r\n     * Create a vector store.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/vector_stores', {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a vector store.\r\n     */\r\n    retrieve(vectorStoreId, options) {\r\n        return this._client.get(`/vector_stores/${vectorStoreId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Modifies a vector store.\r\n     */\r\n    update(vectorStoreId, body, options) {\r\n        return this._client.post(`/vector_stores/${vectorStoreId}`, {\r\n            body,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    list(query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(query)) {\r\n            return this.list({}, query);\r\n        }\r\n        return this._client.getAPIList('/vector_stores', VectorStoresPage, {\r\n            query,\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Delete a vector store.\r\n     */\r\n    del(vectorStoreId, options) {\r\n        return this._client.delete(`/vector_stores/${vectorStoreId}`, {\r\n            ...options,\r\n            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\r\n        });\r\n    }\r\n}\r\nclass VectorStoresPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {\r\n}\r\n(function (VectorStores) {\r\n    VectorStores.VectorStoresPage = _vector_stores_mjs__WEBPACK_IMPORTED_MODULE_5__.VectorStoresPage;\r\n    VectorStores.Files = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files;\r\n    VectorStores.VectorStoreFilesPage = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.VectorStoreFilesPage;\r\n    VectorStores.FileBatches = _file_batches_mjs__WEBPACK_IMPORTED_MODULE_2__.FileBatches;\r\n})(VectorStores || (VectorStores = {}));\r\n//# sourceMappingURL=vector-stores.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3ZlY3Rvci1zdG9yZXMvdmVjdG9yLXN0b3Jlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNvRDtBQUNDO0FBQ0U7QUFDRjtBQUNiO0FBQ2E7QUFDOUMsMkJBQTJCLHNEQUFXO0FBQzdDO0FBQ0E7QUFDQSx5QkFBeUIsNkNBQWM7QUFDdkMsK0JBQStCLDBEQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxjQUFjO0FBQ2hFO0FBQ0EsdUJBQXVCLHFEQUFxRDtBQUM1RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxjQUFjO0FBQ2pFO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBLG1CQUFtQjtBQUNuQixZQUFZLDJEQUFnQjtBQUM1QiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGNBQWM7QUFDbkU7QUFDQSx1QkFBdUIscURBQXFEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ08sK0JBQStCLHVEQUFVO0FBQ2hEO0FBQ0E7QUFDQSxvQ0FBb0MsZ0VBQWdDO0FBQ3BFLHlCQUF5Qiw2Q0FBYztBQUN2Qyx3Q0FBd0MsNERBQTZCO0FBQ3JFLCtCQUErQiwwREFBMEI7QUFDekQsQ0FBQyxvQ0FBb0M7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3ZlY3Rvci1zdG9yZXMvdmVjdG9yLXN0b3Jlcy5tanM/NWFjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBWZWN0b3JTdG9yZXNBUEkgZnJvbSBcIi4vdmVjdG9yLXN0b3Jlcy5tanNcIjtcclxuaW1wb3J0ICogYXMgRmlsZUJhdGNoZXNBUEkgZnJvbSBcIi4vZmlsZS1iYXRjaGVzLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tIFwiLi9maWxlcy5tanNcIjtcclxuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgVmVjdG9yU3RvcmVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLmZpbGVzID0gbmV3IEZpbGVzQVBJLkZpbGVzKHRoaXMuX2NsaWVudCk7XHJcbiAgICAgICAgdGhpcy5maWxlQmF0Y2hlcyA9IG5ldyBGaWxlQmF0Y2hlc0FQSS5GaWxlQmF0Y2hlcyh0aGlzLl9jbGllbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSB2ZWN0b3Igc3RvcmUuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdmVjdG9yX3N0b3JlcycsIHtcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIGEgdmVjdG9yIHN0b3JlLlxyXG4gICAgICovXHJcbiAgICByZXRyaWV2ZSh2ZWN0b3JTdG9yZUlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH1gLCB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmaWVzIGEgdmVjdG9yIHN0b3JlLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGUodmVjdG9yU3RvcmVJZCwgYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfWAsIHtcclxuICAgICAgICAgICAgYm9keSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL3ZlY3Rvcl9zdG9yZXMnLCBWZWN0b3JTdG9yZXNQYWdlLCB7XHJcbiAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGUgYSB2ZWN0b3Igc3RvcmUuXHJcbiAgICAgKi9cclxuICAgIGRlbCh2ZWN0b3JTdG9yZUlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH1gLCB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFZlY3RvclN0b3Jlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcclxufVxyXG4oZnVuY3Rpb24gKFZlY3RvclN0b3Jlcykge1xyXG4gICAgVmVjdG9yU3RvcmVzLlZlY3RvclN0b3Jlc1BhZ2UgPSBWZWN0b3JTdG9yZXNBUEkuVmVjdG9yU3RvcmVzUGFnZTtcclxuICAgIFZlY3RvclN0b3Jlcy5GaWxlcyA9IEZpbGVzQVBJLkZpbGVzO1xyXG4gICAgVmVjdG9yU3RvcmVzLlZlY3RvclN0b3JlRmlsZXNQYWdlID0gRmlsZXNBUEkuVmVjdG9yU3RvcmVGaWxlc1BhZ2U7XHJcbiAgICBWZWN0b3JTdG9yZXMuRmlsZUJhdGNoZXMgPSBGaWxlQmF0Y2hlc0FQSS5GaWxlQmF0Y2hlcztcclxufSkoVmVjdG9yU3RvcmVzIHx8IChWZWN0b3JTdG9yZXMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZWN0b3Itc3RvcmVzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/chat.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/chat/chat.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\r\n    }\r\n}\r\n(function (Chat) {\r\n    Chat.Completions = _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions;\r\n})(Chat || (Chat = {}));\r\n//# sourceMappingURL=chat.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ2lEO0FBQ0c7QUFDN0MsbUJBQW1CLHNEQUFXO0FBQ3JDO0FBQ0E7QUFDQSwrQkFBK0IseURBQTBCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5REFBMEI7QUFDakQsQ0FBQyxvQkFBb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzPzdmNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQVBJIGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgQ2hhdCBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5jb21wbGV0aW9ucyA9IG5ldyBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucyh0aGlzLl9jbGllbnQpO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoQ2hhdCkge1xyXG4gICAgQ2hhdC5Db21wbGV0aW9ucyA9IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zO1xyXG59KShDaGF0IHx8IChDaGF0ID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/completions.mjs":
/*!************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    create(body, options) {\r\n        return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false });\r\n    }\r\n}\r\n(function (Completions) {\r\n})(Completions || (Completions = {}));\r\n//# sourceMappingURL=completions.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ2lEO0FBQzFDLDBCQUEwQixzREFBVztBQUM1QztBQUNBLHdEQUF3RCxnREFBZ0Q7QUFDeEc7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zLm1qcz9hMjVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XHJcbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2NoYXQvY29tcGxldGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSk7XHJcbiAgICB9XHJcbn1cclxuKGZ1bmN0aW9uIChDb21wbGV0aW9ucykge1xyXG59KShDb21wbGV0aW9ucyB8fCAoQ29tcGxldGlvbnMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/completions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/completions.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    create(body, options) {\r\n        return this._client.post('/completions', { body, ...options, stream: body.stream ?? false });\r\n    }\r\n}\r\n(function (Completions) {\r\n})(Completions || (Completions = {}));\r\n//# sourceMappingURL=completions.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUM4QztBQUN2QywwQkFBMEIsc0RBQVc7QUFDNUM7QUFDQSxtREFBbUQsZ0RBQWdEO0FBQ25HO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0NBQWtDO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY29tcGxldGlvbnMubWpzPzJiNjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvY29tcGxldGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSk7XHJcbiAgICB9XHJcbn1cclxuKGZ1bmN0aW9uIChDb21wbGV0aW9ucykge1xyXG59KShDb21wbGV0aW9ucyB8fCAoQ29tcGxldGlvbnMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/embeddings.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/embeddings.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nclass Embeddings extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Creates an embedding vector representing the input text.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/embeddings', { body, ...options });\r\n    }\r\n}\r\n(function (Embeddings) {\r\n})(Embeddings || (Embeddings = {}));\r\n//# sourceMappingURL=embeddings.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQzhDO0FBQ3ZDLHlCQUF5QixzREFBVztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxrQkFBa0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcz9iMzEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlbWJlZGRpbmcgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgdGV4dC5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9lbWJlZGRpbmdzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoRW1iZWRkaW5ncykge1xyXG59KShFbWJlZGRpbmdzIHx8IChFbWJlZGRpbmdzID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1iZWRkaW5ncy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/embeddings.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/files.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/files.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileObjectsPage: () => (/* binding */ FileObjectsPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Upload a file that can be used across various endpoints. Individual files can be\r\n     * up to 512 MB, and the size of all files uploaded by one organization can be up\r\n     * to 100 GB.\r\n     *\r\n     * The Assistants API supports files up to 2 million tokens and of specific file\r\n     * types. See the\r\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\r\n     * details.\r\n     *\r\n     * The Fine-tuning API only supports `.jsonl` files. The input also has certain\r\n     * required formats for fine-tuning\r\n     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\r\n     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\r\n     * models.\r\n     *\r\n     * The Batch API only supports `.jsonl` files up to 100 MB in size. The input also\r\n     * has a specific required\r\n     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\r\n     *\r\n     * Please [contact us](https://help.openai.com/) if you need to increase these\r\n     * storage limits.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/files', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({ body, ...options }));\r\n    }\r\n    /**\r\n     * Returns information about a specific file.\r\n     */\r\n    retrieve(fileId, options) {\r\n        return this._client.get(`/files/${fileId}`, options);\r\n    }\r\n    list(query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\r\n            return this.list({}, query);\r\n        }\r\n        return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });\r\n    }\r\n    /**\r\n     * Delete a file.\r\n     */\r\n    del(fileId, options) {\r\n        return this._client.delete(`/files/${fileId}`, options);\r\n    }\r\n    /**\r\n     * Returns the contents of the specified file.\r\n     */\r\n    content(fileId, options) {\r\n        return this._client.get(`/files/${fileId}/content`, { ...options, __binaryResponse: true });\r\n    }\r\n    /**\r\n     * Returns the contents of the specified file.\r\n     *\r\n     * @deprecated The `.content()` method should be used instead\r\n     */\r\n    retrieveContent(fileId, options) {\r\n        return this._client.get(`/files/${fileId}/content`, {\r\n            ...options,\r\n            headers: { Accept: 'application/json', ...options?.headers },\r\n        });\r\n    }\r\n    /**\r\n     * Waits for the given file to be processed, default timeout is 30 mins.\r\n     */\r\n    async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\r\n        const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\r\n        const start = Date.now();\r\n        let file = await this.retrieve(id);\r\n        while (!file.status || !TERMINAL_STATES.has(file.status)) {\r\n            await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(pollInterval);\r\n            file = await this.retrieve(id);\r\n            if (Date.now() - start > maxWait) {\r\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError({\r\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\r\n                });\r\n            }\r\n        }\r\n        return file;\r\n    }\r\n}\r\n/**\r\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\r\n */\r\nclass FileObjectsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.Page {\r\n}\r\n(function (Files) {\r\n    Files.FileObjectsPage = _files_mjs__WEBPACK_IMPORTED_MODULE_5__.FileObjectsPage;\r\n})(Files || (Files = {}));\r\n//# sourceMappingURL=files.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUM4QztBQUNDO0FBQ1g7QUFDcUI7QUFDckI7QUFDSTtBQUNDO0FBQ2xDLG9CQUFvQixzREFBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsa0VBQWdDLEdBQUcsa0JBQWtCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBLG1CQUFtQjtBQUNuQixZQUFZLDJEQUFnQjtBQUM1QiwrQkFBK0I7QUFDL0I7QUFDQSxvRUFBb0UsbUJBQW1CO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsT0FBTztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU8sYUFBYSxvQ0FBb0M7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBLHVCQUF1QixpREFBaUQ7QUFDeEUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGdEQUFnRCxJQUFJO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdEQUFLO0FBQ3ZCO0FBQ0E7QUFDQSwwQkFBMEIsaUVBQXlCO0FBQ25ELDhEQUE4RCxJQUFJLDZCQUE2QixTQUFTO0FBQ3hHLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLGlEQUFJO0FBQ3pDO0FBQ0E7QUFDQSw0QkFBNEIsdURBQXdCO0FBQ3BELENBQUMsc0JBQXNCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmlsZXMubWpzPzhhZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS5tanNcIjtcclxuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiLi4vY29yZS5tanNcIjtcclxuaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciB9IGZyb20gXCIuLi9lcnJvci5tanNcIjtcclxuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5tanNcIjtcclxuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSBcIi4vZmlsZXMubWpzXCI7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi5tanNcIjtcclxuZXhwb3J0IGNsYXNzIEZpbGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGxvYWQgYSBmaWxlIHRoYXQgY2FuIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzLiBJbmRpdmlkdWFsIGZpbGVzIGNhbiBiZVxyXG4gICAgICogdXAgdG8gNTEyIE1CLCBhbmQgdGhlIHNpemUgb2YgYWxsIGZpbGVzIHVwbG9hZGVkIGJ5IG9uZSBvcmdhbml6YXRpb24gY2FuIGJlIHVwXHJcbiAgICAgKiB0byAxMDAgR0IuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIEFzc2lzdGFudHMgQVBJIHN1cHBvcnRzIGZpbGVzIHVwIHRvIDIgbWlsbGlvbiB0b2tlbnMgYW5kIG9mIHNwZWNpZmljIGZpbGVcclxuICAgICAqIHR5cGVzLiBTZWUgdGhlXHJcbiAgICAgKiBbQXNzaXN0YW50cyBUb29scyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scykgZm9yXHJcbiAgICAgKiBkZXRhaWxzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBGaW5lLXR1bmluZyBBUEkgb25seSBzdXBwb3J0cyBgLmpzb25sYCBmaWxlcy4gVGhlIGlucHV0IGFsc28gaGFzIGNlcnRhaW5cclxuICAgICAqIHJlcXVpcmVkIGZvcm1hdHMgZm9yIGZpbmUtdHVuaW5nXHJcbiAgICAgKiBbY2hhdF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maW5lLXR1bmluZy9jaGF0LWlucHV0KSBvclxyXG4gICAgICogW2NvbXBsZXRpb25zXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbmUtdHVuaW5nL2NvbXBsZXRpb25zLWlucHV0KVxyXG4gICAgICogbW9kZWxzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBCYXRjaCBBUEkgb25seSBzdXBwb3J0cyBgLmpzb25sYCBmaWxlcyB1cCB0byAxMDAgTUIgaW4gc2l6ZS4gVGhlIGlucHV0IGFsc29cclxuICAgICAqIGhhcyBhIHNwZWNpZmljIHJlcXVpcmVkXHJcbiAgICAgKiBbZm9ybWF0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2JhdGNoL3JlcXVlc3QtaW5wdXQpLlxyXG4gICAgICpcclxuICAgICAqIFBsZWFzZSBbY29udGFjdCB1c10oaHR0cHM6Ly9oZWxwLm9wZW5haS5jb20vKSBpZiB5b3UgbmVlZCB0byBpbmNyZWFzZSB0aGVzZVxyXG4gICAgICogc3RvcmFnZSBsaW1pdHMuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmlsZXMnLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZmlsZS5cclxuICAgICAqL1xyXG4gICAgcmV0cmlldmUoZmlsZUlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVJZH1gLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2ZpbGVzJywgRmlsZU9iamVjdHNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGUgYSBmaWxlLlxyXG4gICAgICovXHJcbiAgICBkZWwoZmlsZUlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9maWxlcy8ke2ZpbGVJZH1gLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlLlxyXG4gICAgICovXHJcbiAgICBjb250ZW50KGZpbGVJZCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmlsZXMvJHtmaWxlSWR9L2NvbnRlbnRgLCB7IC4uLm9wdGlvbnMsIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cclxuICAgICAqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgYC5jb250ZW50KClgIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIHJldHJpZXZlQ29udGVudChmaWxlSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbGVzLyR7ZmlsZUlkfS9jb250ZW50YCwge1xyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdhaXRzIGZvciB0aGUgZ2l2ZW4gZmlsZSB0byBiZSBwcm9jZXNzZWQsIGRlZmF1bHQgdGltZW91dCBpcyAzMCBtaW5zLlxyXG4gICAgICovXHJcbiAgICBhc3luYyB3YWl0Rm9yUHJvY2Vzc2luZyhpZCwgeyBwb2xsSW50ZXJ2YWwgPSA1MDAwLCBtYXhXYWl0ID0gMzAgKiA2MCAqIDEwMDAgfSA9IHt9KSB7XHJcbiAgICAgICAgY29uc3QgVEVSTUlOQUxfU1RBVEVTID0gbmV3IFNldChbJ3Byb2Nlc3NlZCcsICdlcnJvcicsICdkZWxldGVkJ10pO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBsZXQgZmlsZSA9IGF3YWl0IHRoaXMucmV0cmlldmUoaWQpO1xyXG4gICAgICAgIHdoaWxlICghZmlsZS5zdGF0dXMgfHwgIVRFUk1JTkFMX1NUQVRFUy5oYXMoZmlsZS5zdGF0dXMpKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKHBvbGxJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIGZpbGUgPSBhd2FpdCB0aGlzLnJldHJpZXZlKGlkKTtcclxuICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IG1heFdhaXQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgR2l2aW5nIHVwIG9uIHdhaXRpbmcgZm9yIGZpbGUgJHtpZH0gdG8gZmluaXNoIHByb2Nlc3NpbmcgYWZ0ZXIgJHttYXhXYWl0fSBtaWxsaXNlY29uZHMuYCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlsZU9iamVjdHNQYWdlIGV4dGVuZHMgUGFnZSB7XHJcbn1cclxuKGZ1bmN0aW9uIChGaWxlcykge1xyXG4gICAgRmlsZXMuRmlsZU9iamVjdHNQYWdlID0gRmlsZXNBUEkuRmlsZU9iamVjdHNQYWdlO1xyXG59KShGaWxlcyB8fCAoRmlsZXMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlcy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* binding */ FineTuning)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jobs/jobs.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass FineTuning extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.jobs = new _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs(this._client);\r\n    }\r\n}\r\n(function (FineTuning) {\r\n    FineTuning.Jobs = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs;\r\n    FineTuning.FineTuningJobsPage = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobsPage;\r\n    FineTuning.FineTuningJobEventsPage = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobEventsPage;\r\n})(FineTuning || (FineTuning = {}));\r\n//# sourceMappingURL=fine-tuning.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDaUQ7QUFDTjtBQUNwQyx5QkFBeUIsc0RBQVc7QUFDM0M7QUFDQTtBQUNBLHdCQUF3QixnREFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0RBQVk7QUFDbEMsb0NBQW9DLDhEQUEwQjtBQUM5RCx5Q0FBeUMsbUVBQStCO0FBQ3hFLENBQUMsZ0NBQWdDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvZmluZS10dW5pbmcubWpzP2YxZjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCAqIGFzIEpvYnNBUEkgZnJvbSBcIi4vam9icy9qb2JzLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgRmluZVR1bmluZyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5qb2JzID0gbmV3IEpvYnNBUEkuSm9icyh0aGlzLl9jbGllbnQpO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoRmluZVR1bmluZykge1xyXG4gICAgRmluZVR1bmluZy5Kb2JzID0gSm9ic0FQSS5Kb2JzO1xyXG4gICAgRmluZVR1bmluZy5GaW5lVHVuaW5nSm9ic1BhZ2UgPSBKb2JzQVBJLkZpbmVUdW5pbmdKb2JzUGFnZTtcclxuICAgIEZpbmVUdW5pbmcuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgPSBKb2JzQVBJLkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlO1xyXG59KShGaW5lVHVuaW5nIHx8IChGaW5lVHVuaW5nID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZS10dW5pbmcubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkpoints: () => (/* binding */ Checkpoints),\n/* harmony export */   FineTuningJobCheckpointsPage: () => (/* binding */ FineTuningJobCheckpointsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkpoints.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\nclass Checkpoints extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    list(fineTuningJobId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\r\n            return this.list(fineTuningJobId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/checkpoints`, FineTuningJobCheckpointsPage, { query, ...options });\r\n    }\r\n}\r\nclass FineTuningJobCheckpointsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\r\n}\r\n(function (Checkpoints) {\r\n    Checkpoints.FineTuningJobCheckpointsPage = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_3__.FineTuningJobCheckpointsPage;\r\n})(Checkpoints || (Checkpoints = {}));\r\n//# sourceMappingURL=checkpoints.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2NoZWNrcG9pbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNvRDtBQUNDO0FBQ0Q7QUFDQztBQUM5QywwQkFBMEIsc0RBQVc7QUFDNUMsb0NBQW9DO0FBQ3BDLFlBQVksMkRBQWdCO0FBQzVCLGdEQUFnRDtBQUNoRDtBQUNBLDREQUE0RCxnQkFBZ0IsK0NBQStDLG1CQUFtQjtBQUM5STtBQUNBO0FBQ08sMkNBQTJDLHVEQUFVO0FBQzVEO0FBQ0E7QUFDQSwrQ0FBK0MsMEVBQTJDO0FBQzFGLENBQUMsa0NBQWtDO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy9jaGVja3BvaW50cy5tanM/MDYxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBDaGVja3BvaW50c0FQSSBmcm9tIFwiLi9jaGVja3BvaW50cy5tanNcIjtcclxuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgQ2hlY2twb2ludHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XHJcbiAgICBsaXN0KGZpbmVUdW5pbmdKb2JJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vY2hlY2twb2ludHNgLCBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XHJcbn1cclxuKGZ1bmN0aW9uIChDaGVja3BvaW50cykge1xyXG4gICAgQ2hlY2twb2ludHMuRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZSA9IENoZWNrcG9pbnRzQVBJLkZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2U7XHJcbn0pKENoZWNrcG9pbnRzIHx8IChDaGVja3BvaW50cyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrcG9pbnRzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuningJobEventsPage: () => (/* binding */ FineTuningJobEventsPage),\n/* harmony export */   FineTuningJobsPage: () => (/* binding */ FineTuningJobsPage),\n/* harmony export */   Jobs: () => (/* binding */ Jobs)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _jobs_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jobs.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\");\n/* harmony import */ var _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkpoints.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\n\r\n\r\nclass Jobs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.checkpoints = new _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.Checkpoints(this._client);\r\n    }\r\n    /**\r\n     * Creates a fine-tuning job which begins the process of creating a new model from\r\n     * a given dataset.\r\n     *\r\n     * Response includes details of the enqueued job including job status and the name\r\n     * of the fine-tuned models once complete.\r\n     *\r\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/fine_tuning/jobs', { body, ...options });\r\n    }\r\n    /**\r\n     * Get info about a fine-tuning job.\r\n     *\r\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\r\n     */\r\n    retrieve(fineTuningJobId, options) {\r\n        return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\r\n    }\r\n    list(query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\r\n            return this.list({}, query);\r\n        }\r\n        return this._client.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, { query, ...options });\r\n    }\r\n    /**\r\n     * Immediately cancel a fine-tune job.\r\n     */\r\n    cancel(fineTuningJobId, options) {\r\n        return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\r\n    }\r\n    listEvents(fineTuningJobId, query = {}, options) {\r\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\r\n            return this.listEvents(fineTuningJobId, {}, query);\r\n        }\r\n        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\r\n            query,\r\n            ...options,\r\n        });\r\n    }\r\n}\r\nclass FineTuningJobsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\r\n}\r\nclass FineTuningJobEventsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\r\n}\r\n(function (Jobs) {\r\n    Jobs.FineTuningJobsPage = _jobs_mjs__WEBPACK_IMPORTED_MODULE_4__.FineTuningJobsPage;\r\n    Jobs.FineTuningJobEventsPage = _jobs_mjs__WEBPACK_IMPORTED_MODULE_4__.FineTuningJobEventsPage;\r\n    Jobs.Checkpoints = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.Checkpoints;\r\n    Jobs.FineTuningJobCheckpointsPage = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobCheckpointsPage;\r\n})(Jobs || (Jobs = {}));\r\n//# sourceMappingURL=jobs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2pvYnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDb0Q7QUFDQztBQUNmO0FBQ2M7QUFDQztBQUM5QyxtQkFBbUIsc0RBQVc7QUFDckM7QUFDQTtBQUNBLCtCQUErQix5REFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxrQkFBa0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsZ0JBQWdCO0FBQ3JFO0FBQ0EsbUJBQW1CO0FBQ25CLFlBQVksMkRBQWdCO0FBQzVCLCtCQUErQjtBQUMvQjtBQUNBLGtGQUFrRixtQkFBbUI7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQkFBZ0I7QUFDdEU7QUFDQSwwQ0FBMEM7QUFDMUMsWUFBWSwyREFBZ0I7QUFDNUIsc0RBQXNEO0FBQ3REO0FBQ0EsNERBQTRELGdCQUFnQjtBQUM1RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDTyxpQ0FBaUMsdURBQVU7QUFDbEQ7QUFDTyxzQ0FBc0MsdURBQVU7QUFDdkQ7QUFDQTtBQUNBLDhCQUE4Qix5REFBMEI7QUFDeEQsbUNBQW1DLDhEQUErQjtBQUNsRSx1QkFBdUIseURBQTBCO0FBQ2pELHdDQUF3QywwRUFBMkM7QUFDbkYsQ0FBQyxvQkFBb0I7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2pvYnMubWpzPzE3MTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XHJcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS5tanNcIjtcclxuaW1wb3J0ICogYXMgSm9ic0FQSSBmcm9tIFwiLi9qb2JzLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBDaGVja3BvaW50c0FQSSBmcm9tIFwiLi9jaGVja3BvaW50cy5tanNcIjtcclxuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgSm9icyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5jaGVja3BvaW50cyA9IG5ldyBDaGVja3BvaW50c0FQSS5DaGVja3BvaW50cyh0aGlzLl9jbGllbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZmluZS10dW5pbmcgam9iIHdoaWNoIGJlZ2lucyB0aGUgcHJvY2VzcyBvZiBjcmVhdGluZyBhIG5ldyBtb2RlbCBmcm9tXHJcbiAgICAgKiBhIGdpdmVuIGRhdGFzZXQuXHJcbiAgICAgKlxyXG4gICAgICogUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZVxyXG4gICAgICogb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWxzIG9uY2UgY29tcGxldGUuXHJcbiAgICAgKlxyXG4gICAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcclxuICAgICAqL1xyXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9maW5lX3R1bmluZy9qb2JzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgaW5mbyBhYm91dCBhIGZpbmUtdHVuaW5nIGpvYi5cclxuICAgICAqXHJcbiAgICAgKiBbTGVhcm4gbW9yZSBhYm91dCBmaW5lLXR1bmluZ10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxyXG4gICAgICovXHJcbiAgICByZXRyaWV2ZShmaW5lVHVuaW5nSm9iSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9YCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9maW5lX3R1bmluZy9qb2JzJywgRmluZVR1bmluZ0pvYnNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbW1lZGlhdGVseSBjYW5jZWwgYSBmaW5lLXR1bmUgam9iLlxyXG4gICAgICovXHJcbiAgICBjYW5jZWwoZmluZVR1bmluZ0pvYklkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBsaXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vZXZlbnRzYCwgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UsIHtcclxuICAgICAgICAgICAgcXVlcnksXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xyXG59XHJcbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xyXG59XHJcbihmdW5jdGlvbiAoSm9icykge1xyXG4gICAgSm9icy5GaW5lVHVuaW5nSm9ic1BhZ2UgPSBKb2JzQVBJLkZpbmVUdW5pbmdKb2JzUGFnZTtcclxuICAgIEpvYnMuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgPSBKb2JzQVBJLkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlO1xyXG4gICAgSm9icy5DaGVja3BvaW50cyA9IENoZWNrcG9pbnRzQVBJLkNoZWNrcG9pbnRzO1xyXG4gICAgSm9icy5GaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlID0gQ2hlY2twb2ludHNBUEkuRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZTtcclxufSkoSm9icyB8fCAoSm9icyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvYnMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/images.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/images.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: () => (/* binding */ Images)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Images extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Creates a variation of a given image.\r\n     */\r\n    createVariation(body, options) {\r\n        return this._client.post('/images/variations', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({ body, ...options }));\r\n    }\r\n    /**\r\n     * Creates an edited or extended image given an original image and a prompt.\r\n     */\r\n    edit(body, options) {\r\n        return this._client.post('/images/edits', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({ body, ...options }));\r\n    }\r\n    /**\r\n     * Creates an image given a prompt.\r\n     */\r\n    generate(body, options) {\r\n        return this._client.post('/images/generations', { body, ...options });\r\n    }\r\n}\r\n(function (Images) {\r\n})(Images || (Images = {}));\r\n//# sourceMappingURL=images.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQzhDO0FBQ1Y7QUFDN0IscUJBQXFCLHNEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGtFQUFnQyxHQUFHLGtCQUFrQjtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGtFQUFnQyxHQUFHLGtCQUFrQjtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGtCQUFrQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ltYWdlcy5tanM/YjQyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5tanNcIjtcclxuZXhwb3J0IGNsYXNzIEltYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIHZhcmlhdGlvbiBvZiBhIGdpdmVuIGltYWdlLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVWYXJpYXRpb24oYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ltYWdlcy92YXJpYXRpb25zJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxyXG4gICAgICovXHJcbiAgICBlZGl0KGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvZWRpdHMnLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2dlbmVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoSW1hZ2VzKSB7XHJcbn0pKEltYWdlcyB8fCAoSW1hZ2VzID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2VzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/images.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/models.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/models.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models),\n/* harmony export */   ModelsPage: () => (/* binding */ ModelsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\n\r\nclass Models extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Retrieves a model instance, providing basic information about the model such as\r\n     * the owner and permissioning.\r\n     */\r\n    retrieve(model, options) {\r\n        return this._client.get(`/models/${model}`, options);\r\n    }\r\n    /**\r\n     * Lists the currently available models, and provides basic information about each\r\n     * one such as the owner and availability.\r\n     */\r\n    list(options) {\r\n        return this._client.getAPIList('/models', ModelsPage, options);\r\n    }\r\n    /**\r\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\r\n     * delete a model.\r\n     */\r\n    del(model, options) {\r\n        return this._client.delete(`/models/${model}`, options);\r\n    }\r\n}\r\n/**\r\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\r\n */\r\nclass ModelsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page {\r\n}\r\n(function (Models) {\r\n    Models.ModelsPage = _models_mjs__WEBPACK_IMPORTED_MODULE_2__.ModelsPage;\r\n})(Models || (Models = {}));\r\n//# sourceMappingURL=models.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDOEM7QUFDSjtBQUNEO0FBQ2xDLHFCQUFxQixzREFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE1BQU07QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsTUFBTTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUJBQXlCLGlEQUFJO0FBQ3BDO0FBQ0E7QUFDQSx3QkFBd0IsbURBQW9CO0FBQzVDLENBQUMsd0JBQXdCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZWxzLm1qcz9iNzc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBNb2RlbHNBUEkgZnJvbSBcIi4vbW9kZWxzLm1qc1wiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcIi4uL3BhZ2luYXRpb24ubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyBhIG1vZGVsIGluc3RhbmNlLCBwcm92aWRpbmcgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1vZGVsIHN1Y2ggYXNcclxuICAgICAqIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cclxuICAgICAqL1xyXG4gICAgcmV0cmlldmUobW9kZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL21vZGVscy8ke21vZGVsfWAsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBtb2RlbHMsIGFuZCBwcm92aWRlcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBlYWNoXHJcbiAgICAgKiBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cclxuICAgICAqL1xyXG4gICAgbGlzdChvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvbW9kZWxzJywgTW9kZWxzUGFnZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24gdG9cclxuICAgICAqIGRlbGV0ZSBhIG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBkZWwobW9kZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL21vZGVscy8ke21vZGVsfWAsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW9kZWxzUGFnZSBleHRlbmRzIFBhZ2Uge1xyXG59XHJcbihmdW5jdGlvbiAoTW9kZWxzKSB7XHJcbiAgICBNb2RlbHMuTW9kZWxzUGFnZSA9IE1vZGVsc0FQSS5Nb2RlbHNQYWdlO1xyXG59KShNb2RlbHMgfHwgKE1vZGVscyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVscy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/moderations.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/moderations.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: () => (/* binding */ Moderations)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nclass Moderations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Classifies if text is potentially harmful.\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/moderations', { body, ...options });\r\n    }\r\n}\r\n(function (Moderations) {\r\n})(Moderations || (Moderations = {}));\r\n//# sourceMappingURL=moderations.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlcmF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUM4QztBQUN2QywwQkFBMEIsc0RBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsa0JBQWtCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0NBQWtDO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnVzaW9uLWFpLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZXJhdGlvbnMubWpzPzg1MTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cclxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBNb2RlcmF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3NpZmllcyBpZiB0ZXh0IGlzIHBvdGVudGlhbGx5IGhhcm1mdWwuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvbW9kZXJhdGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XHJcbiAgICB9XHJcbn1cclxuKGZ1bmN0aW9uIChNb2RlcmF0aW9ucykge1xyXG59KShNb2RlcmF0aW9ucyB8fCAoTW9kZXJhdGlvbnMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlcmF0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/moderations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/uploads/parts.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/parts.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parts: () => (/* binding */ Parts)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Parts extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    /**\r\n     * Adds a\r\n     * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\r\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\r\n     * A Part represents a chunk of bytes from the file you are trying to upload.\r\n     *\r\n     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\r\n     * maximum of 8 GB.\r\n     *\r\n     * It is possible to add multiple Parts in parallel. You can decide the intended\r\n     * order of the Parts when you\r\n     * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\r\n     */\r\n    create(uploadId, body, options) {\r\n        return this._client.post(`/uploads/${uploadId}/parts`, _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({ body, ...options }));\r\n    }\r\n}\r\n(function (Parts) {\r\n})(Parts || (Parts = {}));\r\n//# sourceMappingURL=parts.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3BhcnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNpRDtBQUNWO0FBQ2hDLG9CQUFvQixzREFBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVMsU0FBUyxrRUFBZ0MsR0FBRyxrQkFBa0I7QUFDcEg7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQkFBc0I7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3BhcnRzLm1qcz8yNGMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXHJcbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xyXG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuLi8uLi9jb3JlLm1qc1wiO1xyXG5leHBvcnQgY2xhc3MgUGFydHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYVxyXG4gICAgICogW1BhcnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9wYXJ0LW9iamVjdCkgdG8gYW5cclxuICAgICAqIFtVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9vYmplY3QpIG9iamVjdC5cclxuICAgICAqIEEgUGFydCByZXByZXNlbnRzIGEgY2h1bmsgb2YgYnl0ZXMgZnJvbSB0aGUgZmlsZSB5b3UgYXJlIHRyeWluZyB0byB1cGxvYWQuXHJcbiAgICAgKlxyXG4gICAgICogRWFjaCBQYXJ0IGNhbiBiZSBhdCBtb3N0IDY0IE1CLCBhbmQgeW91IGNhbiBhZGQgUGFydHMgdW50aWwgeW91IGhpdCB0aGUgVXBsb2FkXHJcbiAgICAgKiBtYXhpbXVtIG9mIDggR0IuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgcG9zc2libGUgdG8gYWRkIG11bHRpcGxlIFBhcnRzIGluIHBhcmFsbGVsLiBZb3UgY2FuIGRlY2lkZSB0aGUgaW50ZW5kZWRcclxuICAgICAqIG9yZGVyIG9mIHRoZSBQYXJ0cyB3aGVuIHlvdVxyXG4gICAgICogW2NvbXBsZXRlIHRoZSBVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9jb21wbGV0ZSkuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZSh1cGxvYWRJZCwgYm9keSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3VwbG9hZHMvJHt1cGxvYWRJZH0vcGFydHNgLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoUGFydHMpIHtcclxufSkoUGFydHMgfHwgKFBhcnRzID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydHMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/uploads/parts.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/uploads/uploads.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/uploads.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Uploads: () => (/* binding */ Uploads)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _parts_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parts.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/parts.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\n\r\nclass Uploads extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.parts = new _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts(this._client);\r\n    }\r\n    /**\r\n     * Creates an intermediate\r\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\r\n     * that you can add\r\n     * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\r\n     * Currently, an Upload can accept at most 8 GB in total and expires after an hour\r\n     * after you create it.\r\n     *\r\n     * Once you complete the Upload, we will create a\r\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\r\n     * contains all the parts you uploaded. This File is usable in the rest of our\r\n     * platform as a regular File object.\r\n     *\r\n     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer\r\n     * to documentation for the supported MIME types for your use case:\r\n     *\r\n     * - [Assistants](https://platform.openai.com/docs/assistants/tools/file-search/supported-files)\r\n     *\r\n     * For guidance on the proper filename extensions for each purpose, please follow\r\n     * the documentation on\r\n     * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\r\n     */\r\n    create(body, options) {\r\n        return this._client.post('/uploads', { body, ...options });\r\n    }\r\n    /**\r\n     * Cancels the Upload. No Parts may be added after an Upload is cancelled.\r\n     */\r\n    cancel(uploadId, options) {\r\n        return this._client.post(`/uploads/${uploadId}/cancel`, options);\r\n    }\r\n    /**\r\n     * Completes the\r\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\r\n     *\r\n     * Within the returned Upload object, there is a nested\r\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\r\n     * is ready to use in the rest of the platform.\r\n     *\r\n     * You can specify the order of the Parts by passing in an ordered list of the Part\r\n     * IDs.\r\n     *\r\n     * The number of bytes uploaded upon completion must match the number of bytes\r\n     * initially specified when creating the Upload object. No Parts may be added after\r\n     * an Upload is completed.\r\n     */\r\n    complete(uploadId, body, options) {\r\n        return this._client.post(`/uploads/${uploadId}/complete`, { body, ...options });\r\n    }\r\n}\r\n(function (Uploads) {\r\n    Uploads.Parts = _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts;\r\n})(Uploads || (Uploads = {}));\r\n//# sourceMappingURL=uploads.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3VwbG9hZHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ2lEO0FBQ1Q7QUFDakMsc0JBQXNCLHNEQUFXO0FBQ3hDO0FBQ0E7QUFDQSx5QkFBeUIsNkNBQWM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGtCQUFrQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxTQUFTLGNBQWMsa0JBQWtCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2Q0FBYztBQUNsQyxDQUFDLDBCQUEwQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1c2lvbi1haS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3VwbG9hZHMvdXBsb2Fkcy5tanM/MWZlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxyXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcclxuaW1wb3J0ICogYXMgUGFydHNBUEkgZnJvbSBcIi4vcGFydHMubWpzXCI7XHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnBhcnRzID0gbmV3IFBhcnRzQVBJLlBhcnRzKHRoaXMuX2NsaWVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaW50ZXJtZWRpYXRlXHJcbiAgICAgKiBbVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvb2JqZWN0KSBvYmplY3RcclxuICAgICAqIHRoYXQgeW91IGNhbiBhZGRcclxuICAgICAqIFtQYXJ0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL3BhcnQtb2JqZWN0KSB0by5cclxuICAgICAqIEN1cnJlbnRseSwgYW4gVXBsb2FkIGNhbiBhY2NlcHQgYXQgbW9zdCA4IEdCIGluIHRvdGFsIGFuZCBleHBpcmVzIGFmdGVyIGFuIGhvdXJcclxuICAgICAqIGFmdGVyIHlvdSBjcmVhdGUgaXQuXHJcbiAgICAgKlxyXG4gICAgICogT25jZSB5b3UgY29tcGxldGUgdGhlIFVwbG9hZCwgd2Ugd2lsbCBjcmVhdGUgYVxyXG4gICAgICogW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvb2JqZWN0KSBvYmplY3QgdGhhdFxyXG4gICAgICogY29udGFpbnMgYWxsIHRoZSBwYXJ0cyB5b3UgdXBsb2FkZWQuIFRoaXMgRmlsZSBpcyB1c2FibGUgaW4gdGhlIHJlc3Qgb2Ygb3VyXHJcbiAgICAgKiBwbGF0Zm9ybSBhcyBhIHJlZ3VsYXIgRmlsZSBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGNlcnRhaW4gYHB1cnBvc2VgcywgdGhlIGNvcnJlY3QgYG1pbWVfdHlwZWAgbXVzdCBiZSBzcGVjaWZpZWQuIFBsZWFzZSByZWZlclxyXG4gICAgICogdG8gZG9jdW1lbnRhdGlvbiBmb3IgdGhlIHN1cHBvcnRlZCBNSU1FIHR5cGVzIGZvciB5b3VyIHVzZSBjYXNlOlxyXG4gICAgICpcclxuICAgICAqIC0gW0Fzc2lzdGFudHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvdG9vbHMvZmlsZS1zZWFyY2gvc3VwcG9ydGVkLWZpbGVzKVxyXG4gICAgICpcclxuICAgICAqIEZvciBndWlkYW5jZSBvbiB0aGUgcHJvcGVyIGZpbGVuYW1lIGV4dGVuc2lvbnMgZm9yIGVhY2ggcHVycG9zZSwgcGxlYXNlIGZvbGxvd1xyXG4gICAgICogdGhlIGRvY3VtZW50YXRpb24gb25cclxuICAgICAqIFtjcmVhdGluZyBhIEZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvY3JlYXRlKS5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy91cGxvYWRzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYW5jZWxzIHRoZSBVcGxvYWQuIE5vIFBhcnRzIG1heSBiZSBhZGRlZCBhZnRlciBhbiBVcGxvYWQgaXMgY2FuY2VsbGVkLlxyXG4gICAgICovXHJcbiAgICBjYW5jZWwodXBsb2FkSWQsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC91cGxvYWRzLyR7dXBsb2FkSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wbGV0ZXMgdGhlXHJcbiAgICAgKiBbVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvb2JqZWN0KS5cclxuICAgICAqXHJcbiAgICAgKiBXaXRoaW4gdGhlIHJldHVybmVkIFVwbG9hZCBvYmplY3QsIHRoZXJlIGlzIGEgbmVzdGVkXHJcbiAgICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9vYmplY3QpIG9iamVjdCB0aGF0XHJcbiAgICAgKiBpcyByZWFkeSB0byB1c2UgaW4gdGhlIHJlc3Qgb2YgdGhlIHBsYXRmb3JtLlxyXG4gICAgICpcclxuICAgICAqIFlvdSBjYW4gc3BlY2lmeSB0aGUgb3JkZXIgb2YgdGhlIFBhcnRzIGJ5IHBhc3NpbmcgaW4gYW4gb3JkZXJlZCBsaXN0IG9mIHRoZSBQYXJ0XHJcbiAgICAgKiBJRHMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBieXRlcyB1cGxvYWRlZCB1cG9uIGNvbXBsZXRpb24gbXVzdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGJ5dGVzXHJcbiAgICAgKiBpbml0aWFsbHkgc3BlY2lmaWVkIHdoZW4gY3JlYXRpbmcgdGhlIFVwbG9hZCBvYmplY3QuIE5vIFBhcnRzIG1heSBiZSBhZGRlZCBhZnRlclxyXG4gICAgICogYW4gVXBsb2FkIGlzIGNvbXBsZXRlZC5cclxuICAgICAqL1xyXG4gICAgY29tcGxldGUodXBsb2FkSWQsIGJvZHksIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC91cGxvYWRzLyR7dXBsb2FkSWR9L2NvbXBsZXRlYCwgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xyXG4gICAgfVxyXG59XHJcbihmdW5jdGlvbiAoVXBsb2Fkcykge1xyXG4gICAgVXBsb2Fkcy5QYXJ0cyA9IFBhcnRzQVBJLlBhcnRzO1xyXG59KShVcGxvYWRzIHx8IChVcGxvYWRzID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBsb2Fkcy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/streaming.mjs":
/*!*******************************************!*\
  !*** ./node_modules/openai/streaming.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   _decodeChunks: () => (/* binding */ _decodeChunks),\n/* harmony export */   _iterSSEMessages: () => (/* binding */ _iterSSEMessages),\n/* harmony export */   readableStreamAsyncIterable: () => (/* binding */ readableStreamAsyncIterable)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/error */ \"(rsc)/./node_modules/openai/error.mjs\");\n\r\n\r\n\r\nclass Stream {\r\n    constructor(iterator, controller) {\r\n        this.iterator = iterator;\r\n        this.controller = controller;\r\n    }\r\n    static fromSSEResponse(response, controller) {\r\n        let consumed = false;\r\n        async function* iterator() {\r\n            if (consumed) {\r\n                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\r\n            }\r\n            consumed = true;\r\n            let done = false;\r\n            try {\r\n                for await (const sse of _iterSSEMessages(response, controller)) {\r\n                    if (done)\r\n                        continue;\r\n                    if (sse.data.startsWith('[DONE]')) {\r\n                        done = true;\r\n                        continue;\r\n                    }\r\n                    if (sse.event === null) {\r\n                        let data;\r\n                        try {\r\n                            data = JSON.parse(sse.data);\r\n                        }\r\n                        catch (e) {\r\n                            console.error(`Could not parse message into JSON:`, sse.data);\r\n                            console.error(`From chunk:`, sse.raw);\r\n                            throw e;\r\n                        }\r\n                        if (data && data.error) {\r\n                            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, undefined, undefined);\r\n                        }\r\n                        yield data;\r\n                    }\r\n                    else {\r\n                        let data;\r\n                        try {\r\n                            data = JSON.parse(sse.data);\r\n                        }\r\n                        catch (e) {\r\n                            console.error(`Could not parse message into JSON:`, sse.data);\r\n                            console.error(`From chunk:`, sse.raw);\r\n                            throw e;\r\n                        }\r\n                        // TODO: Is this where the error should be thrown?\r\n                        if (sse.event == 'error') {\r\n                            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, data.message, undefined);\r\n                        }\r\n                        yield { event: sse.event, data: data };\r\n                    }\r\n                }\r\n                done = true;\r\n            }\r\n            catch (e) {\r\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\r\n                if (e instanceof Error && e.name === 'AbortError')\r\n                    return;\r\n                throw e;\r\n            }\r\n            finally {\r\n                // If the user `break`s, abort the ongoing request.\r\n                if (!done)\r\n                    controller.abort();\r\n            }\r\n        }\r\n        return new Stream(iterator, controller);\r\n    }\r\n    /**\r\n     * Generates a Stream from a newline-separated ReadableStream\r\n     * where each item is a JSON value.\r\n     */\r\n    static fromReadableStream(readableStream, controller) {\r\n        let consumed = false;\r\n        async function* iterLines() {\r\n            const lineDecoder = new LineDecoder();\r\n            const iter = readableStreamAsyncIterable(readableStream);\r\n            for await (const chunk of iter) {\r\n                for (const line of lineDecoder.decode(chunk)) {\r\n                    yield line;\r\n                }\r\n            }\r\n            for (const line of lineDecoder.flush()) {\r\n                yield line;\r\n            }\r\n        }\r\n        async function* iterator() {\r\n            if (consumed) {\r\n                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\r\n            }\r\n            consumed = true;\r\n            let done = false;\r\n            try {\r\n                for await (const line of iterLines()) {\r\n                    if (done)\r\n                        continue;\r\n                    if (line)\r\n                        yield JSON.parse(line);\r\n                }\r\n                done = true;\r\n            }\r\n            catch (e) {\r\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\r\n                if (e instanceof Error && e.name === 'AbortError')\r\n                    return;\r\n                throw e;\r\n            }\r\n            finally {\r\n                // If the user `break`s, abort the ongoing request.\r\n                if (!done)\r\n                    controller.abort();\r\n            }\r\n        }\r\n        return new Stream(iterator, controller);\r\n    }\r\n    [Symbol.asyncIterator]() {\r\n        return this.iterator();\r\n    }\r\n    /**\r\n     * Splits the stream into two streams which can be\r\n     * independently read from at different speeds.\r\n     */\r\n    tee() {\r\n        const left = [];\r\n        const right = [];\r\n        const iterator = this.iterator();\r\n        const teeIterator = (queue) => {\r\n            return {\r\n                next: () => {\r\n                    if (queue.length === 0) {\r\n                        const result = iterator.next();\r\n                        left.push(result);\r\n                        right.push(result);\r\n                    }\r\n                    return queue.shift();\r\n                },\r\n            };\r\n        };\r\n        return [\r\n            new Stream(() => teeIterator(left), this.controller),\r\n            new Stream(() => teeIterator(right), this.controller),\r\n        ];\r\n    }\r\n    /**\r\n     * Converts this stream to a newline-separated ReadableStream of\r\n     * JSON stringified values in the stream\r\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\r\n     */\r\n    toReadableStream() {\r\n        const self = this;\r\n        let iter;\r\n        const encoder = new TextEncoder();\r\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream({\r\n            async start() {\r\n                iter = self[Symbol.asyncIterator]();\r\n            },\r\n            async pull(ctrl) {\r\n                try {\r\n                    const { value, done } = await iter.next();\r\n                    if (done)\r\n                        return ctrl.close();\r\n                    const bytes = encoder.encode(JSON.stringify(value) + '\\n');\r\n                    ctrl.enqueue(bytes);\r\n                }\r\n                catch (err) {\r\n                    ctrl.error(err);\r\n                }\r\n            },\r\n            async cancel() {\r\n                await iter.return?.();\r\n            },\r\n        });\r\n    }\r\n}\r\nasync function* _iterSSEMessages(response, controller) {\r\n    if (!response.body) {\r\n        controller.abort();\r\n        throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Attempted to iterate over a response with no body`);\r\n    }\r\n    const sseDecoder = new SSEDecoder();\r\n    const lineDecoder = new LineDecoder();\r\n    const iter = readableStreamAsyncIterable(response.body);\r\n    for await (const sseChunk of iterSSEChunks(iter)) {\r\n        for (const line of lineDecoder.decode(sseChunk)) {\r\n            const sse = sseDecoder.decode(line);\r\n            if (sse)\r\n                yield sse;\r\n        }\r\n    }\r\n    for (const line of lineDecoder.flush()) {\r\n        const sse = sseDecoder.decode(line);\r\n        if (sse)\r\n            yield sse;\r\n    }\r\n}\r\n/**\r\n * Given an async iterable iterator, iterates over it and yields full\r\n * SSE chunks, i.e. yields when a double new-line is encountered.\r\n */\r\nasync function* iterSSEChunks(iterator) {\r\n    let data = new Uint8Array();\r\n    for await (const chunk of iterator) {\r\n        if (chunk == null) {\r\n            continue;\r\n        }\r\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\r\n            : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\r\n                : chunk;\r\n        let newData = new Uint8Array(data.length + binaryChunk.length);\r\n        newData.set(data);\r\n        newData.set(binaryChunk, data.length);\r\n        data = newData;\r\n        let patternIndex;\r\n        while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\r\n            yield data.slice(0, patternIndex);\r\n            data = data.slice(patternIndex);\r\n        }\r\n    }\r\n    if (data.length > 0) {\r\n        yield data;\r\n    }\r\n}\r\nfunction findDoubleNewlineIndex(buffer) {\r\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\r\n    // and returns the index right after the first occurrence of any pattern,\r\n    // or -1 if none of the patterns are found.\r\n    const newline = 0x0a; // \\n\r\n    const carriage = 0x0d; // \\r\r\n    for (let i = 0; i < buffer.length - 2; i++) {\r\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\r\n            // \\n\\n\r\n            return i + 2;\r\n        }\r\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\r\n            // \\r\\r\r\n            return i + 2;\r\n        }\r\n        if (buffer[i] === carriage &&\r\n            buffer[i + 1] === newline &&\r\n            i + 3 < buffer.length &&\r\n            buffer[i + 2] === carriage &&\r\n            buffer[i + 3] === newline) {\r\n            // \\r\\n\\r\\n\r\n            return i + 4;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nclass SSEDecoder {\r\n    constructor() {\r\n        this.event = null;\r\n        this.data = [];\r\n        this.chunks = [];\r\n    }\r\n    decode(line) {\r\n        if (line.endsWith('\\r')) {\r\n            line = line.substring(0, line.length - 1);\r\n        }\r\n        if (!line) {\r\n            // empty line and we didn't previously encounter any messages\r\n            if (!this.event && !this.data.length)\r\n                return null;\r\n            const sse = {\r\n                event: this.event,\r\n                data: this.data.join('\\n'),\r\n                raw: this.chunks,\r\n            };\r\n            this.event = null;\r\n            this.data = [];\r\n            this.chunks = [];\r\n            return sse;\r\n        }\r\n        this.chunks.push(line);\r\n        if (line.startsWith(':')) {\r\n            return null;\r\n        }\r\n        let [fieldname, _, value] = partition(line, ':');\r\n        if (value.startsWith(' ')) {\r\n            value = value.substring(1);\r\n        }\r\n        if (fieldname === 'event') {\r\n            this.event = value;\r\n        }\r\n        else if (fieldname === 'data') {\r\n            this.data.push(value);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\r\n * reading lines from text.\r\n *\r\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\r\n */\r\nclass LineDecoder {\r\n    constructor() {\r\n        this.buffer = [];\r\n        this.trailingCR = false;\r\n    }\r\n    decode(chunk) {\r\n        let text = this.decodeText(chunk);\r\n        if (this.trailingCR) {\r\n            text = '\\r' + text;\r\n            this.trailingCR = false;\r\n        }\r\n        if (text.endsWith('\\r')) {\r\n            this.trailingCR = true;\r\n            text = text.slice(0, -1);\r\n        }\r\n        if (!text) {\r\n            return [];\r\n        }\r\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\r\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\r\n        // if there is a trailing new line then the last entry will be an empty\r\n        // string which we don't care about\r\n        if (trailingNewline) {\r\n            lines.pop();\r\n        }\r\n        if (lines.length === 1 && !trailingNewline) {\r\n            this.buffer.push(lines[0]);\r\n            return [];\r\n        }\r\n        if (this.buffer.length > 0) {\r\n            lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\r\n            this.buffer = [];\r\n        }\r\n        if (!trailingNewline) {\r\n            this.buffer = [lines.pop() || ''];\r\n        }\r\n        return lines;\r\n    }\r\n    decodeText(bytes) {\r\n        if (bytes == null)\r\n            return '';\r\n        if (typeof bytes === 'string')\r\n            return bytes;\r\n        // Node:\r\n        if (typeof Buffer !== 'undefined') {\r\n            if (bytes instanceof Buffer) {\r\n                return bytes.toString();\r\n            }\r\n            if (bytes instanceof Uint8Array) {\r\n                return Buffer.from(bytes).toString();\r\n            }\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\r\n        }\r\n        // Browser\r\n        if (typeof TextDecoder !== 'undefined') {\r\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\r\n                this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\r\n                return this.textDecoder.decode(bytes);\r\n            }\r\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\r\n        }\r\n        throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\r\n    }\r\n    flush() {\r\n        if (!this.buffer.length && !this.trailingCR) {\r\n            return [];\r\n        }\r\n        const lines = [this.buffer.join('')];\r\n        this.buffer = [];\r\n        this.trailingCR = false;\r\n        return lines;\r\n    }\r\n}\r\n// prettier-ignore\r\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\r\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\r\n/** This is an internal helper function that's just used for testing */\r\nfunction _decodeChunks(chunks) {\r\n    const decoder = new LineDecoder();\r\n    const lines = [];\r\n    for (const chunk of chunks) {\r\n        lines.push(...decoder.decode(chunk));\r\n    }\r\n    return lines;\r\n}\r\nfunction partition(str, delimiter) {\r\n    const index = str.indexOf(delimiter);\r\n    if (index !== -1) {\r\n        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\r\n    }\r\n    return [str, '', ''];\r\n}\r\n/**\r\n * Most browsers don't yet have async iterable support for ReadableStream,\r\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\r\n *\r\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\r\n */\r\nfunction readableStreamAsyncIterable(stream) {\r\n    if (stream[Symbol.asyncIterator])\r\n        return stream;\r\n    const reader = stream.getReader();\r\n    return {\r\n        async next() {\r\n            try {\r\n                const result = await reader.read();\r\n                if (result?.done)\r\n                    reader.releaseLock(); // release lock when stream becomes closed\r\n                return result;\r\n            }\r\n            catch (e) {\r\n                reader.releaseLock(); // release lock when stream becomes errored\r\n                throw e;\r\n            }\r\n        },\r\n        async return() {\r\n            const cancelPromise = reader.cancel();\r\n            reader.releaseLock();\r\n            await cancelPromise;\r\n            return { done: true, value: undefined };\r\n        },\r\n        [Symbol.asyncIterator]() {\r\n            return this;\r\n        },\r\n    };\r\n}\r\n//# sourceMappingURL=streaming.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/uploads.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/uploads.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   isBlobLike: () => (/* binding */ isBlobLike),\n/* harmony export */   isFileLike: () => (/* binding */ isFileLike),\n/* harmony export */   isMultipartBody: () => (/* binding */ isMultipartBody),\n/* harmony export */   isResponseLike: () => (/* binding */ isResponseLike),\n/* harmony export */   isUploadable: () => (/* binding */ isUploadable),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n\r\n\r\nconst isResponseLike = (value) => value != null &&\r\n    typeof value === 'object' &&\r\n    typeof value.url === 'string' &&\r\n    typeof value.blob === 'function';\r\nconst isFileLike = (value) => value != null &&\r\n    typeof value === 'object' &&\r\n    typeof value.name === 'string' &&\r\n    typeof value.lastModified === 'number' &&\r\n    isBlobLike(value);\r\n/**\r\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\r\n * adds the arrayBuffer() method type because it is available and used at runtime\r\n */\r\nconst isBlobLike = (value) => value != null &&\r\n    typeof value === 'object' &&\r\n    typeof value.size === 'number' &&\r\n    typeof value.type === 'string' &&\r\n    typeof value.text === 'function' &&\r\n    typeof value.slice === 'function' &&\r\n    typeof value.arrayBuffer === 'function';\r\nconst isUploadable = (value) => {\r\n    return isFileLike(value) || isResponseLike(value) || (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream)(value);\r\n};\r\n/**\r\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\r\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\r\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\r\n * @param {Object=} options additional properties\r\n * @param {string=} options.type the MIME type of the content\r\n * @param {number=} options.lastModified the last modified timestamp\r\n * @returns a {@link File} with the given properties\r\n */\r\nasync function toFile(value, name, options) {\r\n    // If it's a promise, resolve it.\r\n    value = await value;\r\n    // Use the file's options if there isn't one provided\r\n    options ?? (options = isFileLike(value) ? { lastModified: value.lastModified, type: value.type } : {});\r\n    if (isResponseLike(value)) {\r\n        const blob = await value.blob();\r\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file');\r\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File([blob], name, options);\r\n    }\r\n    const bits = await getBytes(value);\r\n    name || (name = getName(value) ?? 'unknown_file');\r\n    if (!options.type) {\r\n        const type = bits[0]?.type;\r\n        if (typeof type === 'string') {\r\n            options = { ...options, type };\r\n        }\r\n    }\r\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\r\n}\r\nasync function getBytes(value) {\r\n    let parts = [];\r\n    if (typeof value === 'string' ||\r\n        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\r\n        value instanceof ArrayBuffer) {\r\n        parts.push(value);\r\n    }\r\n    else if (isBlobLike(value)) {\r\n        parts.push(await value.arrayBuffer());\r\n    }\r\n    else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\r\n    ) {\r\n        for await (const chunk of value) {\r\n            parts.push(chunk); // TODO, consider validating?\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor\r\n            ?.name}; props: ${propsForError(value)}`);\r\n    }\r\n    return parts;\r\n}\r\nfunction propsForError(value) {\r\n    const props = Object.getOwnPropertyNames(value);\r\n    return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\r\n}\r\nfunction getName(value) {\r\n    return (getStringFromMaybeBuffer(value.name) ||\r\n        getStringFromMaybeBuffer(value.filename) ||\r\n        // For fs.ReadStream\r\n        getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop());\r\n}\r\nconst getStringFromMaybeBuffer = (x) => {\r\n    if (typeof x === 'string')\r\n        return x;\r\n    if (typeof Buffer !== 'undefined' && x instanceof Buffer)\r\n        return String(x);\r\n    return undefined;\r\n};\r\nconst isAsyncIterableIterator = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\r\nconst isMultipartBody = (body) => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\r\n/**\r\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\r\n * Otherwise returns the request as is.\r\n */\r\nconst maybeMultipartFormRequestOptions = async (opts) => {\r\n    if (!hasUploadableValue(opts.body))\r\n        return opts;\r\n    const form = await createForm(opts.body);\r\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\r\n};\r\nconst multipartFormRequestOptions = async (opts) => {\r\n    const form = await createForm(opts.body);\r\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\r\n};\r\nconst createForm = async (body) => {\r\n    const form = new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData();\r\n    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\r\n    return form;\r\n};\r\nconst hasUploadableValue = (value) => {\r\n    if (isUploadable(value))\r\n        return true;\r\n    if (Array.isArray(value))\r\n        return value.some(hasUploadableValue);\r\n    if (value && typeof value === 'object') {\r\n        for (const k in value) {\r\n            if (hasUploadableValue(value[k]))\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nconst addFormValue = async (form, key, value) => {\r\n    if (value === undefined)\r\n        return;\r\n    if (value == null) {\r\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\r\n    }\r\n    // TODO: make nested formats configurable\r\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n        form.append(key, String(value));\r\n    }\r\n    else if (isUploadable(value)) {\r\n        const file = await toFile(value);\r\n        form.append(key, file);\r\n    }\r\n    else if (Array.isArray(value)) {\r\n        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\r\n    }\r\n    else if (typeof value === 'object') {\r\n        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\r\n    }\r\n    else {\r\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\r\n    }\r\n};\r\n//# sourceMappingURL=uploads.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/version.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/version.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = '4.56.1'; // x-release-please-version\r\n//# sourceMappingURL=version.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTywwQkFBMEI7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXNpb24tYWkvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzP2QzMjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC41Ni4xJzsgLy8geC1yZWxlYXNlLXBsZWFzZS12ZXJzaW9uXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24ubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/version.mjs\n");

/***/ })

};
;