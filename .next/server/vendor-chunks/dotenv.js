/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dotenv";
exports.ids = ["vendor-chunks/dotenv"];
exports.modules = {

/***/ "(rsc)/./node_modules/dotenv/lib/main.js":
/*!*****************************************!*\
  !*** ./node_modules/dotenv/lib/main.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\")\r\nconst path = __webpack_require__(/*! path */ \"path\")\r\nconst os = __webpack_require__(/*! os */ \"os\")\r\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\")\r\nconst packageJson = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/dotenv/package.json\")\r\n\r\nconst version = packageJson.version\r\n\r\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\r\n\r\n// Parse src into an Object\r\nfunction parse (src) {\r\n  const obj = {}\r\n\r\n  // Convert buffer to string\r\n  let lines = src.toString()\r\n\r\n  // Convert line breaks to same format\r\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\r\n\r\n  let match\r\n  while ((match = LINE.exec(lines)) != null) {\r\n    const key = match[1]\r\n\r\n    // Default undefined or null to empty string\r\n    let value = (match[2] || '')\r\n\r\n    // Remove whitespace\r\n    value = value.trim()\r\n\r\n    // Check if double quoted\r\n    const maybeQuote = value[0]\r\n\r\n    // Remove surrounding quotes\r\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\r\n\r\n    // Expand newlines if double quoted\r\n    if (maybeQuote === '\"') {\r\n      value = value.replace(/\\\\n/g, '\\n')\r\n      value = value.replace(/\\\\r/g, '\\r')\r\n    }\r\n\r\n    // Add to object\r\n    obj[key] = value\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nfunction _parseVault (options) {\r\n  const vaultPath = _vaultPath(options)\r\n\r\n  // Parse .env.vault\r\n  const result = DotenvModule.configDotenv({ path: vaultPath })\r\n  if (!result.parsed) {\r\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\r\n    err.code = 'MISSING_DATA'\r\n    throw err\r\n  }\r\n\r\n  // handle scenario for comma separated keys - for use with key rotation\r\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\r\n  const keys = _dotenvKey(options).split(',')\r\n  const length = keys.length\r\n\r\n  let decrypted\r\n  for (let i = 0; i < length; i++) {\r\n    try {\r\n      // Get full key\r\n      const key = keys[i].trim()\r\n\r\n      // Get instructions for decrypt\r\n      const attrs = _instructions(result, key)\r\n\r\n      // Decrypt\r\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\r\n\r\n      break\r\n    } catch (error) {\r\n      // last key\r\n      if (i + 1 >= length) {\r\n        throw error\r\n      }\r\n      // try next key\r\n    }\r\n  }\r\n\r\n  // Parse decrypted .env string\r\n  return DotenvModule.parse(decrypted)\r\n}\r\n\r\nfunction _log (message) {\r\n  console.log(`[dotenv@${version}][INFO] ${message}`)\r\n}\r\n\r\nfunction _warn (message) {\r\n  console.log(`[dotenv@${version}][WARN] ${message}`)\r\n}\r\n\r\nfunction _debug (message) {\r\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\r\n}\r\n\r\nfunction _dotenvKey (options) {\r\n  // prioritize developer directly setting options.DOTENV_KEY\r\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\r\n    return options.DOTENV_KEY\r\n  }\r\n\r\n  // secondary infra already contains a DOTENV_KEY environment variable\r\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\r\n    return process.env.DOTENV_KEY\r\n  }\r\n\r\n  // fallback to empty string\r\n  return ''\r\n}\r\n\r\nfunction _instructions (result, dotenvKey) {\r\n  // Parse DOTENV_KEY. Format is a URI\r\n  let uri\r\n  try {\r\n    uri = new URL(dotenvKey)\r\n  } catch (error) {\r\n    if (error.code === 'ERR_INVALID_URL') {\r\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\r\n      err.code = 'INVALID_DOTENV_KEY'\r\n      throw err\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  // Get decrypt key\r\n  const key = uri.password\r\n  if (!key) {\r\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\r\n    err.code = 'INVALID_DOTENV_KEY'\r\n    throw err\r\n  }\r\n\r\n  // Get environment\r\n  const environment = uri.searchParams.get('environment')\r\n  if (!environment) {\r\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\r\n    err.code = 'INVALID_DOTENV_KEY'\r\n    throw err\r\n  }\r\n\r\n  // Get ciphertext payload\r\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\r\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\r\n  if (!ciphertext) {\r\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\r\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\r\n    throw err\r\n  }\r\n\r\n  return { ciphertext, key }\r\n}\r\n\r\nfunction _vaultPath (options) {\r\n  let possibleVaultPath = null\r\n\r\n  if (options && options.path && options.path.length > 0) {\r\n    if (Array.isArray(options.path)) {\r\n      for (const filepath of options.path) {\r\n        if (fs.existsSync(filepath)) {\r\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\r\n        }\r\n      }\r\n    } else {\r\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\r\n    }\r\n  } else {\r\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\r\n  }\r\n\r\n  if (fs.existsSync(possibleVaultPath)) {\r\n    return possibleVaultPath\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction _resolveHome (envPath) {\r\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\r\n}\r\n\r\nfunction _configVault (options) {\r\n  _log('Loading env from encrypted .env.vault')\r\n\r\n  const parsed = DotenvModule._parseVault(options)\r\n\r\n  let processEnv = process.env\r\n  if (options && options.processEnv != null) {\r\n    processEnv = options.processEnv\r\n  }\r\n\r\n  DotenvModule.populate(processEnv, parsed, options)\r\n\r\n  return { parsed }\r\n}\r\n\r\nfunction configDotenv (options) {\r\n  const dotenvPath = path.resolve(process.cwd(), '.env')\r\n  let encoding = 'utf8'\r\n  const debug = Boolean(options && options.debug)\r\n\r\n  if (options && options.encoding) {\r\n    encoding = options.encoding\r\n  } else {\r\n    if (debug) {\r\n      _debug('No encoding is specified. UTF-8 is used by default')\r\n    }\r\n  }\r\n\r\n  let optionPaths = [dotenvPath] // default, look for .env\r\n  if (options && options.path) {\r\n    if (!Array.isArray(options.path)) {\r\n      optionPaths = [_resolveHome(options.path)]\r\n    } else {\r\n      optionPaths = [] // reset default\r\n      for (const filepath of options.path) {\r\n        optionPaths.push(_resolveHome(filepath))\r\n      }\r\n    }\r\n  }\r\n\r\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\r\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\r\n  let lastError\r\n  const parsedAll = {}\r\n  for (const path of optionPaths) {\r\n    try {\r\n      // Specifying an encoding returns a string instead of a buffer\r\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\r\n\r\n      DotenvModule.populate(parsedAll, parsed, options)\r\n    } catch (e) {\r\n      if (debug) {\r\n        _debug(`Failed to load ${path} ${e.message}`)\r\n      }\r\n      lastError = e\r\n    }\r\n  }\r\n\r\n  let processEnv = process.env\r\n  if (options && options.processEnv != null) {\r\n    processEnv = options.processEnv\r\n  }\r\n\r\n  DotenvModule.populate(processEnv, parsedAll, options)\r\n\r\n  if (lastError) {\r\n    return { parsed: parsedAll, error: lastError }\r\n  } else {\r\n    return { parsed: parsedAll }\r\n  }\r\n}\r\n\r\n// Populates process.env from .env file\r\nfunction config (options) {\r\n  // fallback to original dotenv if DOTENV_KEY is not set\r\n  if (_dotenvKey(options).length === 0) {\r\n    return DotenvModule.configDotenv(options)\r\n  }\r\n\r\n  const vaultPath = _vaultPath(options)\r\n\r\n  // dotenvKey exists but .env.vault file does not exist\r\n  if (!vaultPath) {\r\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\r\n\r\n    return DotenvModule.configDotenv(options)\r\n  }\r\n\r\n  return DotenvModule._configVault(options)\r\n}\r\n\r\nfunction decrypt (encrypted, keyStr) {\r\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\r\n  let ciphertext = Buffer.from(encrypted, 'base64')\r\n\r\n  const nonce = ciphertext.subarray(0, 12)\r\n  const authTag = ciphertext.subarray(-16)\r\n  ciphertext = ciphertext.subarray(12, -16)\r\n\r\n  try {\r\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\r\n    aesgcm.setAuthTag(authTag)\r\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\r\n  } catch (error) {\r\n    const isRange = error instanceof RangeError\r\n    const invalidKeyLength = error.message === 'Invalid key length'\r\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\r\n\r\n    if (isRange || invalidKeyLength) {\r\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\r\n      err.code = 'INVALID_DOTENV_KEY'\r\n      throw err\r\n    } else if (decryptionFailed) {\r\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\r\n      err.code = 'DECRYPTION_FAILED'\r\n      throw err\r\n    } else {\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n// Populate process.env with parsed values\r\nfunction populate (processEnv, parsed, options = {}) {\r\n  const debug = Boolean(options && options.debug)\r\n  const override = Boolean(options && options.override)\r\n\r\n  if (typeof parsed !== 'object') {\r\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\r\n    err.code = 'OBJECT_REQUIRED'\r\n    throw err\r\n  }\r\n\r\n  // Set process.env\r\n  for (const key of Object.keys(parsed)) {\r\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\r\n      if (override === true) {\r\n        processEnv[key] = parsed[key]\r\n      }\r\n\r\n      if (debug) {\r\n        if (override === true) {\r\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\r\n        } else {\r\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\r\n        }\r\n      }\r\n    } else {\r\n      processEnv[key] = parsed[key]\r\n    }\r\n  }\r\n}\r\n\r\nconst DotenvModule = {\r\n  configDotenv,\r\n  _configVault,\r\n  _parseVault,\r\n  config,\r\n  decrypt,\r\n  parse,\r\n  populate\r\n}\r\n\r\nmodule.exports.configDotenv = DotenvModule.configDotenv\r\nmodule.exports._configVault = DotenvModule._configVault\r\nmodule.exports._parseVault = DotenvModule._parseVault\r\nmodule.exports.config = DotenvModule.config\r\nmodule.exports.decrypt = DotenvModule.decrypt\r\nmodule.exports.parse = DotenvModule.parse\r\nmodule.exports.populate = DotenvModule.populate\r\n\r\nmodule.exports = DotenvModule\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dotenv/lib/main.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dotenv/package.json":
/*!******************************************!*\
  !*** ./node_modules/dotenv/package.json ***!
  \******************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

/***/ })

};
;